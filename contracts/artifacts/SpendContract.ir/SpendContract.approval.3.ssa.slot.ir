main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        goto block@1
    block@1: // L118
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L118
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "createApplication(uint64)void" => block@3, method "rekey()void" => block@4, method "optin(pay,uint64)void" => block@5, method "deleteApplication()void" => block@6, * => block@7}
    block@3: // createApplication_route_L123
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        contracts/abstracted_account.algo.ts::SpendContract.createApplication(tmp%7#0)
        let contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@4: // rekey_route_L128
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        contracts/abstracted_account.algo.ts::SpendContract.rekey()
        let contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@5: // optin_route_L145
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let tmp%16#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%16#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%17#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        contracts/abstracted_account.algo.ts::SpendContract.optin(gtxn_idx%0#0, tmp%17#0)
        let contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@11
    block@6: // deleteApplication_route_L164
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (== tmp%18#0 DeleteApplication)
        (assert tmp%19#0) // OnCompletion is not DeleteApplication
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // can only call when not creating
        contracts/abstracted_account.algo.ts::SpendContract.deleteApplication()
        let contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@11
    block@7: // switch_case_default_L118
        goto block@8
    block@8: // switch_case_next_L118
        goto block@10
    block@9: // bare_routing_L118
        goto block@10
    block@10: // after_if_else_L118
        let contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#4: bool = 0u
        goto block@11
    block@11: // after_inlined_contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#0 <- block@3, contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#1 <- block@4, contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#2 <- block@5, contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#3 <- block@6, contracts/abstracted_account.algo.ts::SpendContract.__puya_arc4_router__%0#4 <- block@10)
        return tmp%0#0

subroutine contracts/abstracted_account.algo.ts::SpendContract.createApplication(plugin: uint64) -> void:
    block@0: // L123
        (app_global_put "plugin_id" plugin#0)
        return 

subroutine contracts/abstracted_account.algo.ts::SpendContract.rekey() -> void:
    block@0: // L128
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bytes[32] = (global CreatorAddress)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // only the creator can rekey a spend contract
        itxn_begin
        let inner_txn_params%0%%param_RekeyTo_idx_0#0: bytes[32] = (global CreatorAddress)
        ((itxn_field RekeyTo) inner_txn_params%0%%param_RekeyTo_idx_0#0)
        ((itxn_field Amount) 0u)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L131
        itxn_submit
        return 

subroutine contracts/abstracted_account.algo.ts::SpendContract.optin(payment: uint64, asset: uint64) -> void:
    block@0: // L145
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bytes[32] = (global CreatorAddress)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@1
    block@1: // or_contd_L147
        let tmp%3#0: bytes[32] = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "plugin_id")
        (assert maybe_exists%0#0) // check GlobalState exists
        let (value%0#0: bytes[32], check%0#0: bool) = ((app_params_get AppAddress) maybe_value%0#0)
        (assert check%0#0) // application exists
        let tmp%4#0: bool = (== tmp%3#0 value%0#0)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // bool_true_L147
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L147
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L147
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        (assert or_result%0#2)
        let tmp%5#0: bytes[32] = ((gtxns Receiver) payment#0)
        let tmp%6#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = ((gtxns Amount) payment#0)
        let tmp%9#0: uint64 = (global AssetOptInMinBalance)
        let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
        (assert tmp%10#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: bytes[32] = (global CurrentApplicationAddress)
        let inner_txn_params%0%%param_XferAsset_idx_0#0: uint64 = asset#0
        ((itxn_field XferAsset) inner_txn_params%0%%param_XferAsset_idx_0#0)
        ((itxn_field AssetAmount) 0u)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field TypeEnum) 4u)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L153
        itxn_submit
        return 

subroutine contracts/abstracted_account.algo.ts::SpendContract.deleteApplication() -> void:
    block@0: // L164
        return 