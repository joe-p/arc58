#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    // contracts/plugins/optin_plugin.algo.ts:3
    // export class OptInPlugin extends Contract {
    txn NumAppArgs
    bz main_after_if_else@8
    pushbytess 0xb8447b36 0xe118d7af // method "createApplication()void", method "optInToAsset(uint64,uint64,pay)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_optInToAsset_route@4

main_after_if_else@8:
    // contracts/plugins/optin_plugin.algo.ts:3
    // export class OptInPlugin extends Contract {
    intc_1 // 0
    return

main_optInToAsset_route@4:
    // contracts/plugins/optin_plugin.algo.ts:8
    // optInToAsset(sender: arc4.UintN64, asset: arc4.UintN64, mbrPayment: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/plugins/optin_plugin.algo.ts:3
    // export class OptInPlugin extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // contracts/plugins/optin_plugin.algo.ts:8
    // optInToAsset(sender: arc4.UintN64, asset: arc4.UintN64, mbrPayment: gtxn.PaymentTxn): void {
    callsub optInToAsset
    intc_0 // 1
    return

main_createApplication_route@3:
    // contracts/plugins/optin_plugin.algo.ts:5
    // @abimethod({ onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/plugins/optin_plugin.algo.ts::OptInPlugin.optInToAsset(sender: bytes, asset: bytes, mbrPayment: uint64) -> void:
optInToAsset:
    // contracts/plugins/optin_plugin.algo.ts:8
    // optInToAsset(sender: arc4.UintN64, asset: arc4.UintN64, mbrPayment: gtxn.PaymentTxn): void {
    proto 3 0
    // contracts/plugins/optin_plugin.algo.ts:9
    // const [controlledAccountBytes] = op.AppGlobal.getExBytes(Application(sender.native), Bytes('c'));
    frame_dig -3
    btoi
    dup
    pushbytes "c"
    app_global_get_ex
    pop
    swap
    // contracts/plugins/optin_plugin.algo.ts:17
    // assert(mbrPayment.amount >= Global.assetOptInMinBalance, 'asset mismatch');
    frame_dig -1
    gtxns Amount
    global AssetOptInMinBalance
    >=
    assert // asset mismatch
    // contracts/plugins/optin_plugin.algo.ts:19-28
    // itxn
    //   .assetTransfer({
    //     sender: controlledAccount,
    //     assetReceiver: controlledAccount,
    //     assetAmount: 0,
    //     xferAsset: Asset(asset.native),
    //     rekeyTo: Application(sender.native).address,
    //     fee: 0,
    //   })
    //   .submit();
    itxn_begin
    // contracts/plugins/optin_plugin.algo.ts:24
    // xferAsset: Asset(asset.native),
    frame_dig -2
    btoi
    // contracts/plugins/optin_plugin.algo.ts:25
    // rekeyTo: Application(sender.native).address,
    swap
    app_params_get AppAddress
    assert // application exists
    itxn_field RekeyTo
    itxn_field XferAsset
    // contracts/plugins/optin_plugin.algo.ts:23
    // assetAmount: 0,
    intc_1 // 0
    itxn_field AssetAmount
    dup
    itxn_field AssetReceiver
    itxn_field Sender
    // contracts/plugins/optin_plugin.algo.ts:19-27
    // itxn
    //   .assetTransfer({
    //     sender: controlledAccount,
    //     assetReceiver: controlledAccount,
    //     assetAmount: 0,
    //     xferAsset: Asset(asset.native),
    //     rekeyTo: Application(sender.native).address,
    //     fee: 0,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // contracts/plugins/optin_plugin.algo.ts:26
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/plugins/optin_plugin.algo.ts:19-28
    // itxn
    //   .assetTransfer({
    //     sender: controlledAccount,
    //     assetReceiver: controlledAccount,
    //     assetAmount: 0,
    //     xferAsset: Asset(asset.native),
    //     rekeyTo: Application(sender.native).address,
    //     fee: 0,
    //   })
    //   .submit();
    itxn_submit
    retsub
