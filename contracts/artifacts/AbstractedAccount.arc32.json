{
    "hints": {
        "createApplication(address,address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "arc58_changeAdmin(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_pluginChangeAdmin(uint64,address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_getAdmin()address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_verifyAuthAddr()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyTo(address,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_canCall(uint64,address,byte[4])bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyToPlugin(uint64,uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyToNamedPlugin(string,uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addPlugin(uint64,address,uint64,uint64,bool,(byte[4],uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removePlugin(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,(byte[4],uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removeNamedPlugin(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin",
                    "descr": "The admin of the abstracted account. This address can add plugins and initiate rekeys"
                },
                "controlledAddress": {
                    "type": "bytes",
                    "key": "controlled_address",
                    "descr": "The address this app controls"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AbstractedAccount",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "address",
                        "name": "controlledAddress",
                        "desc": "The address of the abstracted account. If zeroAddress, then the address of the contract account will be used"
                    },
                    {
                        "type": "address",
                        "name": "admin",
                        "desc": "The admin for this app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create an abstracted account application.\nThis is not part of ARC58 and implementation specific."
            },
            {
                "name": "arc58_changeAdmin",
                "args": [
                    {
                        "type": "address",
                        "name": "newAdmin",
                        "desc": "The new admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Attempt to change the admin for this app. Some implementations MAY not support this."
            },
            {
                "name": "arc58_pluginChangeAdmin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "plugin",
                        "desc": "The app calling the plugin"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address that triggered the plugin"
                    },
                    {
                        "type": "address",
                        "name": "newAdmin",
                        "desc": "The new admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Attempt to change the admin via plugin."
            },
            {
                "name": "arc58_getAdmin",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "address"
                },
                "desc": "Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin."
            },
            {
                "name": "arc58_verifyAuthAddr",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Verify the abstracted account is rekeyed to this app"
            },
            {
                "name": "arc58_rekeyTo",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    },
                    {
                        "type": "bool",
                        "name": "flash",
                        "desc": "Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA."
            },
            {
                "name": "arc58_canCall",
                "args": [
                    {
                        "type": "uint64",
                        "name": "plugin",
                        "desc": "the plugin to be rekeyed to"
                    },
                    {
                        "type": "address",
                        "name": "address",
                        "desc": "the address that triggered the plugin"
                    },
                    {
                        "type": "byte[4]",
                        "name": "method"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool",
                    "desc": "whether the plugin can be called via txn sender or globally"
                },
                "desc": "check whether the plugin can be used"
            },
            {
                "name": "arc58_rekeyToPlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "plugin",
                        "desc": "The app to rekey to"
                    },
                    {
                        "type": "uint64[]",
                        "name": "methodOffsets",
                        "desc": "The indices of the methods being used in the group\nif the plugin has method restrictions these indices are required to match\nthe methods used on each subsequent call to the plugin within the group"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Temporarily rekey to an approved plugin app address"
            },
            {
                "name": "arc58_rekeyToNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The name of the plugin to rekey to"
                    },
                    {
                        "type": "uint64[]",
                        "name": "methodOffsets",
                        "desc": "The indices of the methods being used in the group\nif the plugin has method restrictions these indices are required to match\nthe methods used on each subsequent call to the plugin within the group"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Temporarily rekey to a named plugin app address"
            },
            {
                "name": "arc58_addPlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app",
                        "desc": "The app to add"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address of that's allowed to call the app\nor the global zero address for all addresses"
                    },
                    {
                        "type": "uint64",
                        "name": "lastValidRound",
                        "desc": "The round when the permission expires"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldown",
                        "desc": "The number of rounds that must pass before the plugin can be called again"
                    },
                    {
                        "type": "bool",
                        "name": "adminPrivileges",
                        "desc": "Whether the plugin has permissions to change the admin account"
                    },
                    {
                        "type": "(byte[4],uint64)[]",
                        "name": "methods",
                        "desc": "The methods that are allowed to be called for the plugin by the address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add an app to the list of approved plugins"
            },
            {
                "name": "arc58_removePlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app",
                        "desc": "The app to remove"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address of that's allowed to call the app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove an app from the list of approved plugins"
            },
            {
                "name": "arc58_addNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The plugin name"
                    },
                    {
                        "type": "uint64",
                        "name": "app",
                        "desc": "The plugin app"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address of that's allowed to call the app\nor the global zero address for all addresses"
                    },
                    {
                        "type": "uint64",
                        "name": "lastValidRound",
                        "desc": "The round when the permission expires"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldown",
                        "desc": "The number of rounds that must pass before the plugin can be called again"
                    },
                    {
                        "type": "bool",
                        "name": "adminPrivileges",
                        "desc": "Whether the plugin has permissions to change the admin account"
                    },
                    {
                        "type": "(byte[4],uint64)[]",
                        "name": "methods",
                        "desc": "The methods that are allowed to be called for the plugin by the address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add a named plugin"
            },
            {
                "name": "arc58_removeNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The plugin name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove a named plugin"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}