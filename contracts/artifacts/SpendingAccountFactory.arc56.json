{
    "name": "SpendingAccountFactory",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "uint64",
                    "name": "plugin"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete",
            "args": [
                {
                    "type": "uint64",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "exists",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mustGet",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getList",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mustGetList",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "walletIDsByAccounts": {
                    "keyType": "byte[16]",
                    "valueType": "uint64",
                    "prefix": "YQ=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        985,
                        1175
                    ],
                    "errorMessage": "Account not found"
                },
                {
                    "pc": [
                        847,
                        969,
                        998,
                        1061,
                        1192
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1028,
                        1164
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        105,
                        129,
                        153,
                        178,
                        203,
                        234,
                        255
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        358,
                        820
                    ],
                    "errorMessage": "Only applications can create spending accounts"
                },
                {
                    "pc": [
                        775,
                        789,
                        825
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        397
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        302
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        110,
                        134,
                        158,
                        183,
                        208,
                        239,
                        260
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        348
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        855
                    ],
                    "errorMessage": "only the creator wallet can delete a spending account"
                },
                {
                    "pc": [
                        270
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAHAAEgENTeAcCaDNCGAyYEAWEABBUffHUCAAAxGyITQQD7NhoAgARHx51fgASKOeefgARMn7ZWgASJ55kkgARA5lJigAS1YcJWgASCtDX4TweOBwCYAIMAZABLADIAGgACIkMxGSISRDEYIhNENhoBiAP5KkxQsCNC/+cxGSISRDEYIhNENhoBiANbKkxQsCNC/88xGSISRDEYIhNENhoBiAMmFipMULAjQv+2MRkiEkQxGCITRDYaAYgC7BYqTFCwI0L/nTEZIhJEMRgiE0Q2GgGIAsSAAQAiTwJUKkxQsCNC/34xGSISRDEYIhNENhoBF4gCNSNC/2kxGSISRDEYIhNEMRYjCUk4ECMSRDYaAReIAEgWKkxQsCNC/0UxGSJMjgEAA0L/OTEYIhJEiAOUI0L/LooBAYv/FSJLAQ8iSwJPAk1MJUsBDyVPAk8CTYv/TwJPAlJJFSUSRImKAgEyDUkiE0QhBIECCyEFCCEGIgsIgdRhCIv+OAcyChJBAaaL/jgIiwESQQGcI0SxiwAWi/8WTIAEkXxItrIashqyGiKyOCKyNiKyNyKyNYECsjSABAqBAUOyQimyQoCwAgogAgABJgIJd2FsbGV0X2lkCXBsdWdpbl9pZDEbIhNBAIc2GgCABJF8SLaABGWpe8yABD6hGDKABCSHwyxPBI4EAEcAMwAUAAIiQzEZgQUSRDEYIhNEiADQI0L/7TEZIhJEMRgiE0QxFiMJSTgQIxJENhoBF4gAbSNC/84xGSISRDEYIhNENhoBiABCI0L/ujEZIhJEMRgiEkQ2GgEXNhoCF4gAHSNC/6FC/50xACIoZURyCEQSiTEAIillRHIIRBKJigIAKIv+ZymL/2eJigEAiP/YRLGL/7IgIrIII7IQIrIBs4mKAgCI/8FAAAaI/8ZBADEjRIv+OAcyChJBACGL/jgIMhASQQAXI0SxMgqL/7IRIrISshSBBLIQIrIBs4kiQv/mIkL/zDEAMgkSRImyQCmyQCKyGYEGshAisgGztwA9RwJyCESI/isoTFCLABa/sXIIRIGgjQayCLIHI7IQIrIBs4wAiSJC/mGKAQAyDUkiE0SL/3IIRIj9+UkoTFC9RQFBAFAoiwFQvkwXTESLABJBAEEjRCEEgQILIQUIIQYiCwiB1GEIsYv/gAQkh8MsshqBBbIZshiBBrIQIrIBsyiLAVC8SLEyDrIgsggjshAisgGziSJC/7yKAQGL/4j9kyhMUL1FAYmKAQGL/4j9hChMUL1FAUAAAiKJi/+I/XQoTFC+TBdMRImKAQGL/4j9YyhMUL1FAUSL/4j9VyhMUL5MF0xEiYoBASIrKVAii/8iWYsCDUEAb4v/VwIAiwIkCyRYSYwAiP0rKExQvUUBQQAwiwFXAgCLAIj9GChMUL5MF0xEFilMUClMUFBJFYEIChZXBgJMUIwBiwIjCIwCQv+siwFXAgApgAgAAAAAAAAAAFApTFBQSRWBCAoWVwYCTFCMAUL/0osBjACJigEBKylQIov/IlmLAQ1BAEaL/1cCAIsBSU4CJAskWEmI/KUoTFC9RQFEiwBXAgBMiPyVKExQvkwXTEQWKUxQKUxQUEkVgQgKFlcGAkxQjAAjCIwBQv+wiYk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}