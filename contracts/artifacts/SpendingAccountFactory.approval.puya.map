{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/akita/contracts/joe-arc58/contracts/spending_account_factory.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAuHG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvHH;;;AAuHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAfA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxGH;;;AAwGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjGH;;;AAiGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxFH;;;AAwFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlFH;;;AAkFG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAjCD;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjDF;;;AAAA;AAiDE;;;AAAA;;;;AA7CA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAJF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAIE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJF;;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJA;;;AAC6B;;AAAA;AAAgB;AAAhB;;AAAA;AAAgB;AAAhB;;AAAA;;AAAA;AAAA;AAAmB;AAAnB;;AAAA;AAAmB;AAAnB;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAOA;;;AACwB;;AAAhB;AACY;AAAX;AAAP;AAMK;;AAJmB;;AAInB;AADH;;AAAA;AAEG;;AALmB;AAKnB;AAFH;AAGE;;;AAHF;AAMF;;AAAA;;AAGqB;;AAHrB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQwB;AAEb;;AAAA;AAAQ;;AAAA;AAAA;AAFK;;;;;;;;;;;;AAjBA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;AAAA;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAiBA;;;AAAA;;;;AAGf;;;AAHe;AAMrB;;;AAEG;;AACuC;;AAAA;AAAxB;;;AAhC4C;AAAA;AAAA;AAkCjE;;AAAA;AAAA;AAEA;AAE8B;;AAAA;AAClB;;;;;;;;AAHZ;;;AAIS;;;AAJT;AAQA;;AAAA;;;;;AAGF;;;AACwB;;AAAhB;AACY;AAAX;AAAP;AACoC;;AAAA;;AAAA;AAAxB;;;AAAN;AAlD2D;AAAA;AAAA;AAoDjC;AAAA;;AAA9B;;;AApD+D;AAAA;;AAAA;AAqDtB;AAAA;AAAA;AAAA;AAAA;AAAzC;;AAAA;AADA;;;;AADF;AAUK;;AAJmB;;AAInB;AADH;;AAAA;AAEG;;AALmB;AAKnB;AAFH;AAGE;;;AAHF;AAMF;AAAgD;;AAAhD;;;;;;;;AAAA;;;;;;AAAA;;;;AAAyD;;;AAAzD;AAlEiE;AAAA;;AAAA;AAoEnC;;AAE9B;AAGoB;;;;;;AAHpB;;;AAIS;;;AAJT;;;;;;AAUF;;;AAEkC;;AAAA;;;AAlFiC;AAAA;AAAA;AAkFR;AAAA;;AAAzD;AAIF;;;AAEgC;;AAAA;;;AAxFmC;AAAA;AAAA;AAwFV;AAAA;;AAAnD;;;AACK;AAAP;AAE8B;;AAAA;;;AA3FiC;AAAA;AAAA;AA2FR;AAAA;AAAA;AAAA;AAAA;AAAzD;AAIF;;;AAEkC;;AAAA;;;AAjGiC;AAAA;AAAA;AAiGR;AAAA;;AAAzD;AACgC;;AAAA;;;AAlGiC;AAAA;AAAA;AAkGR;AAAA;AAAA;AAAA;AAAA;AAAzD;AAIF;;;;AAEe;AAAA;AAAA;AACQ;AAAiB;;AAAA;AAAA;AAAd;;AAAA;AAAxB;;;AACkB;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAV;AAAA;;AACuB;;;AA3GkC;AAAA;AAAA;AA2GT;AAAA;;AAAtD;;;AACE;;AAAA;;;AAA+C;;AAAA;;;AA5Gc;AAAA;AAAA;AA4GW;AAAA;AAAA;AAAA;AAAA;AAA9D;AAAA;AAAA;AAAA;AAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAH0C;;AAAA;AAAA;AAAA;;;;;AAK1C;;AAAA;;;AAAU;AAAA;;;;;;;;;;AAAA;AAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;AAGJ;;AAAA;;AAAA;AAIF;;;AAEe;AAAA;AAAA;AACQ;AAAiB;;AAAA;AAAA;AAAd;;AAAA;AAAxB;;;AACkB;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACgB;AAAA;;;AA1H+B;AAAA;AAAA;AA0HN;AAAA;;AAAzD;AACA;;AAAA;;;AAAA;AAA+C;;;AA3HgB;AAAA;AAAA;AA2HS;AAAA;AAAA;AAAA;AAAA;AAA9D;AAAA;AAAA;AAAA;AAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAH4C;AAAA;AAAA;;;;;AAK9C;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 16 28500 200000 50000"
    },
    "16": {
      "op": "bytecblock \"a\" 0x 0x151f7c75 0x0000"
    },
    "29": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "31": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "32": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "33": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "36": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "39": {
      "op": "pushbytes 0x47c79d5f // method \"create(pay,uint64)uint64\"",
      "defined_out": [
        "Method(create(pay,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(pay,uint64)uint64)"
      ]
    },
    "45": {
      "op": "pushbytes 0x8a39e79f // method \"delete(uint64)void\"",
      "defined_out": [
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)"
      ]
    },
    "51": {
      "op": "pushbytes 0x4c9fb656 // method \"exists(address)bool\"",
      "defined_out": [
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)"
      ]
    },
    "57": {
      "op": "pushbytes 0x89e79924 // method \"get(address)uint64\"",
      "defined_out": [
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)"
      ]
    },
    "63": {
      "op": "pushbytes 0x40e65262 // method \"mustGet(address)uint64\"",
      "defined_out": [
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)",
        "Method(mustGet(address)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)",
        "Method(mustGet(address)uint64)"
      ]
    },
    "69": {
      "op": "pushbytes 0xb561c256 // method \"getList(address[])uint64[]\"",
      "defined_out": [
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)",
        "Method(getList(address[])uint64[])",
        "Method(mustGet(address)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)",
        "Method(mustGet(address)uint64)",
        "Method(getList(address[])uint64[])"
      ]
    },
    "75": {
      "op": "pushbytes 0x82b435f8 // method \"mustGetList(address[])uint64[]\"",
      "defined_out": [
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)",
        "Method(getList(address[])uint64[])",
        "Method(mustGet(address)uint64)",
        "Method(mustGetList(address[])uint64[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)",
        "Method(mustGet(address)uint64)",
        "Method(getList(address[])uint64[])",
        "Method(mustGetList(address[])uint64[])"
      ]
    },
    "81": {
      "op": "uncover 7",
      "stack_out": [
        "Method(create(pay,uint64)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)uint64)",
        "Method(mustGet(address)uint64)",
        "Method(getList(address[])uint64[])",
        "Method(mustGetList(address[])uint64[])",
        "tmp%2#0"
      ]
    },
    "83": {
      "op": "match main_create_route@3 main_delete_route@4 main_exists_route@5 main_get_route@6 main_mustGet_route@7 main_getList_route@8 main_mustGetList_route@9",
      "stack_out": []
    },
    "99": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "100": {
      "block": "main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "101": {
      "block": "main_mustGetList_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "103": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "NoOp"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "105": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "0"
      ]
    },
    "109": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "110": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "111": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "114": {
      "callsub": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.mustGetList",
      "op": "callsub mustGetList",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "117": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%42#0"
      ]
    },
    "119": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "120": {
      "op": "log",
      "stack_out": []
    },
    "121": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "b main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17"
    },
    "125": {
      "block": "main_getList_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "127": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "NoOp"
      ]
    },
    "128": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "129": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "132": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0"
      ]
    },
    "133": {
      "op": "!=",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "134": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "135": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "138": {
      "callsub": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.getList",
      "op": "callsub getList",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "141": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0x151f7c75"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%35#0"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "144": {
      "op": "log",
      "stack_out": []
    },
    "145": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "146": {
      "op": "b main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17"
    },
    "149": {
      "block": "main_mustGet_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "151": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "NoOp"
      ]
    },
    "152": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "153": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "154": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "157": {
      "op": "!=",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "158": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "159": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "162": {
      "callsub": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.mustGet",
      "op": "callsub mustGet",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "165": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "166": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "167": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "168": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "169": {
      "op": "log",
      "stack_out": []
    },
    "170": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "b main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17"
    },
    "174": {
      "block": "main_get_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "176": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "NoOp"
      ]
    },
    "177": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "178": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "179": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "181": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "0"
      ]
    },
    "182": {
      "op": "!=",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "184": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "187": {
      "callsub": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.get",
      "op": "callsub get",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "190": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "191": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "193": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "194": {
      "op": "log",
      "stack_out": []
    },
    "195": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "196": {
      "op": "b main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17"
    },
    "199": {
      "block": "main_exists_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "201": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "NoOp"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "203": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "204": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "206": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "207": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "208": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "209": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "212": {
      "callsub": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.exists",
      "op": "callsub exists",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "215": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "218": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "219": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "221": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "222": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "223": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "224": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "225": {
      "op": "log",
      "stack_out": []
    },
    "226": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "227": {
      "op": "b main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17"
    },
    "230": {
      "block": "main_delete_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "232": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "NoOp"
      ]
    },
    "233": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "238": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "239": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "240": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "243": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "244": {
      "callsub": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.delete",
      "op": "callsub delete",
      "stack_out": []
    },
    "247": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "b main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17"
    },
    "251": {
      "block": "main_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "253": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "255": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "256": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "258": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "259": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "260": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "261": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "263": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "264": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "265": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "266": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "268": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "269": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "270": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "271": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "274": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ]
    },
    "275": {
      "callsub": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.create",
      "op": "callsub create",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "278": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "279": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "280": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "281": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "282": {
      "op": "log",
      "stack_out": []
    },
    "283": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "284": {
      "op": "b main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17"
    },
    "287": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "289": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "0"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%44#0"
      ]
    },
    "291": {
      "op": "match main___algots__.defaultCreate@13",
      "stack_out": []
    },
    "295": {
      "block": "main_switch_case_next@15",
      "stack_in": [],
      "op": "b main_after_if_else@16"
    },
    "298": {
      "block": "main___algots__.defaultCreate@13",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "300": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0"
      ]
    },
    "301": {
      "op": "==",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "302": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "303": {
      "callsub": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__algots__.defaultCreate",
      "op": "callsub __algots__.defaultCreate"
    },
    "306": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "307": {
      "op": "b main_after_inlined_contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__puya_arc4_router__@17"
    },
    "310": {
      "subroutine": "contracts/spending_account_factory.algo.ts::bytes16",
      "params": {
        "acc#0": "bytes"
      },
      "block": "bytes16",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "313": {
      "block": "bytes16_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0 (copy)"
      ],
      "stack_out": [
        "acc#0 (copy)"
      ]
    },
    "315": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "316": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0",
        "0"
      ]
    },
    "317": {
      "op": "dig 1",
      "defined_out": [
        "0",
        "length%0#0",
        "length%0#0 (copy)"
      ],
      "stack_out": [
        "length%0#0",
        "0",
        "length%0#0 (copy)"
      ]
    },
    "319": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "320": {
      "op": "intc_0 // 0",
      "stack_out": [
        "length%0#0",
        "is_out_of_bounds%0#0",
        "0"
      ]
    },
    "321": {
      "op": "dig 2",
      "stack_out": [
        "length%0#0",
        "is_out_of_bounds%0#0",
        "0",
        "length%0#0 (copy)"
      ]
    },
    "323": {
      "op": "uncover 2",
      "stack_out": [
        "length%0#0",
        "0",
        "length%0#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "325": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0",
        "bounded_index%0#0"
      ]
    },
    "326": {
      "op": "swap",
      "stack_out": [
        "bounded_index%0#0",
        "length%0#0"
      ]
    },
    "327": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "bounded_index%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "bounded_index%0#0",
        "length%0#0",
        "16"
      ]
    },
    "328": {
      "op": "dig 1",
      "stack_out": [
        "bounded_index%0#0",
        "length%0#0",
        "16",
        "length%0#0 (copy)"
      ]
    },
    "330": {
      "op": ">=",
      "defined_out": [
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "length%0#0"
      ],
      "stack_out": [
        "bounded_index%0#0",
        "length%0#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "331": {
      "op": "intc_3 // 16",
      "stack_out": [
        "bounded_index%0#0",
        "length%0#0",
        "is_out_of_bounds%1#0",
        "16"
      ]
    },
    "332": {
      "op": "uncover 2",
      "stack_out": [
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "16",
        "length%0#0"
      ]
    },
    "334": {
      "op": "uncover 2",
      "stack_out": [
        "bounded_index%0#0",
        "16",
        "length%0#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "336": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "bounded_index%1#0"
      ],
      "stack_out": [
        "bounded_index%0#0",
        "bounded_index%1#0"
      ]
    },
    "337": {
      "op": "frame_dig -1",
      "stack_out": [
        "bounded_index%0#0",
        "bounded_index%1#0",
        "acc#0 (copy)"
      ]
    },
    "339": {
      "op": "uncover 2",
      "stack_out": [
        "bounded_index%1#0",
        "acc#0 (copy)",
        "bounded_index%0#0"
      ]
    },
    "341": {
      "op": "uncover 2",
      "stack_out": [
        "acc#0 (copy)",
        "bounded_index%0#0",
        "bounded_index%1#0"
      ]
    },
    "343": {
      "op": "substring3",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "344": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "345": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%1#0"
      ]
    },
    "346": {
      "op": "intc_3 // 16",
      "stack_out": [
        "to_encode%0#0",
        "length%1#0",
        "16"
      ]
    },
    "347": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "348": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "349": {
      "retsub": true,
      "op": "retsub"
    },
    "350": {
      "subroutine": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.create",
      "params": {
        "payment#0": "uint64",
        "plugin#0": "uint64"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "353": {
      "block": "create_block@0",
      "stack_in": [],
      "op": "global CallerApplicationID",
      "defined_out": [
        "caller#0"
      ],
      "stack_out": [
        "caller#0"
      ]
    },
    "355": {
      "op": "dup",
      "defined_out": [
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "caller#0"
      ]
    },
    "356": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "caller#0",
        "0"
      ]
    },
    "357": {
      "op": "!=",
      "defined_out": [
        "caller#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%0#0"
      ]
    },
    "358": {
      "error": "Only applications can create spending accounts",
      "op": "assert // Only applications can create spending accounts",
      "stack_out": [
        "caller#0"
      ]
    },
    "359": {
      "op": "intc 4 // 28500",
      "defined_out": [
        "28500",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "28500"
      ]
    },
    "361": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "28500",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "28500",
        "2"
      ]
    },
    "363": {
      "op": "*",
      "defined_out": [
        "caller#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%1#0"
      ]
    },
    "364": {
      "op": "intc 5 // 200000",
      "defined_out": [
        "200000",
        "caller#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%1#0",
        "200000"
      ]
    },
    "366": {
      "op": "+",
      "defined_out": [
        "caller#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%2#0"
      ]
    },
    "367": {
      "op": "intc 6 // 50000",
      "defined_out": [
        "50000",
        "caller#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%2#0",
        "50000"
      ]
    },
    "369": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "tmp%2#0",
        "50000",
        "0"
      ]
    },
    "370": {
      "op": "*",
      "defined_out": [
        "caller#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "371": {
      "op": "+",
      "defined_out": [
        "caller#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%4#0"
      ]
    },
    "372": {
      "op": "pushint 12500 // 12500",
      "defined_out": [
        "12500",
        "caller#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%4#0",
        "12500"
      ]
    },
    "375": {
      "op": "+",
      "defined_out": [
        "caller#0",
        "childAppMBR#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "376": {
      "op": "frame_dig -2",
      "defined_out": [
        "caller#0",
        "childAppMBR#0",
        "payment#0 (copy)"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "payment#0 (copy)"
      ]
    },
    "378": {
      "op": "gtxns Receiver",
      "defined_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%5#0"
      ]
    },
    "380": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "382": {
      "op": "==",
      "defined_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%7#0"
      ]
    },
    "383": {
      "op": "bz create_bool_false@3",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "386": {
      "block": "create_and_contd@1",
      "stack_in": [
        "caller#0",
        "childAppMBR#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "payment#0 (copy)"
      ]
    },
    "388": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%8#0"
      ]
    },
    "390": {
      "op": "frame_dig 1",
      "defined_out": [
        "childAppMBR#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%8#0",
        "childAppMBR#0"
      ]
    },
    "392": {
      "op": "==",
      "defined_out": [
        "childAppMBR#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "tmp%9#0"
      ]
    },
    "393": {
      "op": "bz create_bool_false@3",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "396": {
      "block": "create_bool_true@2",
      "stack_in": [
        "caller#0",
        "childAppMBR#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "and_result%0#0"
      ]
    },
    "397": {
      "block": "create_bool_merge@4",
      "stack_in": [
        "caller#0",
        "childAppMBR#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "398": {
      "op": "itxn_begin"
    },
    "399": {
      "op": "frame_dig 0",
      "defined_out": [
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "caller#0"
      ]
    },
    "401": {
      "op": "itob",
      "defined_out": [
        "caller#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "val_as_bytes%0#0"
      ]
    },
    "402": {
      "op": "frame_dig -1",
      "defined_out": [
        "caller#0",
        "plugin#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "val_as_bytes%0#0",
        "plugin#0 (copy)"
      ]
    },
    "404": {
      "op": "itob",
      "defined_out": [
        "caller#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "405": {
      "op": "swap",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "406": {
      "op": "pushbytes 0x917c48b6 // method \"createApplication(uint64,uint64)void\"",
      "defined_out": [
        "Method(createApplication(uint64,uint64)void)",
        "caller#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(createApplication(uint64,uint64)void)"
      ]
    },
    "412": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "414": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "416": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "0"
      ]
    },
    "419": {
      "op": "itxn_field ExtraProgramPages",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "421": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "0"
      ]
    },
    "422": {
      "op": "itxn_field LocalNumUint",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "424": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "0"
      ]
    },
    "425": {
      "op": "itxn_field LocalNumByteSlice",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "427": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "0"
      ]
    },
    "428": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "430": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "2"
      ]
    },
    "432": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "434": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "CoEBQw=="
      ]
    },
    "440": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "442": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        ""
      ]
    },
    "443": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "445": {
      "op": "pushbytes base64(CiACAAEmAgl3YWxsZXRfaWQJcGx1Z2luX2lkMRsiE0EAhzYaAIAEkXxItoAEZal7zIAEPqEYMoAEJIfDLE8EjgQARwAzABQAAiJDMRmBBRJEMRgiE0SIANAjQv/tMRkiEkQxGCITRDEWIwlJOBAjEkQ2GgEXiABtI0L/zjEZIhJEMRgiE0Q2GgGIAEIjQv+6MRkiEkQxGCISRDYaARc2GgIXiAAdI0L/oUL/nTEAIihlRHIIRBKJMQAiKWVEcghEEomKAgAoi/5nKYv/Z4mKAQCI/9hEsYv/siAisggjshAisgGziYoCAIj/wUAABoj/xkEAMSNEi/44BzIKEkEAIYv+OAgyEBJBABcjRLEyCov/shEishKyFIEEshAisgGziSJC/+YiQv/MMQAyCRJEiQ==)",
      "defined_out": [
        "CiACAAEmAgl3YWxsZXRfaWQJcGx1Z2luX2lkMRsiE0EAhzYaAIAEkXxItoAEZal7zIAEPqEYMoAEJIfDLE8EjgQARwAzABQAAiJDMRmBBRJEMRgiE0SIANAjQv/tMRkiEkQxGCITRDEWIwlJOBAjEkQ2GgEXiABtI0L/zjEZIhJEMRgiE0Q2GgGIAEIjQv+6MRkiEkQxGCISRDYaARc2GgIXiAAdI0L/oUL/nTEAIihlRHIIRBKJMQAiKWVEcghEEomKAgAoi/5nKYv/Z4mKAQCI/9hEsYv/siAisggjshAisgGziYoCAIj/wUAABoj/xkEAMSNEi/44BzIKEkEAIYv+OAgyEBJBABcjRLEyCov/shEishKyFIEEshAisgGziSJC/+YiQv/MMQAyCRJEiQ==",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "CiACAAEmAgl3YWxsZXRfaWQJcGx1Z2luX2lkMRsiE0EAhzYaAIAEkXxItoAEZal7zIAEPqEYMoAEJIfDLE8EjgQARwAzABQAAiJDMRmBBRJEMRgiE0SIANAjQv/tMRkiEkQxGCITRDEWIwlJOBAjEkQ2GgEXiABtI0L/zjEZIhJEMRgiE0Q2GgGIAEIjQv+6MRkiEkQxGCISRDYaARc2GgIXiAAdI0L/oUL/nTEAIihlRHIIRBKJMQAiKWVEcghEEomKAgAoi/5nKYv/Z4mKAQCI/9hEsYv/siAisggjshAisgGziYoCAIj/wUAABoj/xkEAMSNEi/44BzIKEkEAIYv+OAgyEBJBABcjRLEyCov/shEishKyFIEEshAisgGziSJC/+YiQv/MMQAyCRJEiQ=="
      ]
    },
    "752": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "754": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        ""
      ]
    },
    "755": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "757": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "0"
      ]
    },
    "758": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "760": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "appl"
      ]
    },
    "762": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "764": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "0"
      ]
    },
    "765": {
      "op": "itxn_field Fee",
      "stack_out": [
        "caller#0",
        "childAppMBR#0"
      ]
    },
    "767": {
      "block": "create_next_txn@5",
      "stack_in": [
        "caller#0",
        "childAppMBR#0"
      ],
      "op": "itxn_submit"
    },
    "768": {
      "op": "gitxn 0 CreatedApplicationID",
      "defined_out": [
        "newSpendAccount#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "newSpendAccount#0"
      ]
    },
    "771": {
      "op": "dupn 2",
      "defined_out": [
        "id#0",
        "newSpendAccount#0",
        "newSpendAccount#0 (copy)"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "newSpendAccount#0 (copy)"
      ]
    },
    "773": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "id#0",
        "newSpendAccount#0",
        "value%0#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "775": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "value%0#0"
      ]
    },
    "776": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "id#0",
        "newSpendAccount#0",
        "spendAccount#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "spendAccount#0"
      ]
    },
    "779": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "id#0",
        "newSpendAccount#0",
        "spendAccount#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "spendAccount#0",
        "\"a\""
      ]
    },
    "780": {
      "op": "swap",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "\"a\"",
        "spendAccount#0"
      ]
    },
    "781": {
      "op": "concat",
      "defined_out": [
        "id#0",
        "newSpendAccount#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "tmp%10#0"
      ]
    },
    "782": {
      "op": "frame_dig 0",
      "defined_out": [
        "caller#0",
        "id#0",
        "newSpendAccount#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "tmp%10#0",
        "caller#0"
      ]
    },
    "784": {
      "op": "itob",
      "defined_out": [
        "caller#0",
        "id#0",
        "newSpendAccount#0",
        "new_box_value%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0",
        "tmp%10#0",
        "new_box_value%0#0"
      ]
    },
    "785": {
      "op": "box_put",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "newSpendAccount#0"
      ]
    },
    "786": {
      "op": "itxn_begin"
    },
    "787": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "caller#0",
        "check%1#0",
        "id#0",
        "value%1#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "789": {
      "error": "application exists",
      "op": "assert // application exists",
      "defined_out": [
        "caller#0",
        "id#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "790": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "caller#0",
        "id#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "100000"
      ]
    },
    "794": {
      "op": "itxn_field Amount",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "796": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0"
      ]
    },
    "798": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "caller#0",
        "id#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "1"
      ]
    },
    "799": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0"
      ]
    },
    "801": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0",
        "0"
      ]
    },
    "802": {
      "op": "itxn_field Fee",
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "id#0"
      ]
    },
    "804": {
      "block": "create_next_txn@6",
      "stack_in": [
        "caller#0",
        "childAppMBR#0",
        "id#0"
      ],
      "op": "itxn_submit",
      "defined_out": [
        "id#0"
      ]
    },
    "805": {
      "op": "frame_bury 0"
    },
    "807": {
      "retsub": true,
      "op": "retsub"
    },
    "808": {
      "block": "create_bool_false@3",
      "stack_in": [
        "caller#0",
        "childAppMBR#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "caller#0",
        "childAppMBR#0",
        "and_result%0#0"
      ]
    },
    "809": {
      "op": "b create_bool_merge@4"
    },
    "812": {
      "subroutine": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.delete",
      "params": {
        "id#0": "uint64"
      },
      "block": "delete",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "815": {
      "block": "delete_block@0",
      "stack_in": [],
      "op": "global CallerApplicationID",
      "defined_out": [
        "caller#0"
      ],
      "stack_out": [
        "caller#0"
      ]
    },
    "817": {
      "op": "dup",
      "defined_out": [
        "caller#0"
      ],
      "stack_out": [
        "caller#0",
        "caller#0"
      ]
    },
    "818": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "caller#0",
        "0"
      ]
    },
    "819": {
      "op": "!=",
      "defined_out": [
        "caller#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "caller#0",
        "tmp%0#0"
      ]
    },
    "820": {
      "error": "Only applications can create spending accounts",
      "op": "assert // Only applications can create spending accounts",
      "stack_out": [
        "caller#0"
      ]
    },
    "821": {
      "op": "frame_dig -1",
      "defined_out": [
        "caller#0",
        "id#0 (copy)"
      ],
      "stack_out": [
        "caller#0",
        "id#0 (copy)"
      ]
    },
    "823": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "caller#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "caller#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "825": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "caller#0",
        "value%0#0"
      ]
    },
    "826": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "caller#0",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0"
      ]
    },
    "829": {
      "op": "dup",
      "defined_out": [
        "caller#0",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "key#0"
      ]
    },
    "830": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "caller#0",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "key#0",
        "\"a\""
      ]
    },
    "831": {
      "op": "swap",
      "stack_out": [
        "caller#0",
        "key#0",
        "\"a\"",
        "key#0"
      ]
    },
    "832": {
      "op": "concat",
      "defined_out": [
        "caller#0",
        "key#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%1#0"
      ]
    },
    "833": {
      "op": "box_len",
      "defined_out": [
        "caller#0",
        "key#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "834": {
      "op": "bury 1",
      "stack_out": [
        "caller#0",
        "key#0",
        "maybe_exists%0#0"
      ]
    },
    "836": {
      "op": "bz delete_bool_false@3",
      "stack_out": [
        "caller#0",
        "key#0"
      ]
    },
    "839": {
      "block": "delete_and_contd@1",
      "stack_in": [
        "caller#0",
        "key#0"
      ],
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "\"a\""
      ]
    },
    "840": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "\"a\"",
        "key#0"
      ]
    },
    "842": {
      "op": "concat",
      "defined_out": [
        "key#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%2#0"
      ]
    },
    "843": {
      "op": "box_get",
      "defined_out": [
        "key#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "844": {
      "op": "swap",
      "stack_out": [
        "caller#0",
        "key#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "845": {
      "op": "btoi",
      "defined_out": [
        "key#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "846": {
      "op": "swap",
      "stack_out": [
        "caller#0",
        "key#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "847": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "caller#0",
        "key#0",
        "maybe_value_converted%0#0"
      ]
    },
    "848": {
      "op": "frame_dig 0",
      "defined_out": [
        "caller#0",
        "key#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "maybe_value_converted%0#0",
        "caller#0"
      ]
    },
    "850": {
      "op": "==",
      "defined_out": [
        "caller#0",
        "key#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%3#0"
      ]
    },
    "851": {
      "op": "bz delete_bool_false@3",
      "stack_out": [
        "caller#0",
        "key#0"
      ]
    },
    "854": {
      "block": "delete_bool_true@2",
      "stack_in": [
        "caller#0",
        "key#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "and_result%0#0"
      ]
    },
    "855": {
      "block": "delete_bool_merge@4",
      "stack_in": [
        "caller#0",
        "key#0",
        "and_result%0#0"
      ],
      "error": "only the creator wallet can delete a spending account",
      "op": "assert // only the creator wallet can delete a spending account",
      "defined_out": [],
      "stack_out": [
        "caller#0",
        "key#0"
      ]
    },
    "856": {
      "op": "intc 4 // 28500",
      "defined_out": [
        "28500"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "28500"
      ]
    },
    "858": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "28500"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "28500",
        "2"
      ]
    },
    "860": {
      "op": "*",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%4#0"
      ]
    },
    "861": {
      "op": "intc 5 // 200000",
      "defined_out": [
        "200000",
        "tmp%4#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%4#0",
        "200000"
      ]
    },
    "863": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%5#0"
      ]
    },
    "864": {
      "op": "intc 6 // 50000",
      "defined_out": [
        "50000",
        "tmp%5#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%5#0",
        "50000"
      ]
    },
    "866": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "50000",
        "tmp%5#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%5#0",
        "50000",
        "0"
      ]
    },
    "867": {
      "op": "*",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "868": {
      "op": "+",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%7#0"
      ]
    },
    "869": {
      "op": "pushint 12500 // 12500",
      "defined_out": [
        "12500",
        "tmp%7#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "tmp%7#0",
        "12500"
      ]
    },
    "872": {
      "op": "+",
      "defined_out": [
        "childAppMBR#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0"
      ]
    },
    "873": {
      "op": "itxn_begin"
    },
    "874": {
      "op": "frame_dig -1",
      "defined_out": [
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "876": {
      "op": "pushbytes 0x2487c32c // method \"deleteApplication()void\"",
      "defined_out": [
        "Method(deleteApplication()void)",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "Method(deleteApplication()void)"
      ]
    },
    "882": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "884": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "5"
      ]
    },
    "886": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "888": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0"
      ]
    },
    "890": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "childAppMBR#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "appl"
      ]
    },
    "892": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "0"
      ]
    },
    "895": {
      "op": "itxn_field Fee",
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0"
      ]
    },
    "897": {
      "block": "delete_next_txn@5",
      "stack_in": [
        "caller#0",
        "key#0",
        "childAppMBR#0"
      ],
      "op": "itxn_submit"
    },
    "898": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "\"a\""
      ]
    },
    "899": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "\"a\"",
        "key#0"
      ]
    },
    "901": {
      "op": "concat",
      "defined_out": [
        "key#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "tmp%8#0"
      ]
    },
    "902": {
      "op": "box_del",
      "defined_out": [
        "key#0",
        "{box_del}"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "{box_del}"
      ]
    },
    "903": {
      "op": "pop",
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0"
      ]
    },
    "904": {
      "op": "itxn_begin",
      "defined_out": [
        "childAppMBR#0",
        "key#0"
      ]
    },
    "905": {
      "op": "global CallerApplicationAddress",
      "defined_out": [
        "childAppMBR#0",
        "inner_txn_params%1%%param_RekeyTo_idx_0#0",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "childAppMBR#0",
        "inner_txn_params%1%%param_RekeyTo_idx_0#0"
      ]
    },
    "907": {
      "op": "itxn_field RekeyTo",
      "defined_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "909": {
      "op": "itxn_field Amount",
      "stack_out": [
        "caller#0",
        "key#0"
      ]
    },
    "911": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "1"
      ]
    },
    "912": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "caller#0",
        "key#0"
      ]
    },
    "914": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "key#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "0"
      ]
    },
    "915": {
      "op": "itxn_field Fee",
      "stack_out": [
        "caller#0",
        "key#0"
      ]
    },
    "917": {
      "block": "delete_next_txn@6",
      "stack_in": [
        "caller#0",
        "key#0"
      ],
      "op": "itxn_submit"
    },
    "918": {
      "retsub": true,
      "op": "retsub"
    },
    "919": {
      "block": "delete_bool_false@3",
      "stack_in": [
        "caller#0",
        "key#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "caller#0",
        "key#0",
        "and_result%0#0"
      ]
    },
    "920": {
      "op": "b delete_bool_merge@4"
    },
    "923": {
      "subroutine": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.exists",
      "params": {
        "address#0": "bytes"
      },
      "block": "exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "926": {
      "block": "exists_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "928": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "931": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"a\""
      ]
    },
    "932": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "tmp%0#0"
      ]
    },
    "933": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "934": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "935": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "937": {
      "retsub": true,
      "op": "retsub"
    },
    "938": {
      "subroutine": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.get",
      "params": {
        "address#0": "bytes"
      },
      "block": "get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "941": {
      "block": "get_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "943": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "946": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"a\""
      ]
    },
    "947": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "tmp%0#0"
      ]
    },
    "948": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "949": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "950": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "952": {
      "op": "bnz get_after_if_else@2",
      "stack_out": []
    },
    "955": {
      "block": "get_if_body@1",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "956": {
      "retsub": true,
      "op": "retsub"
    },
    "957": {
      "block": "get_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "959": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "962": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"a\""
      ]
    },
    "963": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "tmp%2#0"
      ]
    },
    "964": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "965": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "966": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "967": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "968": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "969": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "970": {
      "retsub": true,
      "op": "retsub"
    },
    "971": {
      "subroutine": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.mustGet",
      "params": {
        "address#0": "bytes"
      },
      "block": "mustGet",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "974": {
      "block": "mustGet_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "976": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "979": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"a\""
      ]
    },
    "980": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "tmp%0#0"
      ]
    },
    "981": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "982": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "983": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "985": {
      "error": "Account not found",
      "op": "assert // Account not found",
      "stack_out": []
    },
    "986": {
      "op": "frame_dig -1",
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "988": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "991": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "tmp%2#0",
        "\"a\""
      ]
    },
    "992": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "tmp%2#0"
      ]
    },
    "993": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "994": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "995": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "996": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "997": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "998": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "999": {
      "retsub": true,
      "op": "retsub"
    },
    "1000": {
      "subroutine": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.getList",
      "params": {
        "addresses#0": "bytes"
      },
      "block": "getList",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1003": {
      "op": "intc_0 // 0",
      "stack_out": [
        "address#0"
      ]
    },
    "1004": {
      "block": "getList_block@0",
      "stack_in": [
        "address#0"
      ],
      "op": "bytec_3 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "address#0",
        "0x0000"
      ]
    },
    "1005": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "0x0000"
      ],
      "stack_out": [
        "address#0",
        "0x0000",
        "0x"
      ]
    },
    "1006": {
      "op": "concat",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0"
      ]
    },
    "1007": {
      "op": "intc_0 // 0",
      "defined_out": [
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "1008": {
      "block": "getList_while_top@1",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "addresses#0 (copy)"
      ]
    },
    "1010": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "addresses#0 (copy)",
        "0"
      ]
    },
    "1011": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1012": {
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1014": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "1015": {
      "op": "bz getList_after_while@6",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "1018": {
      "block": "getList_while_body@2",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "addresses#0 (copy)"
      ]
    },
    "1020": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1023": {
      "op": "frame_dig 2",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0"
      ]
    },
    "1025": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0",
        "32"
      ]
    },
    "1026": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1027": {
      "op": "intc_2 // 32",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "1028": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "address#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "address#0"
      ]
    },
    "1029": {
      "op": "dup",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "address#0",
        "address#0"
      ]
    },
    "1030": {
      "op": "frame_bury 0",
      "defined_out": [
        "address#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "address#0"
      ]
    },
    "1032": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "address#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "1035": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "address#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%2#0",
        "\"a\""
      ]
    },
    "1036": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "\"a\"",
        "tmp%2#0"
      ]
    },
    "1037": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "1038": {
      "op": "box_len",
      "defined_out": [
        "address#0",
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1039": {
      "op": "bury 1",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_exists%0#0"
      ]
    },
    "1041": {
      "op": "bz getList_else_body@4",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "1044": {
      "block": "getList_if_body@3",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "1046": {
      "op": "extract 2 0",
      "defined_out": [
        "apps#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1049": {
      "op": "frame_dig 0",
      "defined_out": [
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "address#0"
      ]
    },
    "1051": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%4#0"
      ]
    },
    "1054": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%4#0",
        "\"a\""
      ]
    },
    "1055": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "\"a\"",
        "tmp%4#0"
      ]
    },
    "1056": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%5#0"
      ]
    },
    "1057": {
      "op": "box_get",
      "defined_out": [
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1058": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1059": {
      "op": "btoi",
      "defined_out": [
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1060": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1061": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1062": {
      "op": "itob",
      "defined_out": [
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1063": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "1064": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "1065": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "apps#0",
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "1066": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "1067": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "1068": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "apps#0",
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "1069": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "apps#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "1070": {
      "op": "dup",
      "defined_out": [
        "address#0",
        "apps#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1071": {
      "op": "len",
      "defined_out": [
        "address#0",
        "apps#0",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1072": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "address#0",
        "apps#0",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "1074": {
      "op": "/",
      "defined_out": [
        "address#0",
        "apps#0",
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1075": {
      "op": "itob",
      "defined_out": [
        "address#0",
        "apps#0",
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1076": {
      "op": "extract 6 2",
      "defined_out": [
        "address#0",
        "apps#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1079": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1080": {
      "op": "concat",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "1081": {
      "op": "frame_bury 1",
      "defined_out": [
        "address#0",
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "1083": {
      "block": "getList_after_if_else@5",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "i#0"
      ]
    },
    "1085": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1086": {
      "op": "+",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "i#0"
      ]
    },
    "1087": {
      "op": "frame_bury 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "1089": {
      "op": "b getList_while_top@1"
    },
    "1092": {
      "block": "getList_else_body@4",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "1094": {
      "op": "extract 2 0",
      "defined_out": [
        "apps#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "1097": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "apps#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%1#0",
        "0x"
      ]
    },
    "1098": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x",
        "0x0000000000000000",
        "apps#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%1#0",
        "0x",
        "0x0000000000000000"
      ]
    },
    "1108": {
      "op": "concat",
      "defined_out": [
        "apps#0",
        "array%encoded%1#1",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%1#0",
        "array%encoded%1#1"
      ]
    },
    "1109": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%1#0",
        "array%encoded%1#1",
        "0x"
      ]
    },
    "1110": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%1#0",
        "0x",
        "array%encoded%1#1"
      ]
    },
    "1111": {
      "op": "concat",
      "defined_out": [
        "apps#0",
        "encoded%1#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "expr_value_trimmed%1#0",
        "encoded%1#0"
      ]
    },
    "1112": {
      "op": "concat",
      "defined_out": [
        "apps#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%1#0"
      ]
    },
    "1113": {
      "op": "dup",
      "defined_out": [
        "apps#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "1114": {
      "op": "len",
      "defined_out": [
        "apps#0",
        "byte_len%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "1115": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "apps#0",
        "byte_len%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%1#0",
        "byte_len%1#0",
        "8"
      ]
    },
    "1117": {
      "op": "/",
      "defined_out": [
        "apps#0",
        "concatenated%1#0",
        "len_%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "1118": {
      "op": "itob",
      "defined_out": [
        "apps#0",
        "as_bytes%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "1119": {
      "op": "extract 6 2",
      "defined_out": [
        "apps#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "1122": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "1123": {
      "op": "concat",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "1124": {
      "op": "frame_bury 1",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "1126": {
      "op": "b getList_after_if_else@5"
    },
    "1129": {
      "block": "getList_after_while@6",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "1131": {
      "op": "frame_bury 0"
    },
    "1133": {
      "retsub": true,
      "op": "retsub"
    },
    "1134": {
      "subroutine": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.mustGetList",
      "params": {
        "addresses#0": "bytes"
      },
      "block": "mustGetList",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1137": {
      "block": "mustGetList_block@0",
      "stack_in": [],
      "op": "bytec_3 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "1138": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "0x0000"
      ],
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "1139": {
      "op": "concat",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "apps#0"
      ]
    },
    "1140": {
      "op": "intc_0 // 0",
      "defined_out": [
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0"
      ]
    },
    "1141": {
      "block": "mustGetList_while_top@1",
      "stack_in": [
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "addresses#0 (copy)"
      ]
    },
    "1143": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "addresses#0 (copy)",
        "0"
      ]
    },
    "1144": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1145": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1147": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "1148": {
      "op": "bz mustGetList_after_while@3",
      "stack_out": [
        "apps#0",
        "i#0"
      ]
    },
    "1151": {
      "block": "mustGetList_while_body@2",
      "stack_in": [
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "addresses#0 (copy)"
      ]
    },
    "1153": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1156": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0"
      ]
    },
    "1158": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "1159": {
      "op": "cover 2",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)"
      ]
    },
    "1161": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)",
        "32"
      ]
    },
    "1162": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1163": {
      "op": "intc_2 // 32",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "1164": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "address#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0"
      ]
    },
    "1165": {
      "op": "dup",
      "defined_out": [
        "address#0",
        "address#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "address#0 (copy)"
      ]
    },
    "1166": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "address#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "tmp%2#0"
      ]
    },
    "1169": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "address#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "tmp%2#0",
        "\"a\""
      ]
    },
    "1170": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "\"a\"",
        "tmp%2#0"
      ]
    },
    "1171": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "tmp%3#0"
      ]
    },
    "1172": {
      "op": "box_len",
      "defined_out": [
        "address#0",
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1173": {
      "op": "bury 1",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "maybe_exists%0#0"
      ]
    },
    "1175": {
      "error": "Account not found",
      "op": "assert // Account not found",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0"
      ]
    },
    "1176": {
      "op": "frame_dig 0",
      "defined_out": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "apps#0"
      ]
    },
    "1178": {
      "op": "extract 2 0",
      "defined_out": [
        "address#0",
        "apps#0",
        "expr_value_trimmed%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1181": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "address#0"
      ]
    },
    "1182": {
      "callsub": "contracts/spending_account_factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "apps#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%4#0"
      ]
    },
    "1185": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%4#0",
        "\"a\""
      ]
    },
    "1186": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "\"a\"",
        "tmp%4#0"
      ]
    },
    "1187": {
      "op": "concat",
      "defined_out": [
        "apps#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "tmp%5#0"
      ]
    },
    "1188": {
      "op": "box_get",
      "defined_out": [
        "apps#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1189": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1190": {
      "op": "btoi",
      "defined_out": [
        "apps#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1191": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1192": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1193": {
      "op": "itob",
      "defined_out": [
        "apps#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1194": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "apps#0",
        "expr_value_trimmed%0#0",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "1195": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "1196": {
      "op": "concat",
      "defined_out": [
        "apps#0",
        "array%encoded%0#1",
        "expr_value_trimmed%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "1197": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "1198": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "1199": {
      "op": "concat",
      "defined_out": [
        "apps#0",
        "encoded%0#0",
        "expr_value_trimmed%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "1200": {
      "op": "concat",
      "defined_out": [
        "apps#0",
        "concatenated%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "concatenated%0#0"
      ]
    },
    "1201": {
      "op": "dup",
      "defined_out": [
        "apps#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1202": {
      "op": "len",
      "defined_out": [
        "apps#0",
        "byte_len%0#0",
        "concatenated%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1203": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "apps#0",
        "byte_len%0#0",
        "concatenated%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "1205": {
      "op": "/",
      "defined_out": [
        "apps#0",
        "concatenated%0#0",
        "i#0",
        "len_%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1206": {
      "op": "itob",
      "defined_out": [
        "apps#0",
        "as_bytes%0#0",
        "concatenated%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1207": {
      "op": "extract 6 2",
      "defined_out": [
        "apps#0",
        "concatenated%0#0",
        "i#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1210": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1211": {
      "op": "concat",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "apps#0"
      ]
    },
    "1212": {
      "op": "frame_bury 0",
      "defined_out": [
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0"
      ]
    },
    "1214": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1215": {
      "op": "+",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0"
      ]
    },
    "1216": {
      "op": "frame_bury 1",
      "defined_out": [
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0"
      ]
    },
    "1218": {
      "op": "b mustGetList_while_top@1"
    },
    "1221": {
      "block": "mustGetList_after_while@3",
      "stack_in": [
        "apps#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "1222": {
      "subroutine": "contracts/spending_account_factory.algo.ts::SpendingAccountFactory.__algots__.defaultCreate",
      "params": {},
      "block": "__algots__.defaultCreate_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}