#pragma version 10

// This TEAL was generated by TEALScript v0.103.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// verifyRekeyToAbstractedAccount(): void
//
// Ensure that by the end of the group the abstracted account has control of itself
verifyRekeyToAbstractedAccount:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/abstracted_account.algo.ts:42
	// rekeyedBack = false
	int 0
	frame_bury 0 // rekeyedBack: bool

	// contracts/abstracted_account.algo.ts:44
	// for (let i = this.txn.groupIndex + 1; i < this.txnGroup.length; i += 1)
	txn GroupIndex
	int 1
	+
	frame_bury 1 // i: uint64

*for_0:
	// contracts/abstracted_account.algo.ts:44
	// i < this.txnGroup.length
	frame_dig 1 // i: uint64
	global GroupSize
	<
	bz *for_0_end

	// contracts/abstracted_account.algo.ts:45
	// txn = this.txnGroup[i]
	frame_dig 1 // i: uint64
	frame_bury 2 // txn: txn

	// *if0_condition
	// contracts/abstracted_account.algo.ts:48
	// txn.sender === this.app.address && txn.rekeyTo === this.app.address
	frame_dig 2 // txn: txn
	gtxns Sender
	global CurrentApplicationAddress
	==
	dup
	bz *skip_and0
	frame_dig 2 // txn: txn
	gtxns RekeyTo
	global CurrentApplicationAddress
	==
	&&

*skip_and0:
	bz *if0_end

	// *if0_consequent
	// contracts/abstracted_account.algo.ts:49
	// rekeyedBack = true
	int 1
	frame_bury 0 // rekeyedBack: bool
	b *for_0_end

*if0_end:
	// *if1_condition
	// contracts/abstracted_account.algo.ts:55
	// txn.typeEnum === TransactionType.ApplicationCall &&
	//         txn.applicationID === this.app &&
	//         txn.onCompletion === 0 && // OnCompletion.NoOp
	//         txn.numAppArgs === 1 &&
	//         txn.applicationArgs[0] === method('arc58_verifyAuthAddr()void')
	frame_dig 2 // txn: txn
	gtxns TypeEnum
	int appl
	==
	dup
	bz *skip_and1
	frame_dig 2 // txn: txn
	gtxns ApplicationID
	txna Applications 0
	==
	&&

*skip_and1:
	dup
	bz *skip_and2
	frame_dig 2 // txn: txn
	gtxns OnCompletion
	int 0
	==
	&&

*skip_and2:
	dup
	bz *skip_and3
	frame_dig 2 // txn: txn
	gtxns NumAppArgs
	int 1
	==
	&&

*skip_and3:
	dup
	bz *skip_and4
	frame_dig 2 // txn: txn
	gtxns ApplicationArgs 0
	method "arc58_verifyAuthAddr()void"
	==
	&&

*skip_and4:
	bz *if1_end

	// *if1_consequent
	// contracts/abstracted_account.algo.ts:61
	// rekeyedBack = true
	int 1
	frame_bury 0 // rekeyedBack: bool
	b *for_0_end

*if1_end:

*for_0_continue:
	// contracts/abstracted_account.algo.ts:44
	// i += 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/abstracted_account.algo.ts:66
	// assert(rekeyedBack)
	frame_dig 0 // rekeyedBack: bool
	assert
	retsub

// createApplication(address)void
*abi_route_createApplication:
	// admin: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (admin) for createApplication must be a address
	assert

	// execute createApplication(address)void
	callsub createApplication
	int 1
	return

// createApplication(admin: Address): void
//
// Create an abstracted account application.
// This is not part of ARC58 and implementation specific.
//
// @param admin The admin for this app
createApplication:
	proto 1 0

	// contracts/abstracted_account.algo.ts:76
	// verifyAppCallTxn(this.txn, {
	//       sender: admin,
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // admin: Address
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"admin"}
	assert

	// contracts/abstracted_account.algo.ts:80
	// this.admin.value = admin
	byte 0x61 // "a"
	frame_dig -1 // admin: Address
	app_global_put
	retsub

// arc58_changeAdmin(address)void
*abi_route_arc58_changeAdmin:
	// newAdmin: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (newAdmin) for arc58_changeAdmin must be a address
	assert

	// execute arc58_changeAdmin(address)void
	callsub arc58_changeAdmin
	int 1
	return

// arc58_changeAdmin(newAdmin: Address): void
//
// Attempt to change the admin for this app. Some implementations MAY not support this.
//
// @param newAdmin The new admin
arc58_changeAdmin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:89
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:90
	// this.admin.value = newAdmin
	byte 0x61 // "a"
	frame_dig -1 // newAdmin: Address
	app_global_put
	retsub

// arc58_pluginChangeAdmin(uint64,address,address)void
*abi_route_arc58_pluginChangeAdmin:
	// newAdmin: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 0 (newAdmin) for arc58_pluginChangeAdmin must be a address
	assert

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (allowedCaller) for arc58_pluginChangeAdmin must be a address
	assert

	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_pluginChangeAdmin(uint64,address,address)void
	callsub arc58_pluginChangeAdmin
	int 1
	return

// arc58_pluginChangeAdmin(plugin: AppID, allowedCaller: Address, newAdmin: Address): void
//
// Attempt to change the admin via plugin.
//
// @param plugin The app calling the plugin
// @param allowedCaller The address that triggered the plugin
// @param newAdmin The new admin
arc58_pluginChangeAdmin:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:102
	// verifyTxn(this.txn, { sender: plugin.address })
	// verify sender
	txn Sender
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"plugin.address"}
	assert

	// contracts/abstracted_account.algo.ts:103
	// assert(this.app.address.authAddr === plugin.address, 'This plugin is not in control of the account')
	global CurrentApplicationAddress
	acct_params_get AcctAuthAddr
	pop
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	==

	// This plugin is not in control of the account
	assert

	// contracts/abstracted_account.algo.ts:105
	// key: PluginsKey = { application: plugin, allowedCaller: allowedCaller }
	frame_dig -1 // plugin: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:106
	// assert(
	//       this.plugins(key).exists && this.plugins(key).value.adminPrivileges,
	//       'This plugin does not have admin privileges'
	//     )
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz *skip_and5
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	int 192
	getbit
	&&

*skip_and5:
	// This plugin does not have admin privileges
	assert

	// contracts/abstracted_account.algo.ts:111
	// this.admin.value = newAdmin
	byte 0x61 // "a"
	frame_dig -3 // newAdmin: Address
	app_global_put
	retsub

// arc58_getAdmin()address
*abi_route_arc58_getAdmin:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc58_getAdmin()address
	callsub arc58_getAdmin
	concat
	log
	int 1
	return

// arc58_getAdmin(): Address
//
// Get the admin of this app. This method SHOULD always be used rather than reading directly from state
// because different implementations may have different ways of determining the admin.
arc58_getAdmin:
	proto 0 1

	// contracts/abstracted_account.algo.ts:120
	// return this.admin.value;
	byte 0x61 // "a"
	app_global_get
	retsub

// arc58_verifyAuthAddr()void
*abi_route_arc58_verifyAuthAddr:
	// execute arc58_verifyAuthAddr()void
	callsub arc58_verifyAuthAddr
	int 1
	return

// arc58_verifyAuthAddr(): void
//
// Verify the abstracted account is rekeyed to this app
arc58_verifyAuthAddr:
	proto 0 0

	// contracts/abstracted_account.algo.ts:127
	// assert(this.app.address.authAddr === globals.zeroAddress)
	global CurrentApplicationAddress
	acct_params_get AcctAuthAddr
	pop
	global ZeroAddress
	==
	assert
	retsub

// arc58_rekeyTo(address,bool)void
*abi_route_arc58_rekeyTo:
	// flash: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==

	// argument 0 (flash) for arc58_rekeyTo must be a bool
	assert
	int 0
	getbit

	// addr: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (addr) for arc58_rekeyTo must be a address
	assert

	// execute arc58_rekeyTo(address,bool)void
	callsub arc58_rekeyTo
	int 1
	return

// arc58_rekeyTo(addr: Address, flash: boolean): void
//
// Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
//
// @param addr The address to rekey to
// @param flash Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
arc58_rekeyTo:
	proto 2 0

	// contracts/abstracted_account.algo.ts:137
	// verifyAppCallTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:139
	// sendPayment({
	//       receiver: addr,
	//       rekeyTo: addr,
	//       note: 'rekeying abstracted account',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:140
	// receiver: addr
	frame_dig -1 // addr: Address
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:141
	// rekeyTo: addr
	frame_dig -1 // addr: Address
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:142
	// note: 'rekeying abstracted account'
	byte 0x72656b6579696e672061627374726163746564206163636f756e74 // "rekeying abstracted account"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if2_condition
	// contracts/abstracted_account.algo.ts:145
	// flash
	frame_dig -2 // flash: boolean
	bz *if2_end

	// *if2_consequent
	// contracts/abstracted_account.algo.ts:145
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount

*if2_end:
	retsub

// pluginCallAllowed(app: AppID, caller: Address): boolean
pluginCallAllowed:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:149
	// key: PluginsKey = { application: app, allowedCaller: caller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // caller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:151
	// return (
	//       this.plugins(key).exists &&
	//       this.plugins(key).value.lastValidRound >= globals.round &&
	//       globals.round - this.plugins(key).value.lastCalled >= this.plugins(key).value.cooldown
	//     );
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz *skip_and6
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	global Round
	>=
	&&

*skip_and6:
	dup
	bz *skip_and7
	global Round
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	-
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	>=
	&&

*skip_and7:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc58_canCall(uint64,address)bool
*abi_route_arc58_canCall:
	// The ABI return prefix
	byte 0x151f7c75

	// address: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (address) for arc58_canCall must be a address
	assert

	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_canCall(uint64,address)bool
	callsub arc58_canCall
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc58_canCall(plugin: AppID, address: Address): boolean
//
// check whether the plugin can be used
//
// @param plugin the plugin to be rekeyed to
// @returns whether the plugin can be called via txn sender or globally
arc58_canCall:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:166
	// globalAllowed = this.pluginCallAllowed(plugin, Address.zeroAddress)
	global ZeroAddress
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed
	frame_bury 0 // globalAllowed: bool

	// *if3_condition
	// contracts/abstracted_account.algo.ts:167
	// globalAllowed
	frame_dig 0 // globalAllowed: bool
	bz *if3_end

	// *if3_consequent
	// contracts/abstracted_account.algo.ts:167
	// return true;
	int 1
	b *arc58_canCall*return

*if3_end:
	// contracts/abstracted_account.algo.ts:169
	// return this.pluginCallAllowed(plugin, address);
	frame_dig -2 // address: Address
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed

*arc58_canCall*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc58_rekeyToPlugin(uint64)void
*abi_route_arc58_rekeyToPlugin:
	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_rekeyToPlugin(uint64)void
	callsub arc58_rekeyToPlugin
	int 1
	return

// arc58_rekeyToPlugin(plugin: AppID): void
//
// Temporarily rekey to an approved plugin app address
//
// @param plugin The app to rekey to
arc58_rekeyToPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:178
	// globalAllowed = this.pluginCallAllowed(plugin, Address.zeroAddress)
	global ZeroAddress
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed
	frame_bury 0 // globalAllowed: bool

	// *if4_condition
	// contracts/abstracted_account.algo.ts:180
	// !globalAllowed
	frame_dig 0 // globalAllowed: bool
	!
	bz *if4_end

	// *if4_consequent
	// contracts/abstracted_account.algo.ts:181
	// assert(this.pluginCallAllowed(plugin, this.txn.sender), 'This sender is not allowed to trigger this plugin')
	txn Sender
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed

	// This sender is not allowed to trigger this plugin
	assert

*if4_end:
	// contracts/abstracted_account.algo.ts:183
	// sendPayment({
	//       receiver: this.app.address,
	//       rekeyTo: plugin.address,
	//       note: 'rekeying to plugin app',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:184
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:185
	// rekeyTo: plugin.address
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:186
	// note: 'rekeying to plugin app'
	byte 0x72656b6579696e6720746f20706c7567696e20617070 // "rekeying to plugin app"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/abstracted_account.algo.ts:189
	// this.plugins({
	//       application: plugin,
	//       allowedCaller: globalAllowed ? Address.zeroAddress : this.txn.sender,
	//     }).value.lastCalled = globals.round
	byte 0x70 // "p"
	frame_dig -1 // plugin: AppID
	itob
	frame_dig 0 // globalAllowed: bool
	bz *ternary1_false
	global ZeroAddress
	b *ternary1_end

*ternary1_false:
	txn Sender

*ternary1_end:
	concat
	concat
	box_get

	// box value does not exist: this.plugins({ application: plugin, allowedCaller: globalAllowed ? Address.zeroAddress : this.txn.sender, }).value
	assert
	store 255 // full array
	load 255 // full array
	int 16
	global Round
	itob
	byte 0x70 // "p"
	frame_dig -1 // plugin: AppID
	itob
	frame_dig 0 // globalAllowed: bool
	bz *ternary3_false
	global ZeroAddress
	b *ternary3_end

*ternary3_false:
	txn Sender

*ternary3_end:
	concat
	concat
	cover 2
	box_replace

	// contracts/abstracted_account.algo.ts:194
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount
	retsub

// arc58_rekeyToNamedPlugin(string)void
*abi_route_arc58_rekeyToNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_rekeyToNamedPlugin(string)void
	callsub arc58_rekeyToNamedPlugin
	int 1
	return

// arc58_rekeyToNamedPlugin(name: string): void
//
// Temporarily rekey to a named plugin app address
//
// @param name The name of the plugin to rekey to
arc58_rekeyToNamedPlugin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:203
	// this.arc58_rekeyToPlugin(this.namedPlugins(name).value.application)
	int 0
	int 8
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	cover 2
	box_extract
	btoi
	callsub arc58_rekeyToPlugin
	retsub

// arc58_addPlugin(uint64,address,uint64,uint64,bool)void
*abi_route_arc58_addPlugin:
	// adminPrivileges: bool
	txna ApplicationArgs 5
	dup
	len
	int 1
	==

	// argument 0 (adminPrivileges) for arc58_addPlugin must be a bool
	assert
	int 0
	getbit

	// cooldown: uint64
	txna ApplicationArgs 4
	btoi

	// lastValidRound: uint64
	txna ApplicationArgs 3
	btoi

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 3 (allowedCaller) for arc58_addPlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_addPlugin(uint64,address,uint64,uint64,bool)void
	callsub arc58_addPlugin
	int 1
	return

// arc58_addPlugin(app: AppID, allowedCaller: Address, lastValidRound: uint64, cooldown: uint64, adminPrivileges: boolean): void
//
// Add an app to the list of approved plugins
//
// @param app The app to add
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param lastValidRound The round when the permission expires
// @param cooldown  The number of rounds that must pass before the plugin can be called again
// @param adminPrivileges Whether the plugin has permissions to change the admin account
arc58_addPlugin:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:223
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:224
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:225
	// this.plugins(key).value = {
	//       lastValidRound: lastValidRound,
	//       cooldown: cooldown,
	//       lastCalled: 0,
	//       adminPrivileges: adminPrivileges,
	//     }
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	frame_dig -3 // lastValidRound: uint64
	itob
	frame_dig -4 // cooldown: uint64
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x00
	int 0
	frame_dig -5 // adminPrivileges: boolean
	setbit
	concat
	box_put
	retsub

// arc58_removePlugin(uint64,address)void
*abi_route_arc58_removePlugin:
	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (allowedCaller) for arc58_removePlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_removePlugin(uint64,address)void
	callsub arc58_removePlugin
	int 1
	return

// arc58_removePlugin(app: AppID, allowedCaller: Address): void
//
// Remove an app from the list of approved plugins
//
// @param app The app to remove
arc58_removePlugin:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:239
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:241
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:242
	// this.plugins(key).delete()
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_del
	retsub

// arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void
*abi_route_arc58_addNamedPlugin:
	// adminPrivileges: bool
	txna ApplicationArgs 6
	dup
	len
	int 1
	==

	// argument 0 (adminPrivileges) for arc58_addNamedPlugin must be a bool
	assert
	int 0
	getbit

	// cooldown: uint64
	txna ApplicationArgs 5
	btoi

	// lastValidRound: uint64
	txna ApplicationArgs 4
	btoi

	// allowedCaller: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 3 (allowedCaller) for arc58_addNamedPlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 2
	btoi

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void
	callsub arc58_addNamedPlugin
	int 1
	return

// arc58_addNamedPlugin(name: string, app: AppID, allowedCaller: Address, lastValidRound: uint64, cooldown: uint64, adminPrivileges: boolean): void
//
// Add a named plugin
//
// @param app The plugin app
// @param name The plugin name
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param lastValidRound The round when the permission expires
// @param cooldown  The number of rounds that must pass before the plugin can be called again
// @param adminPrivileges Whether the plugin has permissions to change the admin account
arc58_addNamedPlugin:
	proto 6 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/abstracted_account.algo.ts:264
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:265
	// assert(!this.namedPlugins(name).exists)
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/abstracted_account.algo.ts:267
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -2 // app: AppID
	itob
	frame_dig -3 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:268
	// this.namedPlugins(name).value = key
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	frame_dig 0 // key: PluginsKey
	box_put

	// contracts/abstracted_account.algo.ts:270
	// pluginInfo: PluginInfo = {
	//       lastValidRound: lastValidRound,
	//       cooldown: cooldown,
	//       lastCalled: 0,
	//       adminPrivileges: adminPrivileges,
	//     }
	frame_dig -4 // lastValidRound: uint64
	itob
	frame_dig -5 // cooldown: uint64
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x00
	int 0
	frame_dig -6 // adminPrivileges: boolean
	setbit
	concat
	frame_bury 1 // pluginInfo: PluginInfo

	// contracts/abstracted_account.algo.ts:277
	// this.plugins(key).value = pluginInfo
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	frame_dig 1 // pluginInfo: PluginInfo
	box_put
	retsub

// arc58_removeNamedPlugin(string)void
*abi_route_arc58_removeNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_removeNamedPlugin(string)void
	callsub arc58_removeNamedPlugin
	int 1
	return

// arc58_removeNamedPlugin(name: string): void
//
// Remove a named plugin
//
// @param name The plugin name
arc58_removeNamedPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:286
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:288
	// app = this.namedPlugins(name).value
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	frame_bury 0 // storage key//app

	// contracts/abstracted_account.algo.ts:289
	// this.namedPlugins(name).delete()
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	box_del

	// contracts/abstracted_account.algo.ts:290
	// this.plugins(app).delete()
	byte 0x70 // "p"
	frame_dig 0 // storage key//app
	box_get

	// box value does not exist: this.namedPlugins(name).value
	assert
	concat
	box_del
	retsub

*create_NoOp:
	method "createApplication(address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "arc58_changeAdmin(address)void"
	method "arc58_pluginChangeAdmin(uint64,address,address)void"
	method "arc58_getAdmin()address"
	method "arc58_verifyAuthAddr()void"
	method "arc58_rekeyTo(address,bool)void"
	method "arc58_canCall(uint64,address)bool"
	method "arc58_rekeyToPlugin(uint64)void"
	method "arc58_rekeyToNamedPlugin(string)void"
	method "arc58_addPlugin(uint64,address,uint64,uint64,bool)void"
	method "arc58_removePlugin(uint64,address)void"
	method "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void"
	method "arc58_removeNamedPlugin(string)void"
	txna ApplicationArgs 0
	match *abi_route_arc58_changeAdmin *abi_route_arc58_pluginChangeAdmin *abi_route_arc58_getAdmin *abi_route_arc58_verifyAuthAddr *abi_route_arc58_rekeyTo *abi_route_arc58_canCall *abi_route_arc58_rekeyToPlugin *abi_route_arc58_rekeyToNamedPlugin *abi_route_arc58_addPlugin *abi_route_arc58_removePlugin *abi_route_arc58_addNamedPlugin *abi_route_arc58_removeNamedPlugin

	// this contract does not implement the given ABI method for call NoOp
	err