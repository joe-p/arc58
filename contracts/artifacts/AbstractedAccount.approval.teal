#pragma version 11
intcblock 1 0 20 8 32 25 4 2 6 12 16
bytecblock 0x 0x70 0x61646d696e 0x636f6e74726f6c6c65645f61646472657373 0x6e 0x00 0x0000000000000000 0x0f885493 0x151f7c75 0x001b

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 8 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// assertPluginCallAllowed(app: AppID, caller: Address): void
assertPluginCallAllowed:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/abstracted_account.algo.ts:53
	// key: PluginsKey = { application: app, allowedCaller: caller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // caller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:55
	// assert(this.plugins(key).exists, 'plugin does not exist')
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop

	// plugin does not exist
	assert

	// contracts/abstracted_account.algo.ts:56
	// assert(this.plugins(key).value.lastValidRound >= globals.round, 'plugin is expired')
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	global Round
	>=

	// plugin is expired
	assert

	// contracts/abstracted_account.algo.ts:57
	// assert(
	//       (globals.round - this.plugins(key).value.lastCalled) >= this.plugins(key).value.cooldown,
	//       'plugin is on cooldown'
	//     )
	global Round
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	-
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	>=

	// plugin is on cooldown
	assert
	retsub

// pluginCallAllowed(app: AppID, caller: Address): boolean
pluginCallAllowed:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/abstracted_account.algo.ts:64
	// key: PluginsKey = { application: app, allowedCaller: caller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // caller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:66
	// return (
	//       this.plugins(key).exists &&
	//       this.plugins(key).value.lastValidRound >= globals.round &&
	//       globals.round - this.plugins(key).value.lastCalled >= this.plugins(key).value.cooldown
	//     );
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz *skip_and0
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	global Round
	>=
	&&

*skip_and0:
	dup
	bz *skip_and1
	global Round
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	-
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	>=
	&&

*skip_and1:
	// set the subroutine return value
	frame_bury 0
	retsub

// txnRekeysBack(txn: Txn): boolean
txnRekeysBack:
	proto 1 1

	// *if0_condition
	// contracts/abstracted_account.algo.ts:74
	// txn.sender === this.app.address && txn.rekeyTo === this.app.address
	frame_dig -1 // txn: Txn
	gtxns Sender
	global CurrentApplicationAddress
	==
	dup
	bz *skip_and2
	frame_dig -1 // txn: Txn
	gtxns RekeyTo
	global CurrentApplicationAddress
	==
	&&

*skip_and2:
	bz *if0_end

	// *if0_consequent
	// contracts/abstracted_account.algo.ts:75
	// return true;
	intc 0 // 1
	retsub

*if0_end:
	// contracts/abstracted_account.algo.ts:78
	// return (
	//       txn.typeEnum === TransactionType.ApplicationCall &&
	//       txn.applicationID === this.app &&
	//       txn.numAppArgs === 1 &&
	//       txn.onCompletion === 0 &&
	//       txn.applicationArgs[0] === method('arc58_verifyAuthAddr()void')
	//     )
	frame_dig -1 // txn: Txn
	gtxns TypeEnum
	intc 8 //  appl
	==
	dup
	bz *skip_and3
	frame_dig -1 // txn: Txn
	gtxns ApplicationID
	txna Applications 0
	==
	&&

*skip_and3:
	dup
	bz *skip_and4
	frame_dig -1 // txn: Txn
	gtxns NumAppArgs
	intc 0 // 1
	==
	&&

*skip_and4:
	dup
	bz *skip_and5
	frame_dig -1 // txn: Txn
	gtxns OnCompletion
	intc 1 // 0
	==
	&&

*skip_and5:
	dup
	bz *skip_and6
	frame_dig -1 // txn: Txn
	gtxns ApplicationArgs 0
	bytec 7 //  method "arc58_verifyAuthAddr()void"
	==
	&&

*skip_and6:
	retsub

// assertRekeysBack(): void
assertRekeysBack:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/abstracted_account.algo.ts:88
	// rekeysBack = false
	intc 1 // 0
	frame_bury 0 // rekeysBack: bool

	// contracts/abstracted_account.algo.ts:89
	// for (let i = (this.txn.groupIndex + 1); i < this.txnGroup.length; i += 1)
	txn GroupIndex
	intc 0 // 1
	+
	frame_bury 1 // i: uint64

*for_0:
	// contracts/abstracted_account.algo.ts:89
	// i < this.txnGroup.length
	frame_dig 1 // i: uint64
	global GroupSize
	<
	bz *for_0_end

	// contracts/abstracted_account.algo.ts:90
	// txn = this.txnGroup[i]
	frame_dig 1 // i: uint64
	frame_bury 2 // txn: txn

	// *if1_condition
	// contracts/abstracted_account.algo.ts:92
	// this.txnRekeysBack(txn)
	frame_dig 2 // txn: txn
	callsub txnRekeysBack
	bz *if1_end

	// *if1_consequent
	// contracts/abstracted_account.algo.ts:93
	// rekeysBack = true
	intc 0 // 1
	frame_bury 0 // rekeysBack: bool

*if1_end:

*for_0_continue:
	// contracts/abstracted_account.algo.ts:89
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/abstracted_account.algo.ts:97
	// assert(rekeysBack, 'rekey back not found')
	frame_dig 0 // rekeysBack: bool

	// rekey back not found
	assert
	retsub

// assertValidGroup(app: AppID, methodOffsets: uint64[], globallyAllowed: boolean, locallyAllowed: boolean): void
//
// Guarantee that our txn group is valid in a single loop over all txns in the group
//
// @param app the plugin app id being validated
// @param methodOffsets the indices of the methods being used in the group
// @param globallyAllowed whether to check the global caller for method restrictions
// @param locallyAllowed whether to check the local caller for method restrictions
assertValidGroup:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 15

	// contracts/abstracted_account.algo.ts:109
	// gkey: PluginsKey = { application: app, allowedCaller: Address.zeroAddress }
	frame_dig -1 // app: AppID
	itob
	global ZeroAddress
	concat
	frame_bury 0 // gkey: PluginsKey

	// contracts/abstracted_account.algo.ts:110
	// key: PluginsKey = { application: app, allowedCaller: this.txn.sender }
	frame_dig -1 // app: AppID
	itob
	txn Sender
	concat
	frame_bury 1 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:112
	// hasGlobalMethodRestrictions = globallyAllowed && this.plugins(gkey).value.methods.length > 0
	frame_dig -3 // globallyAllowed: boolean
	dup
	bz *skip_and7
	bytec 1 //  "p"
	frame_dig 0 // gkey: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(gkey).value
	assert
	store 255 // full array
	intc 5 // 25
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 2 //  get type length
	* // multiply by type length
	intc 7 // 2
	+ // add two for length
	extract3
	extract 2 0
	len
	intc 2 // 20
	/
	intc 1 // 0
	>
	&&

*skip_and7:
	frame_bury 2 // hasGlobalMethodRestrictions: bool

	// contracts/abstracted_account.algo.ts:113
	// hasGlobalPluginCooldown = globallyAllowed && this.plugins(gkey).value.cooldown > 0
	frame_dig -3 // globallyAllowed: boolean
	dup
	bz *skip_and8
	bytec 1 //  "p"
	frame_dig 0 // gkey: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(gkey).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	intc 1 // 0
	>
	&&

*skip_and8:
	frame_bury 3 // hasGlobalPluginCooldown: bool

	// contracts/abstracted_account.algo.ts:114
	// hasLocalMethodRestrictions = locallyAllowed && this.plugins(key).value.methods.length > 0
	frame_dig -4 // locallyAllowed: boolean
	dup
	bz *skip_and9
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	intc 5 // 25
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 2 //  get type length
	* // multiply by type length
	intc 7 // 2
	+ // add two for length
	extract3
	extract 2 0
	len
	intc 2 // 20
	/
	intc 1 // 0
	>
	&&

*skip_and9:
	frame_bury 4 // hasLocalMethodRestrictions: bool

	// contracts/abstracted_account.algo.ts:115
	// hasLocalPluginCooldown = locallyAllowed && this.plugins(key).value.cooldown > 0
	frame_dig -4 // locallyAllowed: boolean
	dup
	bz *skip_and10
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	intc 1 // 0
	>
	&&

*skip_and10:
	frame_bury 5 // hasLocalPluginCooldown: bool

	// contracts/abstracted_account.algo.ts:117
	// rekeysBack = false
	intc 1 // 0
	frame_bury 6 // rekeysBack: bool

	// contracts/abstracted_account.algo.ts:118
	// methodIndex = 0
	intc 1 // 0
	frame_bury 7 // methodIndex: uint64

	// contracts/abstracted_account.algo.ts:120
	// for (let i = (this.txn.groupIndex + 1); i < this.txnGroup.length; i += 1)
	txn GroupIndex
	intc 0 // 1
	+
	frame_bury 8 // i: uint64

*for_1:
	// contracts/abstracted_account.algo.ts:120
	// i < this.txnGroup.length
	frame_dig 8 // i: uint64
	global GroupSize
	<
	bz *for_1_end

	// contracts/abstracted_account.algo.ts:121
	// txn = this.txnGroup[i]
	frame_dig 8 // i: uint64
	frame_bury 9 // txn: txn

	// *if2_condition
	// contracts/abstracted_account.algo.ts:123
	// this.txnRekeysBack(txn)
	frame_dig 9 // txn: txn
	callsub txnRekeysBack
	bz *if2_end

	// *if2_consequent
	// contracts/abstracted_account.algo.ts:124
	// rekeysBack = true
	intc 0 // 1
	frame_bury 6 // rekeysBack: bool
	b *for_1_end

*if2_end:
	// *if3_condition
	// contracts/abstracted_account.algo.ts:128
	// txn.typeEnum !== TransactionType.ApplicationCall
	frame_dig 9 // txn: txn
	gtxns TypeEnum
	intc 8 //  appl
	!=
	bz *if3_end

	// *if3_consequent
	b *for_1_continue

*if3_end:
	// contracts/abstracted_account.algo.ts:134
	// assert(txn.applicationID === app, 'wrong app id')
	frame_dig 9 // txn: txn
	gtxns ApplicationID
	frame_dig -1 // app: AppID
	==

	// wrong app id
	assert

	// contracts/abstracted_account.algo.ts:135
	// assert(txn.onCompletion === 0, 'invalid onComplete')
	frame_dig 9 // txn: txn
	gtxns OnCompletion
	intc 1 // 0
	==

	// invalid onComplete
	assert

	// contracts/abstracted_account.algo.ts:136
	// assert(txn.numAppArgs > 1, 'no app id provided')
	frame_dig 9 // txn: txn
	gtxns NumAppArgs
	intc 0 // 1
	>

	// no app id provided
	assert

	// contracts/abstracted_account.algo.ts:137
	// assert(btoi(txn.applicationArgs[1]) === this.app.id, 'wrong app id')
	frame_dig 9 // txn: txn
	gtxns ApplicationArgs 1
	btoi
	txna Applications 0
	==

	// wrong app id
	assert

	// contracts/abstracted_account.algo.ts:139
	// globalOnCooldown = hasGlobalPluginCooldown
	//         && (globals.round - this.plugins(gkey).value.lastCalled) < this.plugins(gkey).value.cooldown
	frame_dig 3 // hasGlobalPluginCooldown: bool
	dup
	bz *skip_and11
	global Round
	bytec 1 //  "p"
	frame_dig 0 // gkey: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(gkey).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	-
	bytec 1 //  "p"
	frame_dig 0 // gkey: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(gkey).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	<
	&&

*skip_and11:
	frame_bury 10 // globalOnCooldown: bool

	// contracts/abstracted_account.algo.ts:142
	// validGlobalMethod = globallyAllowed
	//         && methodIndex < methodOffsets.length
	//         && this.methodCallAllowed(txn, app, Address.zeroAddress, methodOffsets[methodIndex])
	frame_dig -3 // globallyAllowed: boolean
	dup
	bz *skip_and12
	frame_dig 7 // methodIndex: uint64
	frame_dig -2 // methodOffsets: uint64[]
	len
	intc 3 // 8
	/
	<
	&&

*skip_and12:
	dup
	bz *skip_and13
	frame_dig -2 // methodOffsets: uint64[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 7 // methodIndex: uint64
	intc 3 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 3 // 8
	extract3
	btoi
	global ZeroAddress
	frame_dig -1 // app: AppID
	frame_dig 9 // txn: txn
	callsub methodCallAllowed
	&&

*skip_and13:
	frame_bury 11 // validGlobalMethod: bool

	// contracts/abstracted_account.algo.ts:146
	// globalValid = (
	//         globallyAllowed
	//         && !globalOnCooldown
	//         && (!hasGlobalMethodRestrictions || validGlobalMethod)
	//       )
	frame_dig -3 // globallyAllowed: boolean
	dup
	bz *skip_and14
	frame_dig 10 // globalOnCooldown: bool
	!
	&&

*skip_and14:
	dup
	bz *skip_and15
	frame_dig 2 // hasGlobalMethodRestrictions: bool
	!
	dup
	bnz *skip_or0
	frame_dig 11 // validGlobalMethod: bool
	||

*skip_or0:
	&&

*skip_and15:
	frame_bury 12 // globalValid: bool

	// contracts/abstracted_account.algo.ts:152
	// localOnCooldown = hasLocalPluginCooldown
	//         && (globals.round - this.plugins(key).value.lastCalled) < this.plugins(key).value.cooldown
	frame_dig 5 // hasLocalPluginCooldown: bool
	dup
	bz *skip_and16
	global Round
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	-
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	<
	&&

*skip_and16:
	frame_bury 13 // localOnCooldown: bool

	// contracts/abstracted_account.algo.ts:155
	// validLocalMethod = locallyAllowed
	//         && methodIndex < methodOffsets.length
	//         && this.methodCallAllowed(txn, app, this.txn.sender, methodOffsets[methodIndex])
	frame_dig -4 // locallyAllowed: boolean
	dup
	bz *skip_and17
	frame_dig 7 // methodIndex: uint64
	frame_dig -2 // methodOffsets: uint64[]
	len
	intc 3 // 8
	/
	<
	&&

*skip_and17:
	dup
	bz *skip_and18
	frame_dig -2 // methodOffsets: uint64[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 7 // methodIndex: uint64
	intc 3 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 3 // 8
	extract3
	btoi
	txn Sender
	frame_dig -1 // app: AppID
	frame_dig 9 // txn: txn
	callsub methodCallAllowed
	&&

*skip_and18:
	frame_bury 14 // validLocalMethod: bool

	// contracts/abstracted_account.algo.ts:159
	// localValid = (
	//         locallyAllowed
	//         && !localOnCooldown
	//         && (!hasLocalMethodRestrictions || validLocalMethod)
	//       )
	frame_dig -4 // locallyAllowed: boolean
	dup
	bz *skip_and19
	frame_dig 13 // localOnCooldown: bool
	!
	&&

*skip_and19:
	dup
	bz *skip_and20
	frame_dig 4 // hasLocalMethodRestrictions: bool
	!
	dup
	bnz *skip_or1
	frame_dig 14 // validLocalMethod: bool
	||

*skip_or1:
	&&

*skip_and20:
	frame_bury 15 // localValid: bool

	// contracts/abstracted_account.algo.ts:165
	// assert(globalValid || localValid, 'method not allowed')
	frame_dig 12 // globalValid: bool
	dup
	bnz *skip_or2
	frame_dig 15 // localValid: bool
	||

*skip_or2:
	// method not allowed
	assert

	// *if4_condition
	// contracts/abstracted_account.algo.ts:171
	// globalValid && hasGlobalPluginCooldown
	frame_dig 12 // globalValid: bool
	dup
	bz *skip_and21
	frame_dig 3 // hasGlobalPluginCooldown: bool
	&&

*skip_and21:
	bz *if4_elseif1_condition

	// *if4_consequent
	// contracts/abstracted_account.algo.ts:172
	// this.plugins(gkey).value.lastCalled = globals.round
	bytec 1 //  "p"
	frame_dig 0 // gkey: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(gkey).value
	assert
	store 255 // full array
	load 255 // full array
	intc 10 // 16
	global Round
	itob
	replace3
	bytec 1 //  "p"
	frame_dig 0 // gkey: PluginsKey
	concat
	dup
	box_del
	pop
	swap
	box_put
	b *if4_end

*if4_elseif1_condition:
	// contracts/abstracted_account.algo.ts:173
	// localValid && hasLocalPluginCooldown
	frame_dig 15 // localValid: bool
	dup
	bz *skip_and22
	frame_dig 5 // hasLocalPluginCooldown: bool
	&&

*skip_and22:
	bz *if4_end

	// *if4_elseif1_consequent
	// contracts/abstracted_account.algo.ts:174
	// this.plugins(key).value.lastCalled = globals.round
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	intc 10 // 16
	global Round
	itob
	replace3
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	dup
	box_del
	pop
	swap
	box_put

*if4_end:
	// contracts/abstracted_account.algo.ts:177
	// methodIndex += 1
	frame_dig 7 // methodIndex: uint64
	intc 0 // 1
	+
	frame_bury 7 // methodIndex: uint64

*for_1_continue:
	// contracts/abstracted_account.algo.ts:120
	// i += 1
	frame_dig 8 // i: uint64
	intc 0 // 1
	+
	frame_bury 8 // i: uint64
	b *for_1

*for_1_end:
	// contracts/abstracted_account.algo.ts:180
	// assert(rekeysBack, 'no rekey back found')
	frame_dig 6 // rekeysBack: bool

	// no rekey back found
	assert
	retsub

// methodCallAllowed(txn: Txn, app: AppID, caller: Address, offset: uint64): boolean
//
// Checks if the method call is allowed
//
// @param txn the transaction being validated
// @param app the plugin app id being validated
// @param caller the address that triggered the plugin or global address
// @param offset the index of the method being used
// @returns whether the method call is allowed
methodCallAllowed:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/abstracted_account.algo.ts:194
	// assert(len(txn.applicationArgs[0]) === 4, 'invalid method signature length')
	frame_dig -1 // txn: Txn
	gtxns ApplicationArgs 0
	len
	intc 6 // 4
	==

	// invalid method signature length
	assert

	// contracts/abstracted_account.algo.ts:195
	// selectorArg = castBytes<bytes<4>>(txn.applicationArgs[0])
	frame_dig -1 // txn: Txn
	gtxns ApplicationArgs 0
	frame_bury 0 // selectorArg: byte[4]

	// contracts/abstracted_account.algo.ts:197
	// key: PluginsKey = { application: app, allowedCaller: caller }
	frame_dig -2 // app: AppID
	itob
	frame_dig -3 // caller: Address
	concat
	frame_bury 1 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:199
	// methods = this.plugins(key).value.methods
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	frame_bury 2 // storage key//methods
	frame_dig -4 // offset: uint64
	frame_bury 3 // accessor: accessor//0//allowedMethod

	// contracts/abstracted_account.algo.ts:202
	// hasCooldown = allowedMethod.cooldown > 0
	frame_dig 2 // storage key//methods
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	intc 5 // 25
	extract_uint16
	frame_dig 3 // saved accessor: accessor//0//allowedMethod
	intc 2 // 20
	* // acc * typeLength
	+
	intc 6 //  headOffset
	+
	load 255 // full array
	swap
	intc 3 // 8
	extract3
	btoi
	intc 1 // 0
	>
	frame_bury 4 // hasCooldown: bool

	// contracts/abstracted_account.algo.ts:203
	// onCooldown = (globals.round - allowedMethod.lastCalled) < allowedMethod.cooldown
	global Round
	frame_dig 2 // storage key//methods
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	intc 5 // 25
	extract_uint16
	frame_dig 3 // saved accessor: accessor//0//allowedMethod
	intc 2 // 20
	* // acc * typeLength
	+
	intc 9 //  headOffset
	+
	load 255 // full array
	swap
	intc 3 // 8
	extract3
	btoi
	-
	frame_dig 2 // storage key//methods
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	intc 5 // 25
	extract_uint16
	frame_dig 3 // saved accessor: accessor//0//allowedMethod
	intc 2 // 20
	* // acc * typeLength
	+
	intc 6 //  headOffset
	+
	load 255 // full array
	swap
	intc 3 // 8
	extract3
	btoi
	<
	frame_bury 5 // onCooldown: bool

	// contracts/abstracted_account.algo.ts:205
	// log(allowedMethod.selector)
	frame_dig 2 // storage key//methods
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	intc 5 // 25
	extract_uint16
	frame_dig 3 // saved accessor: accessor//0//allowedMethod
	intc 2 // 20
	* // acc * typeLength
	+
	intc 1 //  headOffset
	+
	load 255 // full array
	swap
	intc 6 // 4
	extract3
	log

	// contracts/abstracted_account.algo.ts:206
	// log(selectorArg)
	frame_dig 0 // selectorArg: byte[4]
	log

	// *if5_condition
	// contracts/abstracted_account.algo.ts:208
	// allowedMethod.selector === selectorArg && (!hasCooldown || !onCooldown)
	frame_dig 2 // storage key//methods
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	intc 5 // 25
	extract_uint16
	frame_dig 3 // saved accessor: accessor//0//allowedMethod
	intc 2 // 20
	* // acc * typeLength
	+
	intc 1 //  headOffset
	+
	load 255 // full array
	swap
	intc 6 // 4
	extract3
	frame_dig 0 // selectorArg: byte[4]
	==
	dup
	bz *skip_and23
	frame_dig 4 // hasCooldown: bool
	!
	dup
	bnz *skip_or3
	frame_dig 5 // onCooldown: bool
	!
	||

*skip_or3:
	&&

*skip_and23:
	bz *if5_end

	// *if5_consequent
	// *if6_condition
	// contracts/abstracted_account.algo.ts:210
	// hasCooldown
	frame_dig 4 // hasCooldown: bool
	bz *if6_end

	// *if6_consequent
	// contracts/abstracted_account.algo.ts:211
	// this.plugins(key).value.methods[offset].lastCalled = globals.round
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	intc 5 // 25
	frame_dig -4 // offset: uint64
	intc 2 // 20
	* // acc * typeLength
	+
	intc 7 // 2
	+ // add two for length
	intc 9 //  headOffset
	+
	load 255 // full array
	swap
	global Round
	itob
	replace3
	bytec 1 //  "p"
	frame_dig 1 // key: PluginsKey
	concat
	dup
	box_del
	pop
	swap
	box_put

*if6_end:
	// contracts/abstracted_account.algo.ts:213
	// return true;
	intc 0 // 1
	b *methodCallAllowed*return

*if5_end:
	// contracts/abstracted_account.algo.ts:216
	// return false;
	intc 1 // 0

*methodCallAllowed*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// getAuthAddr(): Address
//
// What the value of this.address.value.authAddr should be when this.controlledAddress
// is able to be controlled by this app. It will either be this.app.address or zeroAddress
getAuthAddr:
	proto 0 1

	// contracts/abstracted_account.algo.ts:224
	// return this.controlledAddress.value === this.app.address ? Address.zeroAddress : this.app.address;
	bytec 3 //  "controlled_address"
	app_global_get
	global CurrentApplicationAddress
	==
	bz *ternary0_false
	global ZeroAddress
	b *ternary0_end

*ternary0_false:
	global CurrentApplicationAddress

*ternary0_end:
	retsub

// createApplication(address,address)void
*abi_route_createApplication:
	// admin: address
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 32
	==

	// argument 0 (admin) for createApplication must be a address
	assert

	// controlledAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 1 (controlledAddress) for createApplication must be a address
	assert

	// execute createApplication(address,address)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(controlledAddress: Address, admin: Address): void
//
// Create an abstracted account application.
// This is not part of ARC58 and implementation specific.
//
// @param controlledAddress The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
// @param admin The admin for this app
createApplication:
	proto 2 0

	// contracts/abstracted_account.algo.ts:235
	// verifyAppCallTxn(this.txn, {
	//       sender: { includedIn: [controlledAddress, admin] },
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // controlledAddress: Address
	==
	txn Sender
	frame_dig -2 // admin: Address
	==
	||

	// transaction verification failed: {"txn":{"txnText":"this.txn"},"field":"sender","condition":"includedIn","expected":"[controlledAddress, admin]"}
	assert

	// contracts/abstracted_account.algo.ts:239
	// assert(admin !== controlledAddress)
	frame_dig -2 // admin: Address
	frame_dig -1 // controlledAddress: Address
	!=
	assert

	// contracts/abstracted_account.algo.ts:241
	// this.admin.value = admin
	bytec 2 //  "admin"
	frame_dig -2 // admin: Address
	app_global_put

	// contracts/abstracted_account.algo.ts:242
	// this.controlledAddress.value = controlledAddress === Address.zeroAddress ? this.app.address : controlledAddress
	bytec 3 //  "controlled_address"
	frame_dig -1 // controlledAddress: Address
	global ZeroAddress
	==
	bz *ternary1_false
	global CurrentApplicationAddress
	b *ternary1_end

*ternary1_false:
	frame_dig -1 // controlledAddress: Address

*ternary1_end:
	app_global_put
	retsub

// arc58_changeAdmin(address)void
*abi_route_arc58_changeAdmin:
	// newAdmin: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (newAdmin) for arc58_changeAdmin must be a address
	assert

	// execute arc58_changeAdmin(address)void
	callsub arc58_changeAdmin
	intc 0 // 1
	return

// arc58_changeAdmin(newAdmin: Address): void
//
// Attempt to change the admin for this app. Some implementations MAY not support this.
//
// @param newAdmin The new admin
arc58_changeAdmin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:251
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 2 //  "admin"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:252
	// this.admin.value = newAdmin
	bytec 2 //  "admin"
	frame_dig -1 // newAdmin: Address
	app_global_put
	retsub

// arc58_pluginChangeAdmin(uint64,address,address)void
*abi_route_arc58_pluginChangeAdmin:
	// newAdmin: address
	txna ApplicationArgs 3
	dup
	len
	intc 4 // 32
	==

	// argument 0 (newAdmin) for arc58_pluginChangeAdmin must be a address
	assert

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 32
	==

	// argument 1 (allowedCaller) for arc58_pluginChangeAdmin must be a address
	assert

	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_pluginChangeAdmin(uint64,address,address)void
	callsub arc58_pluginChangeAdmin
	intc 0 // 1
	return

// arc58_pluginChangeAdmin(plugin: AppID, allowedCaller: Address, newAdmin: Address): void
//
// Attempt to change the admin via plugin.
//
// @param plugin The app calling the plugin
// @param allowedCaller The address that triggered the plugin
// @param newAdmin The new admin
arc58_pluginChangeAdmin:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/abstracted_account.algo.ts:264
	// verifyTxn(this.txn, { sender: plugin.address })
	// verify sender
	txn Sender
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"plugin.address"}
	assert

	// contracts/abstracted_account.algo.ts:265
	// assert(this.controlledAddress.value.authAddr === plugin.address, 'This plugin is not in control of the account')
	bytec 3 //  "controlled_address"
	app_global_get
	acct_params_get AcctAuthAddr
	pop
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	==

	// This plugin is not in control of the account
	assert

	// contracts/abstracted_account.algo.ts:267
	// key: PluginsKey = { application: plugin, allowedCaller: allowedCaller }
	frame_dig -1 // plugin: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:268
	// assert(
	//       this.plugins(key).exists && this.plugins(key).value.adminPrivileges,
	//       'This plugin does not have admin privileges'
	//     )
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz *skip_and24
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 192
	getbit
	&&

*skip_and24:
	// This plugin does not have admin privileges
	assert

	// contracts/abstracted_account.algo.ts:273
	// this.admin.value = newAdmin
	bytec 2 //  "admin"
	frame_dig -3 // newAdmin: Address
	app_global_put
	retsub

// arc58_getAdmin()address
*abi_route_arc58_getAdmin:
	// The ABI return prefix
	bytec 8 // 0x151f7c75

	// execute arc58_getAdmin()address
	callsub arc58_getAdmin
	concat
	log
	intc 0 // 1
	return

// arc58_getAdmin(): Address
//
// Get the admin of this app. This method SHOULD always be used rather than reading directly from state
// because different implementations may have different ways of determining the admin.
arc58_getAdmin:
	proto 0 1

	// contracts/abstracted_account.algo.ts:282
	// return this.admin.value;
	bytec 2 //  "admin"
	app_global_get
	retsub

// arc58_verifyAuthAddr()void
*abi_route_arc58_verifyAuthAddr:
	// execute arc58_verifyAuthAddr()void
	callsub arc58_verifyAuthAddr
	intc 0 // 1
	return

// arc58_verifyAuthAddr(): void
//
// Verify the abstracted account is rekeyed to this app
arc58_verifyAuthAddr:
	proto 0 0

	// contracts/abstracted_account.algo.ts:289
	// assert(this.controlledAddress.value.authAddr === this.getAuthAddr())
	bytec 3 //  "controlled_address"
	app_global_get
	acct_params_get AcctAuthAddr
	pop
	callsub getAuthAddr
	==
	assert
	retsub

// arc58_rekeyTo(address,bool)void
*abi_route_arc58_rekeyTo:
	// flash: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (flash) for arc58_rekeyTo must be a bool
	assert
	intc 1 // 0
	getbit

	// addr: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 1 (addr) for arc58_rekeyTo must be a address
	assert

	// execute arc58_rekeyTo(address,bool)void
	callsub arc58_rekeyTo
	intc 0 // 1
	return

// arc58_rekeyTo(addr: Address, flash: boolean): void
//
// Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
//
// @param addr The address to rekey to
// @param flash Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
arc58_rekeyTo:
	proto 2 0

	// contracts/abstracted_account.algo.ts:299
	// verifyAppCallTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 2 //  "admin"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:301
	// sendPayment({
	//       sender: this.controlledAddress.value,
	//       receiver: addr,
	//       rekeyTo: addr,
	//       note: 'rekeying abstracted account',
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:302
	// sender: this.controlledAddress.value
	bytec 3 //  "controlled_address"
	app_global_get
	itxn_field Sender

	// contracts/abstracted_account.algo.ts:303
	// receiver: addr
	frame_dig -1 // addr: Address
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:304
	// rekeyTo: addr
	frame_dig -1 // addr: Address
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:305
	// note: 'rekeying abstracted account'
	pushbytes 0x72656b6579696e672061627374726163746564206163636f756e74 // "rekeying abstracted account"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if7_condition
	// contracts/abstracted_account.algo.ts:308
	// flash
	frame_dig -2 // flash: boolean
	bz *if7_end

	// *if7_consequent
	// contracts/abstracted_account.algo.ts:308
	// this.assertRekeysBack()
	callsub assertRekeysBack

*if7_end:
	retsub

// arc58_canCall(uint64,address)bool
*abi_route_arc58_canCall:
	// The ABI return prefix
	bytec 8 // 0x151f7c75

	// address: address
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 32
	==

	// argument 0 (address) for arc58_canCall must be a address
	assert

	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_canCall(uint64,address)bool
	callsub arc58_canCall
	bytec 5 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// arc58_canCall(plugin: AppID, address: Address): boolean
//
// check whether the plugin can be used
//
// @param plugin the plugin to be rekeyed to
// @param address the address that triggered the plugin
// @returns whether the plugin can be called via txn sender or globally
arc58_canCall:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/abstracted_account.algo.ts:320
	// globalAllowed = this.pluginCallAllowed(plugin, Address.zeroAddress)
	global ZeroAddress
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed
	frame_bury 0 // globalAllowed: bool

	// *if8_condition
	// contracts/abstracted_account.algo.ts:321
	// globalAllowed
	frame_dig 0 // globalAllowed: bool
	bz *if8_end

	// *if8_consequent
	// contracts/abstracted_account.algo.ts:321
	// return true;
	intc 0 // 1
	b *arc58_canCall*return

*if8_end:
	// contracts/abstracted_account.algo.ts:323
	// return this.pluginCallAllowed(plugin, address);
	frame_dig -2 // address: Address
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed

*arc58_canCall*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc58_rekeyToPlugin(uint64,uint64[])void
*abi_route_arc58_rekeyToPlugin:
	// methodOffsets: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_rekeyToPlugin(uint64,uint64[])void
	callsub arc58_rekeyToPlugin
	intc 0 // 1
	return

// arc58_rekeyToPlugin(plugin: AppID, methodOffsets: uint64[]): void
//
// Temporarily rekey to an approved plugin app address
//
// @param plugin The app to rekey to
// @param methodOffsets The indices of the methods being used in the group
// if the plugin has method restrictions these indices are required to match
// the methods used on each subsequent call to the plugin within the group
arc58_rekeyToPlugin:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/abstracted_account.algo.ts:336
	// globalExists = this.plugins({ application: plugin, allowedCaller: Address.zeroAddress }).exists
	bytec 1 //  "p"
	frame_dig -1 // plugin: AppID
	itob
	global ZeroAddress
	concat
	concat
	box_len
	swap
	pop
	frame_bury 0 // globalExists: bool

	// contracts/abstracted_account.algo.ts:337
	// localExists = this.plugins({ application: plugin, allowedCaller: this.txn.sender }).exists
	bytec 1 //  "p"
	frame_dig -1 // plugin: AppID
	itob
	txn Sender
	concat
	concat
	box_len
	swap
	pop
	frame_bury 1 // localExists: bool

	// contracts/abstracted_account.algo.ts:339
	// globallyAllowed = false
	intc 1 // 0
	frame_bury 2 // globallyAllowed: bool

	// contracts/abstracted_account.algo.ts:340
	// locallyAllowed = false
	intc 1 // 0
	frame_bury 3 // locallyAllowed: bool

	// *if9_condition
	// contracts/abstracted_account.algo.ts:342
	// globalExists
	frame_dig 0 // globalExists: bool
	bz *if9_end

	// *if9_consequent
	// contracts/abstracted_account.algo.ts:343
	// globallyAllowed = this.pluginCallAllowed(plugin, Address.zeroAddress)
	global ZeroAddress
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed
	frame_bury 2 // globallyAllowed: bool

*if9_end:
	// *if10_condition
	// contracts/abstracted_account.algo.ts:346
	// localExists
	frame_dig 1 // localExists: bool
	bz *if10_end

	// *if10_consequent
	// contracts/abstracted_account.algo.ts:347
	// locallyAllowed = this.pluginCallAllowed(plugin, this.txn.sender)
	txn Sender
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed
	frame_bury 3 // locallyAllowed: bool

*if10_end:
	// *if11_condition
	// contracts/abstracted_account.algo.ts:353
	// (!globalExists && !localExists)
	//       || (globalExists && !globallyAllowed && !locallyAllowed)
	frame_dig 0 // globalExists: bool
	!
	dup
	bz *skip_and25
	frame_dig 1 // localExists: bool
	!
	&&

*skip_and25:
	dup
	bnz *skip_or4
	frame_dig 0 // globalExists: bool
	dup
	bz *skip_and26
	frame_dig 2 // globallyAllowed: bool
	!
	&&

*skip_and26:
	dup
	bz *skip_and27
	frame_dig 3 // locallyAllowed: bool
	!
	&&

*skip_and27:
	||

*skip_or4:
	bz *if11_elseif1_condition

	// *if11_consequent
	// contracts/abstracted_account.algo.ts:356
	// this.assertPluginCallAllowed(plugin, Address.zeroAddress)
	global ZeroAddress
	frame_dig -1 // plugin: AppID
	callsub assertPluginCallAllowed
	b *if11_end

*if11_elseif1_condition:
	// contracts/abstracted_account.algo.ts:357
	// localExists && !locallyAllowed && !globallyAllowed
	frame_dig 1 // localExists: bool
	dup
	bz *skip_and28
	frame_dig 3 // locallyAllowed: bool
	!
	&&

*skip_and28:
	dup
	bz *skip_and29
	frame_dig 2 // globallyAllowed: bool
	!
	&&

*skip_and29:
	bz *if11_end

	// *if11_elseif1_consequent
	// contracts/abstracted_account.algo.ts:358
	// this.assertPluginCallAllowed(plugin, this.txn.sender)
	txn Sender
	frame_dig -1 // plugin: AppID
	callsub assertPluginCallAllowed

*if11_end:
	// contracts/abstracted_account.algo.ts:361
	// this.assertValidGroup(plugin, methodOffsets, globallyAllowed, locallyAllowed)
	frame_dig 3 // locallyAllowed: bool
	frame_dig 2 // globallyAllowed: bool
	frame_dig -2 // methodOffsets: uint64[]
	frame_dig -1 // plugin: AppID
	callsub assertValidGroup

	// contracts/abstracted_account.algo.ts:363
	// sendPayment({
	//       sender: this.controlledAddress.value,
	//       receiver: this.controlledAddress.value,
	//       rekeyTo: plugin.address,
	//       note: 'rekeying to plugin app',
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:364
	// sender: this.controlledAddress.value
	bytec 3 //  "controlled_address"
	app_global_get
	itxn_field Sender

	// contracts/abstracted_account.algo.ts:365
	// receiver: this.controlledAddress.value
	bytec 3 //  "controlled_address"
	app_global_get
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:366
	// rekeyTo: plugin.address
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:367
	// note: 'rekeying to plugin app'
	pushbytes 0x72656b6579696e6720746f20706c7567696e20617070 // "rekeying to plugin app"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// arc58_rekeyToNamedPlugin(string,uint64[])void
*abi_route_arc58_rekeyToNamedPlugin:
	// methodOffsets: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_rekeyToNamedPlugin(string,uint64[])void
	callsub arc58_rekeyToNamedPlugin
	intc 0 // 1
	return

// arc58_rekeyToNamedPlugin(name: string, methodOffsets: uint64[]): void
//
// Temporarily rekey to a named plugin app address
//
// @param name The name of the plugin to rekey to
// @param methodOffsets The indices of the methods being used in the group
// if the plugin has method restrictions these indices are required to match
// the methods used on each subsequent call to the plugin within the group
arc58_rekeyToNamedPlugin:
	proto 2 0

	// contracts/abstracted_account.algo.ts:381
	// this.arc58_rekeyToPlugin(this.namedPlugins(name).value.application, methodOffsets)
	frame_dig -2 // methodOffsets: uint64[]
	intc 1 // 0
	intc 3 // 8
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	cover 2
	box_extract
	btoi
	callsub arc58_rekeyToPlugin
	retsub

// arc58_addPlugin(uint64,address,uint64,uint64,bool,(byte[4],uint64,uint64)[])void
*abi_route_arc58_addPlugin:
	// methods: (byte[4],uint64,uint64)[]
	txna ApplicationArgs 6
	extract 2 0

	// adminPrivileges: bool
	txna ApplicationArgs 5
	dup
	len
	intc 0 // 1
	==

	// argument 1 (adminPrivileges) for arc58_addPlugin must be a bool
	assert
	intc 1 // 0
	getbit

	// cooldown: uint64
	txna ApplicationArgs 4
	btoi

	// lastValidRound: uint64
	txna ApplicationArgs 3
	btoi

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 32
	==

	// argument 4 (allowedCaller) for arc58_addPlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_addPlugin(uint64,address,uint64,uint64,bool,(byte[4],uint64,uint64)[])void
	callsub arc58_addPlugin
	intc 0 // 1
	return

// arc58_addPlugin(app: AppID, allowedCaller: Address, lastValidRound: uint64, cooldown: uint64, adminPrivileges: boolean, methods: MethodInfo[]): void
//
// Add an app to the list of approved plugins
//
// @param app The app to add
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param lastValidRound The round when the permission expires
// @param cooldown  The number of rounds that must pass before the plugin can be called again
// @param adminPrivileges Whether the plugin has permissions to change the admin account
// @param methods The methods that are allowed to be called for the plugin by the address
arc58_addPlugin:
	proto 6 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/abstracted_account.algo.ts:404
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 2 //  "admin"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:405
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:407
	// this.plugins(key).value = {
	//       lastValidRound: lastValidRound,
	//       cooldown: cooldown,
	//       lastCalled: 0,
	//       adminPrivileges: adminPrivileges,
	//       methods: methods,
	//     }
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	dup
	box_del
	pop
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 9 //  initial head offset
	frame_dig -3 // lastValidRound: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -4 // cooldown: uint64
	itob
	callsub *process_static_tuple_element
	bytec 6 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 5 // 0x00
	intc 1 // 0
	frame_dig -5 // adminPrivileges: boolean
	setbit
	callsub *process_static_tuple_element
	frame_dig -6 // methods: MethodInfo[]
	dup
	len
	intc 2 // 20
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_put
	retsub

// arc58_removePlugin(uint64,address,byte[4][])void
*abi_route_arc58_removePlugin:
	// methods: byte[4][]
	txna ApplicationArgs 3
	extract 2 0

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 32
	==

	// argument 1 (allowedCaller) for arc58_removePlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_removePlugin(uint64,address,byte[4][])void
	callsub arc58_removePlugin
	intc 0 // 1
	return

// arc58_removePlugin(app: AppID, allowedCaller: Address, methods: bytes<4>[]): void
//
// Remove an app from the list of approved plugins
//
// @param app The app to remove
// @param allowedCaller The address of that's allowed to call the app
// @param methods The methods that to remove before attempting to uninstall the plugin
// or the global zero address for all addresses
arc58_removePlugin:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/abstracted_account.algo.ts:425
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 2 //  "admin"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:427
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:429
	// assert(this.plugins(key).exists, 'plugin does not exist')
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop

	// plugin does not exist
	assert

	// contracts/abstracted_account.algo.ts:431
	// this.plugins(key).delete()
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_del
	retsub

// arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,(byte[4],uint64,uint64)[])void
*abi_route_arc58_addNamedPlugin:
	// methods: (byte[4],uint64,uint64)[]
	txna ApplicationArgs 7
	extract 2 0

	// adminPrivileges: bool
	txna ApplicationArgs 6
	dup
	len
	intc 0 // 1
	==

	// argument 1 (adminPrivileges) for arc58_addNamedPlugin must be a bool
	assert
	intc 1 // 0
	getbit

	// cooldown: uint64
	txna ApplicationArgs 5
	btoi

	// lastValidRound: uint64
	txna ApplicationArgs 4
	btoi

	// allowedCaller: address
	txna ApplicationArgs 3
	dup
	len
	intc 4 // 32
	==

	// argument 4 (allowedCaller) for arc58_addNamedPlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 2
	btoi

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,(byte[4],uint64,uint64)[])void
	callsub arc58_addNamedPlugin
	intc 0 // 1
	return

// arc58_addNamedPlugin(name: string, app: AppID, allowedCaller: Address, lastValidRound: uint64, cooldown: uint64, adminPrivileges: boolean, methods: MethodInfo[]): void
//
// Add a named plugin
//
// @param name The plugin name
// @param app The plugin app
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param lastValidRound The round when the permission expires
// @param cooldown  The number of rounds that must pass before the plugin can be called again
// @param adminPrivileges Whether the plugin has permissions to change the admin account
// @param methods The methods that are allowed to be called for the plugin by the address
arc58_addNamedPlugin:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/abstracted_account.algo.ts:456
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 2 //  "admin"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:457
	// assert(!this.namedPlugins(name).exists)
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/abstracted_account.algo.ts:459
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -2 // app: AppID
	itob
	frame_dig -3 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:460
	// this.namedPlugins(name).value = key
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	frame_dig 0 // key: PluginsKey
	box_put

	// contracts/abstracted_account.algo.ts:462
	// pluginInfo: PluginInfo = {
	//       lastValidRound: lastValidRound,
	//       cooldown: cooldown,
	//       lastCalled: 0,
	//       adminPrivileges: adminPrivileges,
	//       methods: methods,
	//     }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 9 //  initial head offset
	frame_dig -4 // lastValidRound: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -5 // cooldown: uint64
	itob
	callsub *process_static_tuple_element
	bytec 6 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 5 // 0x00
	intc 1 // 0
	frame_dig -6 // adminPrivileges: boolean
	setbit
	callsub *process_static_tuple_element
	frame_dig -7 // methods: MethodInfo[]
	dup
	len
	intc 2 // 20
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // pluginInfo: PluginInfo

	// contracts/abstracted_account.algo.ts:470
	// this.plugins(key).value = pluginInfo
	bytec 1 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	dup
	box_del
	pop
	frame_dig 1 // pluginInfo: PluginInfo
	box_put
	retsub

// arc58_removeNamedPlugin(string)void
*abi_route_arc58_removeNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_removeNamedPlugin(string)void
	callsub arc58_removeNamedPlugin
	intc 0 // 1
	return

// arc58_removeNamedPlugin(name: string): void
//
// Remove a named plugin
//
// @param name The plugin name
arc58_removeNamedPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/abstracted_account.algo.ts:480
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 2 //  "admin"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// contracts/abstracted_account.algo.ts:482
	// assert(this.namedPlugins(name).exists, 'plugin does not exist')
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	box_len
	swap
	pop

	// plugin does not exist
	assert

	// contracts/abstracted_account.algo.ts:483
	// app = this.namedPlugins(name).value
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	frame_bury 0 // storage key//app

	// contracts/abstracted_account.algo.ts:484
	// assert(this.plugins(app).exists, 'plugin does not exist')
	bytec 1 //  "p"
	frame_dig 0 // storage key//app
	box_get

	// box value does not exist: this.namedPlugins(name).value
	assert
	concat
	box_len
	swap
	pop

	// plugin does not exist
	assert

	// contracts/abstracted_account.algo.ts:486
	// this.namedPlugins(name).delete()
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	box_del

	// contracts/abstracted_account.algo.ts:487
	// this.plugins(app).delete()
	bytec 1 //  "p"
	frame_dig 0 // storage key//app
	box_get

	// box value does not exist: this.namedPlugins(name).value
	assert
	concat
	box_del
	retsub

*create_NoOp:
	pushbytes 0xb4c77d71 // method "createApplication(address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xd24b7556 // method "arc58_changeAdmin(address)void"
	pushbytes 0x5fa449c6 // method "arc58_pluginChangeAdmin(uint64,address,address)void"
	pushbytes 0x13bc44e4 // method "arc58_getAdmin()address"
	bytec 7 //  method "arc58_verifyAuthAddr()void"
	pushbytes 0xc95a5d3d // method "arc58_rekeyTo(address,bool)void"
	pushbytes 0xe9026da8 // method "arc58_canCall(uint64,address)bool"
	pushbytes 0x3f8615d7 // method "arc58_rekeyToPlugin(uint64,uint64[])void"
	pushbytes 0x5c34f3d6 // method "arc58_rekeyToNamedPlugin(string,uint64[])void"
	pushbytes 0x3a8aa34d // method "arc58_addPlugin(uint64,address,uint64,uint64,bool,(byte[4],uint64,uint64)[])void"
	pushbytes 0x824404d7 // method "arc58_removePlugin(uint64,address,byte[4][])void"
	pushbytes 0xadc2c6ec // method "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,(byte[4],uint64,uint64)[])void"
	pushbytes 0xe350b9d4 // method "arc58_removeNamedPlugin(string)void"
	txna ApplicationArgs 0
	match *abi_route_arc58_changeAdmin *abi_route_arc58_pluginChangeAdmin *abi_route_arc58_getAdmin *abi_route_arc58_verifyAuthAddr *abi_route_arc58_rekeyTo *abi_route_arc58_canCall *abi_route_arc58_rekeyToPlugin *abi_route_arc58_rekeyToNamedPlugin *abi_route_arc58_addPlugin *abi_route_arc58_removePlugin *abi_route_arc58_addNamedPlugin *abi_route_arc58_removeNamedPlugin

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub