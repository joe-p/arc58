#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 20 25 192
    bytecblock "p" "admin" "controlled_address" 0x00 0x001b 0x0000000000000000 "n" 0x0f885493 0x151f7c75 0x0000
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txn NumAppArgs
    bz main_after_if_else@19
    pushbytess 0xb4c77d71 0xd24b7556 0x5fa449c6 0x13bc44e4 // method "createApplication(address,address)void", method "arc58_changeAdmin(address)void", method "arc58_pluginChangeAdmin(uint64,address,address)void", method "arc58_getAdmin()address"
    bytec 7 // method "arc58_verifyAuthAddr()void"
    pushbytess 0xc95a5d3d 0x7699308f 0x3f8615d7 0x5c34f3d6 0x0a8a19d4 0x4d372355 0xea8bb9ec 0xe350b9d4 // method "arc58_rekeyTo(address,bool)void", method "arc58_canCall(uint64,address,byte[4])bool", method "arc58_rekeyToPlugin(uint64,uint64[])void", method "arc58_rekeyToNamedPlugin(string,uint64[])void", method "arc58_addPlugin(uint64,address,uint64,uint64,bool,(byte[4],uint64)[])void", method "arc58_removePlugin(uint64,address)void", method "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,(byte[4],uint64)[])void", method "arc58_removeNamedPlugin(string)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_arc58_changeAdmin_route@4 main_arc58_pluginChangeAdmin_route@5 main_arc58_getAdmin_route@6 main_arc58_verifyAuthAddr_route@7 main_arc58_rekeyTo_route@8 main_arc58_canCall_route@9 main_arc58_rekeyToPlugin_route@10 main_arc58_rekeyToNamedPlugin_route@11 main_arc58_addPlugin_route@12 main_arc58_removePlugin_route@13 main_arc58_addNamedPlugin_route@14 main_arc58_removeNamedPlugin_route@15

main_after_if_else@19:
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    intc_0 // 0
    return

main_arc58_removeNamedPlugin_route@15:
    // contracts/abstracted_account.algo.ts:627
    // arc58_removeNamedPlugin(name: arc4.Str): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    // contracts/abstracted_account.algo.ts:627
    // arc58_removeNamedPlugin(name: arc4.Str): void {
    callsub arc58_removeNamedPlugin
    intc_1 // 1
    return

main_arc58_addNamedPlugin_route@14:
    // contracts/abstracted_account.algo.ts:587-595
    // arc58_addNamedPlugin(
    //   name: arc4.Str,
    //   app: arc4.UintN64,
    //   allowedCaller: arc4.Address,
    //   lastValidRound: arc4.UintN64,
    //   cooldown: arc4.UintN64,
    //   adminPrivileges: arc4.Bool,
    //   methods: arc4.DynamicArray<MethodRestriction>,
    // ): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    // contracts/abstracted_account.algo.ts:587-595
    // arc58_addNamedPlugin(
    //   name: arc4.Str,
    //   app: arc4.UintN64,
    //   allowedCaller: arc4.Address,
    //   lastValidRound: arc4.UintN64,
    //   cooldown: arc4.UintN64,
    //   adminPrivileges: arc4.Bool,
    //   methods: arc4.DynamicArray<MethodRestriction>,
    // ): void {
    callsub arc58_addNamedPlugin
    intc_1 // 1
    return

main_arc58_removePlugin_route@13:
    // contracts/abstracted_account.algo.ts:565
    // arc58_removePlugin(app: arc4.UintN64, allowedCaller: arc4.Address): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // contracts/abstracted_account.algo.ts:565
    // arc58_removePlugin(app: arc4.UintN64, allowedCaller: arc4.Address): void {
    callsub arc58_removePlugin
    intc_1 // 1
    return

main_arc58_addPlugin_route@12:
    // contracts/abstracted_account.algo.ts:527-534
    // arc58_addPlugin(
    //   app: arc4.UintN64,
    //   allowedCaller: arc4.Address,
    //   lastValidRound: arc4.UintN64,
    //   cooldown: arc4.UintN64,
    //   adminPrivileges: arc4.Bool,
    //   methods: arc4.DynamicArray<MethodRestriction>,
    // ): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    // contracts/abstracted_account.algo.ts:527-534
    // arc58_addPlugin(
    //   app: arc4.UintN64,
    //   allowedCaller: arc4.Address,
    //   lastValidRound: arc4.UintN64,
    //   cooldown: arc4.UintN64,
    //   adminPrivileges: arc4.Bool,
    //   methods: arc4.DynamicArray<MethodRestriction>,
    // ): void {
    callsub arc58_addPlugin
    intc_1 // 1
    return

main_arc58_rekeyToNamedPlugin_route@11:
    // contracts/abstracted_account.algo.ts:511
    // arc58_rekeyToNamedPlugin(name: string, methodOffsets: arc4.DynamicArray<arc4.UintN64>): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // contracts/abstracted_account.algo.ts:511
    // arc58_rekeyToNamedPlugin(name: string, methodOffsets: arc4.DynamicArray<arc4.UintN64>): void {
    callsub arc58_rekeyToNamedPlugin
    intc_1 // 1
    return

main_arc58_rekeyToPlugin_route@10:
    // contracts/abstracted_account.algo.ts:487
    // arc58_rekeyToPlugin(plugin: arc4.UintN64, methodOffsets: arc4.DynamicArray<arc4.UintN64>): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // contracts/abstracted_account.algo.ts:487
    // arc58_rekeyToPlugin(plugin: arc4.UintN64, methodOffsets: arc4.DynamicArray<arc4.UintN64>): void {
    callsub arc58_rekeyToPlugin
    pop
    intc_1 // 1
    return

main_arc58_canCall_route@9:
    // contracts/abstracted_account.algo.ts:470
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // contracts/abstracted_account.algo.ts:470
    // @abimethod({ readonly: true })
    callsub arc58_canCall
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_arc58_rekeyTo_route@8:
    // contracts/abstracted_account.algo.ts:446
    // arc58_rekeyTo(address: arc4.Address, flash: arc4.Bool): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // contracts/abstracted_account.algo.ts:446
    // arc58_rekeyTo(address: arc4.Address, flash: arc4.Bool): void {
    callsub arc58_rekeyTo
    intc_1 // 1
    return

main_arc58_verifyAuthAddr_route@7:
    // contracts/abstracted_account.algo.ts:436
    // arc58_verifyAuthAddr(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub arc58_verifyAuthAddr
    intc_1 // 1
    return

main_arc58_getAdmin_route@6:
    // contracts/abstracted_account.algo.ts:428
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub arc58_getAdmin
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_arc58_pluginChangeAdmin_route@5:
    // contracts/abstracted_account.algo.ts:405
    // arc58_pluginChangeAdmin(plugin: arc4.UintN64, allowedCaller: arc4.Address, newAdmin: arc4.Address): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // contracts/abstracted_account.algo.ts:405
    // arc58_pluginChangeAdmin(plugin: arc4.UintN64, allowedCaller: arc4.Address, newAdmin: arc4.Address): void {
    callsub arc58_pluginChangeAdmin
    intc_1 // 1
    return

main_arc58_changeAdmin_route@4:
    // contracts/abstracted_account.algo.ts:391
    // arc58_changeAdmin(newAdmin: arc4.Address): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    // contracts/abstracted_account.algo.ts:391
    // arc58_changeAdmin(newAdmin: arc4.Address): void {
    callsub arc58_changeAdmin
    intc_1 // 1
    return

main_createApplication_route@3:
    // contracts/abstracted_account.algo.ts:370
    // @abimethod({ onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // contracts/abstracted_account.algo.ts:68
    // export class AbstractedAccount extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // contracts/abstracted_account.algo.ts:370
    // @abimethod({ onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// contracts/abstracted_account.algo.ts::AbstractedAccount.pluginCallAllowed(app: bytes, caller: bytes, method: bytes) -> uint64:
pluginCallAllowed:
    // contracts/abstracted_account.algo.ts:86
    // private pluginCallAllowed(app: arc4.UintN64, caller: arc4.Address, method: arc4.StaticBytes<4>): boolean {
    proto 3 1
    intc_0 // 0
    dup
    pushbytes ""
    dupn 2
    // contracts/abstracted_account.algo.ts:87
    // const key = new PluginsKey({ application: app, allowedCaller: caller });
    frame_dig -3
    frame_dig -2
    concat
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    swap
    concat
    dup
    // contracts/abstracted_account.algo.ts:89
    // if (!this.plugins(key).exists) {
    box_len
    bury 1
    bnz pluginCallAllowed_after_if_else@2
    // contracts/abstracted_account.algo.ts:90
    // return false;
    intc_0 // 0
    frame_bury 0
    retsub

pluginCallAllowed_after_if_else@2:
    // contracts/abstracted_account.algo.ts:93
    // const methods = this.plugins(key).value.methods.copy();
    frame_dig 5
    box_get
    assert // Box must have value
    dup
    intc_3 // 25
    extract_uint16
    dig 1
    len
    substring3
    dup
    frame_bury 0
    // contracts/abstracted_account.algo.ts:94
    // let methodAllowed = methods.length > 0 ? false : true;
    intc_0 // 0
    extract_uint16
    dup
    frame_bury 4
    !
    frame_bury 3
    // contracts/abstracted_account.algo.ts:95
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    intc_0 // 0
    frame_bury 2

pluginCallAllowed_while_top@3:
    // contracts/abstracted_account.algo.ts:95
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    frame_dig 2
    frame_dig 4
    <
    bz pluginCallAllowed_block@8
    // contracts/abstracted_account.algo.ts:96
    // if (methods[i].selector === method) {
    frame_dig 0
    extract 2 0
    frame_dig 2
    intc_2 // 20
    *
    intc_2 // 20
    extract3 // on error: Index access is out of bounds
    extract 0 4 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bz pluginCallAllowed_after_if_else@6
    // contracts/abstracted_account.algo.ts:97
    // methodAllowed = true;
    intc_1 // 1
    frame_bury 3

pluginCallAllowed_block@8:
    // contracts/abstracted_account.algo.ts:102
    // const p = this.plugins(key).value.copy();
    frame_dig 5
    box_get
    swap
    dup
    cover 2
    frame_bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:104
    // p.lastValidRound.native >= Global.round
    intc_0 // 0
    extract_uint64
    global Round
    >=
    // contracts/abstracted_account.algo.ts:104-105
    // p.lastValidRound.native >= Global.round
    // && (Global.round - p.lastCalled.native) >= p.cooldown.native
    bz pluginCallAllowed_bool_false@11
    // contracts/abstracted_account.algo.ts:105
    // && (Global.round - p.lastCalled.native) >= p.cooldown.native
    global Round
    frame_dig 1
    dup
    cover 2
    pushint 16 // 16
    extract_uint64
    -
    swap
    pushint 8 // 8
    extract_uint64
    >=
    // contracts/abstracted_account.algo.ts:104-105
    // p.lastValidRound.native >= Global.round
    // && (Global.round - p.lastCalled.native) >= p.cooldown.native
    bz pluginCallAllowed_bool_false@11
    intc_1 // 1

pluginCallAllowed_bool_merge@12:
    // contracts/abstracted_account.algo.ts:104-106
    // p.lastValidRound.native >= Global.round
    // && (Global.round - p.lastCalled.native) >= p.cooldown.native
    // && methodAllowed
    frame_dig 3
    &&
    // contracts/abstracted_account.algo.ts:103-107
    // return (
    //   p.lastValidRound.native >= Global.round
    //   && (Global.round - p.lastCalled.native) >= p.cooldown.native
    //   && methodAllowed
    // );
    frame_bury 0
    retsub

pluginCallAllowed_bool_false@11:
    intc_0 // 0
    b pluginCallAllowed_bool_merge@12

pluginCallAllowed_after_if_else@6:
    // contracts/abstracted_account.algo.ts:95
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b pluginCallAllowed_while_top@3


// contracts/abstracted_account.algo.ts::AbstractedAccount.txnRekeysBack(txn: uint64) -> uint64:
txnRekeysBack:
    // contracts/abstracted_account.algo.ts:110
    // private txnRekeysBack(txn: gtxn.Transaction): boolean {
    proto 1 1
    // contracts/abstracted_account.algo.ts:111
    // if (txn.sender === Global.currentApplicationAddress && txn.rekeyTo === Global.currentApplicationAddress) {
    frame_dig -1
    gtxns Sender
    global CurrentApplicationAddress
    ==
    bz txnRekeysBack_after_if_else@3
    frame_dig -1
    gtxns RekeyTo
    global CurrentApplicationAddress
    ==
    bz txnRekeysBack_after_if_else@3
    // contracts/abstracted_account.algo.ts:112
    // return true;
    intc_1 // 1
    retsub

txnRekeysBack_after_if_else@3:
    // contracts/abstracted_account.algo.ts:116
    // txn.type === TransactionType.ApplicationCall
    frame_dig -1
    gtxns TypeEnum
    pushint 6 // 6
    ==
    // contracts/abstracted_account.algo.ts:116-117
    // txn.type === TransactionType.ApplicationCall
    // && txn.appId === Global.currentApplicationId
    bz txnRekeysBack_bool_false@9
    // contracts/abstracted_account.algo.ts:117
    // && txn.appId === Global.currentApplicationId
    frame_dig -1
    gtxns ApplicationID
    global CurrentApplicationID
    ==
    // contracts/abstracted_account.algo.ts:116-117
    // txn.type === TransactionType.ApplicationCall
    // && txn.appId === Global.currentApplicationId
    bz txnRekeysBack_bool_false@9
    // contracts/abstracted_account.algo.ts:118
    // && txn.numAppArgs === 1
    frame_dig -1
    gtxns NumAppArgs
    intc_1 // 1
    ==
    // contracts/abstracted_account.algo.ts:116-118
    // txn.type === TransactionType.ApplicationCall
    // && txn.appId === Global.currentApplicationId
    // && txn.numAppArgs === 1
    bz txnRekeysBack_bool_false@9
    // contracts/abstracted_account.algo.ts:120
    // && txn.onCompletion === arc4.OnCompleteAction.NoOp
    frame_dig -1
    gtxns OnCompletion
    // contracts/abstracted_account.algo.ts:116-120
    // txn.type === TransactionType.ApplicationCall
    // && txn.appId === Global.currentApplicationId
    // && txn.numAppArgs === 1
    // // @ts-expect-error
    // && txn.onCompletion === arc4.OnCompleteAction.NoOp
    bnz txnRekeysBack_bool_false@9
    // contracts/abstracted_account.algo.ts:121
    // && txn.appArgs(0) === methodSelector('arc58_verifyAuthAddr()void')
    frame_dig -1
    intc_0 // 0
    gtxnsas ApplicationArgs
    bytec 7 // method "arc58_verifyAuthAddr()void"
    ==
    // contracts/abstracted_account.algo.ts:116-121
    // txn.type === TransactionType.ApplicationCall
    // && txn.appId === Global.currentApplicationId
    // && txn.numAppArgs === 1
    // // @ts-expect-error
    // && txn.onCompletion === arc4.OnCompleteAction.NoOp
    // && txn.appArgs(0) === methodSelector('arc58_verifyAuthAddr()void')
    bz txnRekeysBack_bool_false@9
    intc_1 // 1
    // contracts/abstracted_account.algo.ts:115-122
    // return (
    //   txn.type === TransactionType.ApplicationCall
    //   && txn.appId === Global.currentApplicationId
    //   && txn.numAppArgs === 1
    //   // @ts-expect-error
    //   && txn.onCompletion === arc4.OnCompleteAction.NoOp
    //   && txn.appArgs(0) === methodSelector('arc58_verifyAuthAddr()void')
    // )
    retsub

txnRekeysBack_bool_false@9:
    intc_0 // 0
    // contracts/abstracted_account.algo.ts:115-122
    // return (
    //   txn.type === TransactionType.ApplicationCall
    //   && txn.appId === Global.currentApplicationId
    //   && txn.numAppArgs === 1
    //   // @ts-expect-error
    //   && txn.onCompletion === arc4.OnCompleteAction.NoOp
    //   && txn.appArgs(0) === methodSelector('arc58_verifyAuthAddr()void')
    // )
    retsub


// contracts/abstracted_account.algo.ts::AbstractedAccount.pluginCheck(key: bytes) -> uint64, uint64, uint64, uint64, uint64, uint64, bytes:
pluginCheck:
    // contracts/abstracted_account.algo.ts:139
    // private pluginCheck(key: PluginsKey): PluginValidation {
    proto 1 7
    pushbytes ""
    dupn 3
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    frame_dig -1
    concat
    dup
    // contracts/abstracted_account.algo.ts:140
    // const exists = this.plugins(key).exists;
    box_len
    dup
    uncover 2
    pop
    // contracts/abstracted_account.algo.ts:141
    // if (!exists) {
    bnz pluginCheck_after_if_else@2
    // contracts/abstracted_account.algo.ts:143
    // exists: false,
    intc_0 // 0
    // contracts/abstracted_account.algo.ts:144
    // expired: true,
    intc_1 // 1
    // contracts/abstracted_account.algo.ts:145-146
    // hasCooldown: true,
    // onCooldown: true,
    dupn 2
    // contracts/abstracted_account.algo.ts:147
    // hasMethodRestrictions: false,
    intc_0 // 0
    // contracts/abstracted_account.algo.ts:148
    // valid: false
    dup
    // contracts/abstracted_account.algo.ts:142-149
    // return {
    //   exists: false,
    //   expired: true,
    //   hasCooldown: true,
    //   onCooldown: true,
    //   hasMethodRestrictions: false,
    //   valid: false
    // }
    frame_dig -1
    uncover 12
    uncover 12
    uncover 12
    uncover 12
    uncover 12
    uncover 12
    retsub

pluginCheck_after_if_else@2:
    // contracts/abstracted_account.algo.ts:152
    // const expired = Global.round > this.plugins(key).value.lastValidRound.native;
    global Round
    frame_dig 4
    dup
    cover 2
    box_get
    assert // Box must have value
    intc_0 // 0
    extract_uint64
    >
    frame_bury 0
    // contracts/abstracted_account.algo.ts:153
    // const hasCooldown = this.plugins(key).value.cooldown.native > 0;
    dup
    box_get
    assert // Box must have value
    pushint 8 // 8
    extract_uint64
    intc_0 // 0
    >
    frame_bury 1
    // contracts/abstracted_account.algo.ts:154
    // const onCooldown = (Global.round - this.plugins(key).value.lastCalled.native) < this.plugins(key).value.cooldown.native;
    global Round
    dig 1
    box_get
    assert // Box must have value
    pushint 16 // 16
    extract_uint64
    -
    dig 1
    box_get
    assert // Box must have value
    pushint 8 // 8
    extract_uint64
    <
    frame_bury 3
    // contracts/abstracted_account.algo.ts:155
    // const hasMethodRestrictions = this.plugins(key).value.methods.length > 0;
    box_get
    assert // Box must have value
    dup
    intc_3 // 25
    extract_uint16
    dig 1
    len
    substring3
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    frame_bury 2
    // contracts/abstracted_account.algo.ts:157
    // const valid = exists && !expired && !onCooldown;
    frame_dig 5
    bz pluginCheck_bool_false@6
    frame_dig 0
    bnz pluginCheck_bool_false@6
    frame_dig 3
    bnz pluginCheck_bool_false@6
    intc_1 // 1

pluginCheck_bool_merge@7:
    // contracts/abstracted_account.algo.ts:159-166
    // return {
    //   exists,
    //   expired,
    //   hasCooldown,
    //   onCooldown,
    //   hasMethodRestrictions,
    //   valid
    // }
    frame_dig 5
    frame_dig 0
    frame_dig 1
    frame_dig 3
    frame_dig 2
    uncover 5
    frame_dig -1
    uncover 12
    uncover 12
    uncover 12
    uncover 12
    uncover 12
    uncover 12
    retsub

pluginCheck_bool_false@6:
    intc_0 // 0
    b pluginCheck_bool_merge@7


// contracts/abstracted_account.algo.ts::AbstractedAccount.fullPluginCheck(key: bytes, txn: uint64, app: uint64, caller: bytes, methodOffsets: bytes, methodIndex: uint64) -> uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, uint64, bytes, bytes:
fullPluginCheck:
    // contracts/abstracted_account.algo.ts:169-176
    // private fullPluginCheck(
    //   key: PluginsKey,
    //   txn: gtxn.ApplicationTxn,
    //   app: Application,
    //   caller: Account,
    //   methodOffsets: arc4.DynamicArray<arc4.UintN64>,
    //   methodIndex: uint64
    // ): FullPluginValidation {
    proto 6 11
    intc_0 // 0
    dupn 2
    pushbytes ""
    dupn 7
    // contracts/abstracted_account.algo.ts:177
    // const check = this.pluginCheck(key);
    frame_dig -6
    callsub pluginCheck
    frame_bury -6
    dup
    cover 6
    cover 6
    cover 5
    cover 4
    cover 3
    cover 2
    swap
    // contracts/abstracted_account.algo.ts:179
    // if (!check.valid) {
    bnz fullPluginCheck_after_if_else@4
    // contracts/abstracted_account.algo.ts:180-185
    // return {
    //   ...check,
    //   methodAllowed: false,
    //   methodHasCooldown: true,
    //   methodOnCooldown: true
    // }
    frame_dig 16
    frame_dig 15
    frame_dig 14
    frame_dig 13
    frame_dig 12
    // contracts/abstracted_account.algo.ts:182
    // methodAllowed: false,
    intc_0 // 0
    // contracts/abstracted_account.algo.ts:183
    // methodHasCooldown: true,
    intc_1 // 1
    // contracts/abstracted_account.algo.ts:184
    // methodOnCooldown: true
    dup
    // contracts/abstracted_account.algo.ts:180-185
    // return {
    //   ...check,
    //   methodAllowed: false,
    //   methodHasCooldown: true,
    //   methodOnCooldown: true
    // }
    frame_dig 11
    frame_dig -6
    frame_dig -2
    frame_bury 10
    frame_bury 9
    frame_bury 8
    frame_bury 7
    frame_bury 6
    frame_bury 5
    frame_bury 4
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub

fullPluginCheck_after_if_else@4:
    // contracts/abstracted_account.algo.ts:189
    // methodAllowed: !check.hasMethodRestrictions,
    frame_dig 12
    dup
    !
    frame_bury 5
    // contracts/abstracted_account.algo.ts:190
    // methodHasCooldown: false,
    intc_0 // 0
    // contracts/abstracted_account.algo.ts:188-192
    // let methodCheck: MethodValidation = {
    //   methodAllowed: !check.hasMethodRestrictions,
    //   methodHasCooldown: false,
    //   methodOnCooldown: false
    // }
    frame_bury 6
    // contracts/abstracted_account.algo.ts:191
    // methodOnCooldown: false
    intc_0 // 0
    // contracts/abstracted_account.algo.ts:188-192
    // let methodCheck: MethodValidation = {
    //   methodAllowed: !check.hasMethodRestrictions,
    //   methodHasCooldown: false,
    //   methodOnCooldown: false
    // }
    frame_bury 7
    // contracts/abstracted_account.algo.ts:194
    // if (check.hasMethodRestrictions) {
    bz fullPluginCheck_after_if_else@6
    // contracts/abstracted_account.algo.ts:195
    // assert(methodIndex < methodOffsets.length, 'malformed methodOffsets');
    frame_dig -2
    intc_0 // 0
    extract_uint16
    frame_dig -1
    >
    assert // malformed methodOffsets
    // contracts/abstracted_account.algo.ts:196
    // methodCheck = this.methodCheck(txn, app, caller, methodOffsets[methodIndex].native);
    frame_dig -2
    extract 2 0
    frame_dig -1
    pushint 8 // 8
    *
    extract_uint64
    dup
    frame_bury 8
    // contracts/abstracted_account.algo.ts:318
    // assert(len(txn.appArgs(0)) === 4, 'invalid method signature length');
    frame_dig -5
    intc_0 // 0
    gtxnsas ApplicationArgs
    dup
    len
    dup
    pushint 4 // 4
    ==
    assert // invalid method signature length
    // contracts/abstracted_account.algo.ts:319
    // const selectorArg = new arc4.StaticBytes<4>(txn.appArgs(0));
    pushint 4 // 4
    ==
    assert // Length is 4
    // contracts/abstracted_account.algo.ts:321
    // const key = new PluginsKey({ application: new arc4.UintN64(app.id), allowedCaller: new arc4.Address(caller) });
    frame_dig -4
    itob
    frame_dig -3
    concat
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    swap
    concat
    dup
    frame_bury 2
    // contracts/abstracted_account.algo.ts:323
    // const methods = this.plugins(key).value.methods.copy()
    box_get
    assert // Box must have value
    dup
    intc_3 // 25
    extract_uint16
    dig 1
    len
    substring3
    dup
    frame_bury 1
    // contracts/abstracted_account.algo.ts:324
    // const allowedMethod = methods[offset].copy();
    extract 2 0
    uncover 2
    intc_2 // 20
    *
    dup
    frame_bury 4
    intc_2 // 20
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 0
    // contracts/abstracted_account.algo.ts:326
    // const hasCooldown = allowedMethod.cooldown.native > 0;
    dup
    pushint 4 // 4
    extract_uint64
    dup
    frame_bury 10
    dup
    intc_0 // 0
    >
    frame_bury 3
    // contracts/abstracted_account.algo.ts:327
    // const onCooldown = (Global.round - allowedMethod.lastCalled.native) < allowedMethod.cooldown.native;
    global Round
    dig 2
    pushint 12 // 12
    extract_uint64
    -
    >
    frame_bury 9
    // contracts/abstracted_account.algo.ts:329
    // if (allowedMethod.selector === selectorArg && (!hasCooldown || !onCooldown)) {
    extract 0 4 // on error: Index access is out of bounds
    ==
    bz fullPluginCheck_after_if_else@49
    frame_dig 10
    bz fullPluginCheck_if_body@46
    frame_dig 9
    bnz fullPluginCheck_after_if_else@49

fullPluginCheck_if_body@46:
    // contracts/abstracted_account.algo.ts:331
    // if (hasCooldown) {
    frame_dig 10
    bz fullPluginCheck_after_if_else@48
    // contracts/abstracted_account.algo.ts:332
    // methods[offset].lastCalled = new arc4.UintN64(Global.round);
    global Round
    itob
    frame_dig 0
    swap
    replace2 12
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    frame_dig 8
    >
    assert // Index access is out of bounds
    frame_dig 4
    pushint 2 // 2
    +
    uncover 2
    replace3
    // contracts/abstracted_account.algo.ts:334
    // ...this.plugins(key).value,
    frame_dig 2
    dup
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:333-336
    // this.plugins(key).value = new PluginInfo({
    //   ...this.plugins(key).value,
    //   methods: methods.copy()
    // });
    extract 0 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:334
    // ...this.plugins(key).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:333-336
    // this.plugins(key).value = new PluginInfo({
    //   ...this.plugins(key).value,
    //   methods: methods.copy()
    // });
    extract 8 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:334
    // ...this.plugins(key).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:333-336
    // this.plugins(key).value = new PluginInfo({
    //   ...this.plugins(key).value,
    //   methods: methods.copy()
    // });
    extract 16 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:334
    // ...this.plugins(key).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:333-336
    // this.plugins(key).value = new PluginInfo({
    //   ...this.plugins(key).value,
    //   methods: methods.copy()
    // });
    intc 4 // 192
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // contracts/abstracted_account.algo.ts:334
    // ...this.plugins(key).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:333-336
    // this.plugins(key).value = new PluginInfo({
    //   ...this.plugins(key).value,
    //   methods: methods.copy()
    // });
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec 4 // 0x001b
    concat
    uncover 2
    concat
    dig 1
    box_del
    pop
    box_put

fullPluginCheck_after_if_else@48:
    // contracts/abstracted_account.algo.ts:340
    // methodAllowed: true,
    intc_1 // 1
    frame_dig 9
    frame_bury 7
    frame_dig 3
    frame_bury 6
    frame_bury 5

fullPluginCheck_after_if_else@6:
    // contracts/abstracted_account.algo.ts:202
    // valid: check.valid && methodCheck.methodAllowed
    frame_dig 11
    bz fullPluginCheck_bool_false@41
    frame_dig 5
    bz fullPluginCheck_bool_false@41
    intc_1 // 1

fullPluginCheck_bool_merge@42:
    // contracts/abstracted_account.algo.ts:199-203
    // return {
    //   ...check,
    //   ...methodCheck,
    //   valid: check.valid && methodCheck.methodAllowed
    // }
    frame_dig 16
    frame_dig 15
    frame_dig 14
    frame_dig 13
    frame_dig 12
    frame_dig 5
    frame_dig 6
    frame_dig 7
    uncover 8
    frame_dig -6
    frame_dig -2
    frame_bury 10
    frame_bury 9
    frame_bury 8
    frame_bury 7
    frame_bury 6
    frame_bury 5
    frame_bury 4
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub

fullPluginCheck_bool_false@41:
    intc_0 // 0
    b fullPluginCheck_bool_merge@42

fullPluginCheck_after_if_else@49:
    // contracts/abstracted_account.algo.ts:347
    // methodAllowed: false,
    intc_0 // 0
    // contracts/abstracted_account.algo.ts:348
    // methodHasCooldown: true,
    intc_1 // 1
    // contracts/abstracted_account.algo.ts:349
    // methodOnCooldown: true
    dup
    frame_bury 7
    frame_bury 6
    frame_bury 5
    // contracts/abstracted_account.algo.ts:196
    // methodCheck = this.methodCheck(txn, app, caller, methodOffsets[methodIndex].native);
    b fullPluginCheck_after_if_else@6


// contracts/abstracted_account.algo.ts::AbstractedAccount.createApplication(controlledAddress: bytes, admin: bytes) -> void:
createApplication:
    // contracts/abstracted_account.algo.ts:370-371
    // @abimethod({ onCreate: 'require' })
    // createApplication(controlledAddress: arc4.Address, admin: arc4.Address) {
    proto 2 0
    // contracts/abstracted_account.algo.ts:376
    // Txn.sender === controlledAddress.native
    txn Sender
    frame_dig -2
    ==
    // contracts/abstracted_account.algo.ts:376-377
    // Txn.sender === controlledAddress.native
    // || Txn.sender === admin.native,
    bnz createApplication_bool_true@2
    // contracts/abstracted_account.algo.ts:377
    // || Txn.sender === admin.native,
    txn Sender
    frame_dig -1
    ==
    // contracts/abstracted_account.algo.ts:376-377
    // Txn.sender === controlledAddress.native
    // || Txn.sender === admin.native,
    bz createApplication_bool_false@3

createApplication_bool_true@2:
    intc_1 // 1

createApplication_bool_merge@4:
    // contracts/abstracted_account.algo.ts:375-379
    // assert(
    //   Txn.sender === controlledAddress.native
    //   || Txn.sender === admin.native,
    //   'Sender must be either controlledAddress or admin'
    // );
    assert // Sender must be either controlledAddress or admin
    // contracts/abstracted_account.algo.ts:380
    // assert(admin !== controlledAddress);
    frame_dig -1
    frame_dig -2
    !=
    assert
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    bytec_1 // "admin"
    // contracts/abstracted_account.algo.ts:382
    // this.admin.value = admin.native;
    frame_dig -1
    app_global_put
    // contracts/abstracted_account.algo.ts:383
    // this.controlledAddress.value = controlledAddress.native === Global.zeroAddress ? Global.currentApplicationAddress : controlledAddress.native;
    frame_dig -2
    global ZeroAddress
    ==
    bz createApplication_ternary_false@6
    global CurrentApplicationAddress

createApplication_ternary_merge@7:
    // contracts/abstracted_account.algo.ts:74
    // controlledAddress = GlobalState<Account>({ key: 'controlled_address' });
    bytec_2 // "controlled_address"
    // contracts/abstracted_account.algo.ts:383
    // this.controlledAddress.value = controlledAddress.native === Global.zeroAddress ? Global.currentApplicationAddress : controlledAddress.native;
    swap
    app_global_put
    retsub

createApplication_ternary_false@6:
    frame_dig -2
    b createApplication_ternary_merge@7

createApplication_bool_false@3:
    intc_0 // 0
    b createApplication_bool_merge@4


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_changeAdmin(newAdmin: bytes) -> void:
arc58_changeAdmin:
    // contracts/abstracted_account.algo.ts:391
    // arc58_changeAdmin(newAdmin: arc4.Address): void {
    proto 1 0
    // contracts/abstracted_account.algo.ts:393
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    txn Sender
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:393
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    ==
    assert // Sender must be the admin
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    bytec_1 // "admin"
    // contracts/abstracted_account.algo.ts:394
    // this.admin.value = newAdmin.native;
    frame_dig -1
    app_global_put
    retsub


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_pluginChangeAdmin(plugin: bytes, allowedCaller: bytes, newAdmin: bytes) -> void:
arc58_pluginChangeAdmin:
    // contracts/abstracted_account.algo.ts:405
    // arc58_pluginChangeAdmin(plugin: arc4.UintN64, allowedCaller: arc4.Address, newAdmin: arc4.Address): void {
    proto 3 0
    // contracts/abstracted_account.algo.ts:407
    // assert(Txn.sender === Application(plugin.native).address, 'Sender must be the plugin');
    txn Sender
    frame_dig -3
    btoi
    dup
    app_params_get AppAddress
    assert // application exists
    uncover 2
    ==
    assert // Sender must be the plugin
    // contracts/abstracted_account.algo.ts:74
    // controlledAddress = GlobalState<Account>({ key: 'controlled_address' });
    intc_0 // 0
    bytec_2 // "controlled_address"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:409
    // this.controlledAddress.value.authAddress === Application(plugin.native).address,
    acct_params_get AcctAuthAddr
    assert // account funded
    swap
    app_params_get AppAddress
    assert // application exists
    ==
    // contracts/abstracted_account.algo.ts:408-411
    // assert(
    //   this.controlledAddress.value.authAddress === Application(plugin.native).address,
    //   'This plugin is not in control of the account'
    // );
    assert // This plugin is not in control of the account
    // contracts/abstracted_account.algo.ts:413
    // const key = new PluginsKey({ application: plugin, allowedCaller: allowedCaller });
    frame_dig -3
    frame_dig -2
    concat
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    swap
    concat
    dup
    // contracts/abstracted_account.algo.ts:417
    // this.plugins(key).exists && this.plugins(key).value.adminPrivileges.native,
    box_len
    bury 1
    bz arc58_pluginChangeAdmin_bool_false@3
    frame_dig 0
    box_get
    assert // Box must have value
    intc 4 // 192
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    bz arc58_pluginChangeAdmin_bool_false@3
    intc_1 // 1

arc58_pluginChangeAdmin_bool_merge@4:
    // contracts/abstracted_account.algo.ts:416-419
    // assert(
    //   this.plugins(key).exists && this.plugins(key).value.adminPrivileges.native,
    //   'This plugin does not have admin privileges'
    // );
    assert // This plugin does not have admin privileges
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    bytec_1 // "admin"
    // contracts/abstracted_account.algo.ts:421
    // this.admin.value = newAdmin.native;
    frame_dig -1
    app_global_put
    retsub

arc58_pluginChangeAdmin_bool_false@3:
    intc_0 // 0
    b arc58_pluginChangeAdmin_bool_merge@4


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_getAdmin() -> bytes:
arc58_getAdmin:
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:430
    // return new arc4.Address(this.admin.value);
    retsub


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_verifyAuthAddr() -> void:
arc58_verifyAuthAddr:
    // contracts/abstracted_account.algo.ts:436
    // arc58_verifyAuthAddr(): void {
    proto 0 0
    // contracts/abstracted_account.algo.ts:74
    // controlledAddress = GlobalState<Account>({ key: 'controlled_address' });
    intc_0 // 0
    bytec_2 // "controlled_address"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:437
    // assert(this.controlledAddress.value.authAddress === this.getAuthAddr());
    acct_params_get AcctAuthAddr
    assert // account funded
    // contracts/abstracted_account.algo.ts:74
    // controlledAddress = GlobalState<Account>({ key: 'controlled_address' });
    intc_0 // 0
    bytec_2 // "controlled_address"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:358
    // return this.controlledAddress.value === Global.currentApplicationAddress
    global CurrentApplicationAddress
    ==
    // contracts/abstracted_account.algo.ts:358-360
    // return this.controlledAddress.value === Global.currentApplicationAddress
    //   ? Global.zeroAddress // contract controls itself
    //   : Global.currentApplicationAddress; // contract controls a different account
    bz arc58_verifyAuthAddr_ternary_false@3
    // contracts/abstracted_account.algo.ts:359
    // ? Global.zeroAddress // contract controls itself
    global ZeroAddress

arc58_verifyAuthAddr_ternary_merge@4:
    // contracts/abstracted_account.algo.ts:437
    // assert(this.controlledAddress.value.authAddress === this.getAuthAddr());
    frame_dig 0
    ==
    assert
    retsub

arc58_verifyAuthAddr_ternary_false@3:
    // contracts/abstracted_account.algo.ts:360
    // : Global.currentApplicationAddress; // contract controls a different account
    global CurrentApplicationAddress
    b arc58_verifyAuthAddr_ternary_merge@4


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyTo(address: bytes, flash: bytes) -> void:
arc58_rekeyTo:
    // contracts/abstracted_account.algo.ts:446
    // arc58_rekeyTo(address: arc4.Address, flash: arc4.Bool): void {
    proto 2 0
    pushbytes ""
    dup
    // contracts/abstracted_account.algo.ts:448
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    txn Sender
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:448
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    ==
    assert // Sender must be the admin
    // contracts/abstracted_account.algo.ts:450-458
    // itxn
    //   .payment({
    //     sender: this.controlledAddress.value,
    //     receiver: address.native,
    //     rekeyTo: address.native,
    //     note: 'rekeying abstracted account',
    //     fee: 0,
    //   })
    //   .submit();
    itxn_begin
    // contracts/abstracted_account.algo.ts:74
    // controlledAddress = GlobalState<Account>({ key: 'controlled_address' });
    intc_0 // 0
    bytec_2 // "controlled_address"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:455
    // note: 'rekeying abstracted account',
    pushbytes "rekeying abstracted account"
    itxn_field Note
    frame_dig -2
    itxn_field RekeyTo
    frame_dig -2
    itxn_field Receiver
    itxn_field Sender
    // contracts/abstracted_account.algo.ts:450-457
    // itxn
    //   .payment({
    //     sender: this.controlledAddress.value,
    //     receiver: address.native,
    //     rekeyTo: address.native,
    //     note: 'rekeying abstracted account',
    //     fee: 0,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // contracts/abstracted_account.algo.ts:456
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // contracts/abstracted_account.algo.ts:450-458
    // itxn
    //   .payment({
    //     sender: this.controlledAddress.value,
    //     receiver: address.native,
    //     rekeyTo: address.native,
    //     note: 'rekeying abstracted account',
    //     fee: 0,
    //   })
    //   .submit();
    itxn_submit
    // contracts/abstracted_account.algo.ts:460
    // if (flash.native) this.assertRekeysBack();
    frame_dig -1
    intc_0 // 0
    getbit
    bz arc58_rekeyTo_after_if_else@3
    // contracts/abstracted_account.algo.ts:126
    // let rekeysBack = false;
    intc_0 // 0
    frame_bury 1
    // contracts/abstracted_account.algo.ts:127
    // for (let i: uint64 = (Txn.groupIndex + 1); i < Global.groupSize; i += 1) {
    txn GroupIndex
    intc_1 // 1
    +
    frame_bury 0

arc58_rekeyTo_while_top@5:
    // contracts/abstracted_account.algo.ts:127
    // for (let i: uint64 = (Txn.groupIndex + 1); i < Global.groupSize; i += 1) {
    frame_dig 0
    global GroupSize
    <
    bz arc58_rekeyTo_block@10
    // contracts/abstracted_account.algo.ts:130
    // if (this.txnRekeysBack(txn)) {
    frame_dig 0
    callsub txnRekeysBack
    bz arc58_rekeyTo_after_if_else@8
    // contracts/abstracted_account.algo.ts:131
    // rekeysBack = true;
    intc_1 // 1
    frame_bury 1

arc58_rekeyTo_block@10:
    // contracts/abstracted_account.algo.ts:136
    // assert(rekeysBack, 'rekey back not found');
    frame_dig 1
    assert // rekey back not found

arc58_rekeyTo_after_if_else@3:
    retsub

arc58_rekeyTo_after_if_else@8:
    // contracts/abstracted_account.algo.ts:127
    // for (let i: uint64 = (Txn.groupIndex + 1); i < Global.groupSize; i += 1) {
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b arc58_rekeyTo_while_top@5


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_canCall(plugin: bytes, address: bytes, method: bytes) -> uint64:
arc58_canCall:
    // contracts/abstracted_account.algo.ts:470-471
    // @abimethod({ readonly: true })
    // arc58_canCall(plugin: arc4.UintN64, address: arc4.Address, method: arc4.StaticBytes<4>): boolean {
    proto 3 1
    // contracts/abstracted_account.algo.ts:472
    // const globalAllowed = this.pluginCallAllowed(plugin, new arc4.Address(Global.zeroAddress), method);
    frame_dig -3
    global ZeroAddress
    frame_dig -1
    callsub pluginCallAllowed
    // contracts/abstracted_account.algo.ts:473
    // if (globalAllowed) return true;
    bz arc58_canCall_after_if_else@2
    intc_1 // 1
    retsub

arc58_canCall_after_if_else@2:
    // contracts/abstracted_account.algo.ts:475
    // return this.pluginCallAllowed(plugin, address, method);
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub pluginCallAllowed
    retsub


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyToPlugin(plugin: bytes, methodOffsets: bytes) -> bytes:
arc58_rekeyToPlugin:
    // contracts/abstracted_account.algo.ts:487
    // arc58_rekeyToPlugin(plugin: arc4.UintN64, methodOffsets: arc4.DynamicArray<arc4.UintN64>): void {
    proto 2 1
    intc_0 // 0
    pushbytes ""
    dupn 7
    // contracts/abstracted_account.algo.ts:489
    // this.assertValidGroup(Application(plugin.native), methodOffsets);
    frame_dig -2
    btoi
    dup
    // contracts/abstracted_account.algo.ts:217
    // application: new arc4.UintN64(plugin.id),
    itob
    // contracts/abstracted_account.algo.ts:216-219
    // const gKey = new PluginsKey({
    //   application: new arc4.UintN64(plugin.id),
    //   allowedCaller: new arc4.Address(Global.zeroAddress)
    // });
    dup
    // contracts/abstracted_account.algo.ts:218
    // allowedCaller: new arc4.Address(Global.zeroAddress)
    global ZeroAddress
    // contracts/abstracted_account.algo.ts:216-219
    // const gKey = new PluginsKey({
    //   application: new arc4.UintN64(plugin.id),
    //   allowedCaller: new arc4.Address(Global.zeroAddress)
    // });
    concat
    // contracts/abstracted_account.algo.ts:221
    // const globalCheck = this.pluginCheck(gKey);
    callsub pluginCheck
    cover 7
    cover 6
    pop
    cover 4
    pop
    cover 2
    swap
    // contracts/abstracted_account.algo.ts:225
    // allowedCaller: new arc4.Address(Txn.sender)
    txn Sender
    // contracts/abstracted_account.algo.ts:223-226
    // const lKey = new PluginsKey({
    //   application: new arc4.UintN64(plugin.id),
    //   allowedCaller: new arc4.Address(Txn.sender)
    // });
    concat
    // contracts/abstracted_account.algo.ts:228
    // const localCheck = this.pluginCheck(lKey);
    callsub pluginCheck
    cover 7
    cover 6
    pop
    cover 4
    pop
    cover 2
    swap
    // contracts/abstracted_account.algo.ts:230
    // assert(globalCheck.exists || localCheck.exists, 'plugin not found');
    bnz arc58_rekeyToPlugin_bool_true@6
    frame_dig 18
    bz arc58_rekeyToPlugin_bool_false@7

arc58_rekeyToPlugin_bool_true@6:
    intc_1 // 1

arc58_rekeyToPlugin_bool_merge@8:
    // contracts/abstracted_account.algo.ts:230
    // assert(globalCheck.exists || localCheck.exists, 'plugin not found');
    assert // plugin not found
    // contracts/abstracted_account.algo.ts:231
    // assert(!globalCheck.expired || !localCheck.expired, 'plugin expired');
    frame_dig 13
    bz arc58_rekeyToPlugin_bool_true@10
    frame_dig 17
    bnz arc58_rekeyToPlugin_bool_false@11

arc58_rekeyToPlugin_bool_true@10:
    intc_1 // 1

arc58_rekeyToPlugin_bool_merge@12:
    // contracts/abstracted_account.algo.ts:231
    // assert(!globalCheck.expired || !localCheck.expired, 'plugin expired');
    assert // plugin expired
    // contracts/abstracted_account.algo.ts:232
    // assert(!globalCheck.onCooldown || !localCheck.onCooldown, 'plugin on cooldown');
    frame_dig 12
    bz arc58_rekeyToPlugin_bool_true@14
    frame_dig 16
    bnz arc58_rekeyToPlugin_bool_false@15

arc58_rekeyToPlugin_bool_true@14:
    intc_1 // 1

arc58_rekeyToPlugin_bool_merge@16:
    // contracts/abstracted_account.algo.ts:232
    // assert(!globalCheck.onCooldown || !localCheck.onCooldown, 'plugin on cooldown');
    assert // plugin on cooldown
    // contracts/abstracted_account.algo.ts:237
    // assert(globalCheck.valid || localCheck.valid, 'invalid plugin call');
    frame_dig 11
    bnz arc58_rekeyToPlugin_bool_true@18
    frame_dig 15
    bz arc58_rekeyToPlugin_bool_false@19

arc58_rekeyToPlugin_bool_true@18:
    intc_1 // 1

arc58_rekeyToPlugin_bool_merge@20:
    // contracts/abstracted_account.algo.ts:237
    // assert(globalCheck.valid || localCheck.valid, 'invalid plugin call');
    assert // invalid plugin call
    // contracts/abstracted_account.algo.ts:239
    // let rekeysBack = false;
    intc_0 // 0
    frame_bury 8
    // contracts/abstracted_account.algo.ts:240
    // let methodIndex: uint64 = 0;
    intc_0 // 0
    frame_bury 7
    // contracts/abstracted_account.algo.ts:242
    // for (let i: uint64 = (Txn.groupIndex + 1); i < Global.groupSize; i += 1) {
    txn GroupIndex
    intc_1 // 1
    +
    frame_bury 3
    frame_dig -1
    dup
    frame_bury 0
    frame_bury -1

arc58_rekeyToPlugin_while_top@21:
    // contracts/abstracted_account.algo.ts:242
    // for (let i: uint64 = (Txn.groupIndex + 1); i < Global.groupSize; i += 1) {
    frame_dig 3
    global GroupSize
    <
    bz arc58_rekeyToPlugin_block@43
    // contracts/abstracted_account.algo.ts:245
    // if (this.txnRekeysBack(txn)) {
    frame_dig 3
    callsub txnRekeysBack
    bz arc58_rekeyToPlugin_after_if_else@24
    // contracts/abstracted_account.algo.ts:246
    // rekeysBack = true;
    intc_1 // 1
    frame_bury 8

arc58_rekeyToPlugin_block@43:
    // contracts/abstracted_account.algo.ts:304
    // assert(rekeysBack, 'no rekey back found');
    frame_dig 8
    assert // no rekey back found
    // contracts/abstracted_account.algo.ts:491-499
    // itxn
    //   .payment({
    //     sender: this.controlledAddress.value,
    //     receiver: this.controlledAddress.value,
    //     rekeyTo: Application(plugin.native).address,
    //     note: 'rekeying to plugin app',
    //     fee: 0,
    //   })
    //   .submit();
    itxn_begin
    // contracts/abstracted_account.algo.ts:74
    // controlledAddress = GlobalState<Account>({ key: 'controlled_address' });
    intc_0 // 0
    bytec_2 // "controlled_address"
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 0
    bytec_2 // "controlled_address"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:495
    // rekeyTo: Application(plugin.native).address,
    frame_dig 9
    app_params_get AppAddress
    assert // application exists
    // contracts/abstracted_account.algo.ts:496
    // note: 'rekeying to plugin app',
    pushbytes "rekeying to plugin app"
    itxn_field Note
    itxn_field RekeyTo
    itxn_field Receiver
    itxn_field Sender
    // contracts/abstracted_account.algo.ts:491-498
    // itxn
    //   .payment({
    //     sender: this.controlledAddress.value,
    //     receiver: this.controlledAddress.value,
    //     rekeyTo: Application(plugin.native).address,
    //     note: 'rekeying to plugin app',
    //     fee: 0,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // contracts/abstracted_account.algo.ts:497
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // contracts/abstracted_account.algo.ts:491-499
    // itxn
    //   .payment({
    //     sender: this.controlledAddress.value,
    //     receiver: this.controlledAddress.value,
    //     rekeyTo: Application(plugin.native).address,
    //     note: 'rekeying to plugin app',
    //     fee: 0,
    //   })
    //   .submit();
    itxn_submit
    retsub

arc58_rekeyToPlugin_after_if_else@24:
    // contracts/abstracted_account.algo.ts:250
    // if (txn.type !== TransactionType.ApplicationCall) {
    frame_dig 3
    gtxns TypeEnum
    pushint 6 // 6
    !=
    bz arc58_rekeyToPlugin_after_if_else@26
    frame_dig 0

arc58_rekeyToPlugin_block@41:
    // contracts/abstracted_account.algo.ts:242
    // for (let i: uint64 = (Txn.groupIndex + 1); i < Global.groupSize; i += 1) {
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    frame_bury 0
    b arc58_rekeyToPlugin_while_top@21

arc58_rekeyToPlugin_after_if_else@26:
    // contracts/abstracted_account.algo.ts:254
    // assert(txn.appId.id === plugin.id, 'cannot call other apps during plugin rekey');
    frame_dig 3
    dup
    gtxns ApplicationID
    frame_dig 9
    dup
    cover 3
    ==
    assert // cannot call other apps during plugin rekey
    // contracts/abstracted_account.algo.ts:256
    // assert(txn.onCompletion === arc4.OnCompleteAction.NoOp, 'invalid onComplete');
    dup
    gtxns OnCompletion
    !
    assert // invalid onComplete
    // contracts/abstracted_account.algo.ts:259
    // assert(txn.numAppArgs > 1, 'no app id provided');
    dup
    gtxns NumAppArgs
    intc_1 // 1
    >
    assert // no app id provided
    // contracts/abstracted_account.algo.ts:260
    // assert(Application(btoi(txn.appArgs(1))) === Global.currentApplicationId, 'wrong app id');
    dup
    intc_1 // 1
    gtxnsas ApplicationArgs
    btoi
    global CurrentApplicationID
    ==
    assert // wrong app id
    // contracts/abstracted_account.algo.ts:266
    // Global.zeroAddress,
    global ZeroAddress
    // contracts/abstracted_account.algo.ts:262-269
    // const globalLoopCheck = this.fullPluginCheck(
    //   gKey,
    //   txn,
    //   plugin,
    //   Global.zeroAddress,
    //   methodOffsets,
    //   methodIndex
    // );
    frame_dig 10
    dig 2
    dig 4
    uncover 3
    frame_dig -1
    frame_dig 7
    dup
    cover 8
    callsub fullPluginCheck
    frame_bury -1
    frame_bury 10
    frame_bury 2
    cover 10
    popn 4
    frame_bury 1
    popn 2
    // contracts/abstracted_account.algo.ts:275
    // Txn.sender,
    txn Sender
    // contracts/abstracted_account.algo.ts:271-278
    // const localLoopCheck = this.fullPluginCheck(
    //   lKey,
    //   txn,
    //   plugin,
    //   Txn.sender,
    //   methodOffsets,
    //   methodIndex
    // );
    frame_dig 14
    uncover 2
    uncover 3
    uncover 3
    frame_dig -1
    uncover 5
    callsub fullPluginCheck
    frame_bury -1
    frame_bury 14
    frame_bury 6
    frame_bury 5
    popn 4
    frame_bury 4
    popn 2
    // contracts/abstracted_account.algo.ts:280
    // assert(!globalLoopCheck.methodOnCooldown || !localLoopCheck.methodOnCooldown, 'method on cooldown');
    bz arc58_rekeyToPlugin_bool_true@28
    frame_dig 5
    bnz arc58_rekeyToPlugin_bool_false@29

arc58_rekeyToPlugin_bool_true@28:
    intc_1 // 1

arc58_rekeyToPlugin_bool_merge@30:
    // contracts/abstracted_account.algo.ts:280
    // assert(!globalLoopCheck.methodOnCooldown || !localLoopCheck.methodOnCooldown, 'method on cooldown');
    assert // method on cooldown
    // contracts/abstracted_account.algo.ts:281
    // assert(globalLoopCheck.valid || localLoopCheck.valid, 'not allowed');
    frame_dig 2
    bnz arc58_rekeyToPlugin_bool_true@32
    frame_dig 6
    bz arc58_rekeyToPlugin_bool_false@33

arc58_rekeyToPlugin_bool_true@32:
    intc_1 // 1

arc58_rekeyToPlugin_bool_merge@34:
    // contracts/abstracted_account.algo.ts:281
    // assert(globalLoopCheck.valid || localLoopCheck.valid, 'not allowed');
    assert // not allowed
    // contracts/abstracted_account.algo.ts:287
    // if (globalLoopCheck.valid && globalLoopCheck.hasCooldown) {
    frame_dig 2
    bz arc58_rekeyToPlugin_else_body@37
    frame_dig 1
    bz arc58_rekeyToPlugin_else_body@37
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    frame_dig 10
    concat
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dup
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dup
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:288-292
    // this.plugins(gKey).value = new PluginInfo({
    //   ...this.plugins(gKey).value,
    //   lastCalled: new arc4.UintN64(Global.round),
    //   methods: this.plugins(gKey).value.methods.copy(),
    // });
    extract 0 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:288-292
    // this.plugins(gKey).value = new PluginInfo({
    //   ...this.plugins(gKey).value,
    //   lastCalled: new arc4.UintN64(Global.round),
    //   methods: this.plugins(gKey).value.methods.copy(),
    // });
    extract 8 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:290
    // lastCalled: new arc4.UintN64(Global.round),
    global Round
    itob
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:288-292
    // this.plugins(gKey).value = new PluginInfo({
    //   ...this.plugins(gKey).value,
    //   lastCalled: new arc4.UintN64(Global.round),
    //   methods: this.plugins(gKey).value.methods.copy(),
    // });
    intc 4 // 192
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:291
    // methods: this.plugins(gKey).value.methods.copy(),
    dig 4
    box_get
    assert // Box must have value
    dup
    intc_3 // 25
    extract_uint16
    dig 1
    len
    substring3
    // contracts/abstracted_account.algo.ts:289
    // ...this.plugins(gKey).value,
    dig 5
    box_get
    bury 1
    assert // Box must have value
    dig 5
    box_get
    bury 1
    assert // Box must have value
    dig 5
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:288-292
    // this.plugins(gKey).value = new PluginInfo({
    //   ...this.plugins(gKey).value,
    //   lastCalled: new arc4.UintN64(Global.round),
    //   methods: this.plugins(gKey).value.methods.copy(),
    // });
    uncover 4
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    bytec 4 // 0x001b
    concat
    swap
    concat
    dig 1
    box_del
    pop
    box_put

arc58_rekeyToPlugin_after_if_else@40:
    // contracts/abstracted_account.algo.ts:301
    // methodIndex += 1;
    frame_dig 7
    intc_1 // 1
    +
    frame_bury 7
    frame_dig -1
    b arc58_rekeyToPlugin_block@41

arc58_rekeyToPlugin_else_body@37:
    // contracts/abstracted_account.algo.ts:293
    // } else if (localLoopCheck.valid && localLoopCheck.hasCooldown) {
    frame_dig 6
    bz arc58_rekeyToPlugin_after_if_else@40
    frame_dig 4
    bz arc58_rekeyToPlugin_after_if_else@40
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    frame_dig 14
    concat
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dup
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dup
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:294-298
    // this.plugins(lKey).value = new PluginInfo({
    //   ...this.plugins(lKey).value,
    //   lastCalled: new arc4.UintN64(Global.round),
    //   methods: this.plugins(lKey).value.methods.copy(),
    // })
    extract 0 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 1
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 1
    box_get
    bury 1
    assert // Box must have value
    dig 1
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:294-298
    // this.plugins(lKey).value = new PluginInfo({
    //   ...this.plugins(lKey).value,
    //   lastCalled: new arc4.UintN64(Global.round),
    //   methods: this.plugins(lKey).value.methods.copy(),
    // })
    extract 8 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    dig 2
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:296
    // lastCalled: new arc4.UintN64(Global.round),
    global Round
    itob
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 3
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    bury 1
    assert // Box must have value
    dig 3
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:294-298
    // this.plugins(lKey).value = new PluginInfo({
    //   ...this.plugins(lKey).value,
    //   lastCalled: new arc4.UintN64(Global.round),
    //   methods: this.plugins(lKey).value.methods.copy(),
    // })
    intc 4 // 192
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    dig 4
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:297
    // methods: this.plugins(lKey).value.methods.copy(),
    dig 4
    box_get
    assert // Box must have value
    dup
    intc_3 // 25
    extract_uint16
    dig 1
    len
    substring3
    // contracts/abstracted_account.algo.ts:295
    // ...this.plugins(lKey).value,
    dig 5
    box_get
    bury 1
    assert // Box must have value
    dig 5
    box_get
    bury 1
    assert // Box must have value
    dig 5
    box_get
    bury 1
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:294-298
    // this.plugins(lKey).value = new PluginInfo({
    //   ...this.plugins(lKey).value,
    //   lastCalled: new arc4.UintN64(Global.round),
    //   methods: this.plugins(lKey).value.methods.copy(),
    // })
    uncover 4
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    bytec 4 // 0x001b
    concat
    swap
    concat
    dig 1
    box_del
    pop
    box_put
    b arc58_rekeyToPlugin_after_if_else@40

arc58_rekeyToPlugin_bool_false@33:
    intc_0 // 0
    b arc58_rekeyToPlugin_bool_merge@34

arc58_rekeyToPlugin_bool_false@29:
    intc_0 // 0
    b arc58_rekeyToPlugin_bool_merge@30

arc58_rekeyToPlugin_bool_false@19:
    intc_0 // 0
    b arc58_rekeyToPlugin_bool_merge@20

arc58_rekeyToPlugin_bool_false@15:
    intc_0 // 0
    b arc58_rekeyToPlugin_bool_merge@16

arc58_rekeyToPlugin_bool_false@11:
    intc_0 // 0
    b arc58_rekeyToPlugin_bool_merge@12

arc58_rekeyToPlugin_bool_false@7:
    intc_0 // 0
    b arc58_rekeyToPlugin_bool_merge@8


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyToNamedPlugin(name: bytes, methodOffsets: bytes) -> void:
arc58_rekeyToNamedPlugin:
    // contracts/abstracted_account.algo.ts:511
    // arc58_rekeyToNamedPlugin(name: string, methodOffsets: arc4.DynamicArray<arc4.UintN64>): void {
    proto 2 0
    // contracts/abstracted_account.algo.ts:84
    // namedPlugins = BoxMap<string, PluginsKey>({ keyPrefix: 'n' });
    bytec 6 // "n"
    frame_dig -2
    concat
    // contracts/abstracted_account.algo.ts:512
    // this.arc58_rekeyToPlugin(this.namedPlugins(name).value.application, methodOffsets);
    box_get
    assert // Box must have value
    extract 0 8 // on error: Index access is out of bounds
    frame_dig -1
    callsub arc58_rekeyToPlugin
    frame_bury -1
    retsub


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_addPlugin(app: bytes, allowedCaller: bytes, lastValidRound: bytes, cooldown: bytes, adminPrivileges: bytes, methods: bytes) -> void:
arc58_addPlugin:
    // contracts/abstracted_account.algo.ts:527-534
    // arc58_addPlugin(
    //   app: arc4.UintN64,
    //   allowedCaller: arc4.Address,
    //   lastValidRound: arc4.UintN64,
    //   cooldown: arc4.UintN64,
    //   adminPrivileges: arc4.Bool,
    //   methods: arc4.DynamicArray<MethodRestriction>,
    // ): void {
    proto 6 0
    // contracts/abstracted_account.algo.ts:536
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    txn Sender
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:536
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    ==
    assert // Sender must be the admin
    // contracts/abstracted_account.algo.ts:537
    // const key = new PluginsKey({ application: app, allowedCaller: allowedCaller });
    frame_dig -6
    frame_dig -5
    concat
    // contracts/abstracted_account.algo.ts:539
    // let methodInfos = new arc4.DynamicArray<MethodInfo>();
    bytec 9 // 0x0000
    // contracts/abstracted_account.algo.ts:540
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    intc_0 // 0

arc58_addPlugin_while_top@1:
    // contracts/abstracted_account.algo.ts:540
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig 2
    >
    bz arc58_addPlugin_after_while@3
    // contracts/abstracted_account.algo.ts:541-545
    // methodInfos.push(new MethodInfo({
    //   selector: methods[i].selector,
    //   cooldown: methods[i].cooldown,
    //   lastCalled: new arc4.UintN64(),
    // }));
    frame_dig 1
    extract 2 0
    // contracts/abstracted_account.algo.ts:542
    // selector: methods[i].selector,
    frame_dig -1
    extract 2 0
    frame_dig 2
    dup
    cover 3
    pushint 12 // 12
    *
    pushint 12 // 12
    extract3 // on error: Index access is out of bounds
    dup
    extract 0 4 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:543
    // cooldown: methods[i].cooldown,
    swap
    extract 4 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:541-545
    // methodInfos.push(new MethodInfo({
    //   selector: methods[i].selector,
    //   cooldown: methods[i].cooldown,
    //   lastCalled: new arc4.UintN64(),
    // }));
    concat
    // contracts/abstracted_account.algo.ts:544
    // lastCalled: new arc4.UintN64(),
    bytec 5 // 0x0000000000000000
    // contracts/abstracted_account.algo.ts:541-545
    // methodInfos.push(new MethodInfo({
    //   selector: methods[i].selector,
    //   cooldown: methods[i].cooldown,
    //   lastCalled: new arc4.UintN64(),
    // }));
    concat
    concat
    dup
    len
    intc_2 // 20
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    // contracts/abstracted_account.algo.ts:540
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    intc_1 // 1
    +
    frame_bury 2
    b arc58_addPlugin_while_top@1

arc58_addPlugin_after_while@3:
    // contracts/abstracted_account.algo.ts:548-554
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: lastValidRound,
    //   cooldown: cooldown,
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: adminPrivileges,
    //   methods: methodInfos.copy(),
    // });
    frame_dig -4
    frame_dig -3
    concat
    // contracts/abstracted_account.algo.ts:551
    // lastCalled: new arc4.UintN64(),
    bytec 5 // 0x0000000000000000
    // contracts/abstracted_account.algo.ts:548-554
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: lastValidRound,
    //   cooldown: cooldown,
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: adminPrivileges,
    //   methods: methodInfos.copy(),
    // });
    concat
    frame_dig -2
    concat
    bytec 4 // 0x001b
    concat
    frame_dig 1
    concat
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    frame_dig 0
    concat
    // contracts/abstracted_account.algo.ts:548-554
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: lastValidRound,
    //   cooldown: cooldown,
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: adminPrivileges,
    //   methods: methodInfos.copy(),
    // });
    dup
    box_del
    pop
    swap
    box_put
    retsub


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_removePlugin(app: bytes, allowedCaller: bytes) -> void:
arc58_removePlugin:
    // contracts/abstracted_account.algo.ts:565
    // arc58_removePlugin(app: arc4.UintN64, allowedCaller: arc4.Address): void {
    proto 2 0
    // contracts/abstracted_account.algo.ts:567
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    txn Sender
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:567
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    ==
    assert // Sender must be the admin
    // contracts/abstracted_account.algo.ts:569
    // const key = new PluginsKey({ application: app, allowedCaller: allowedCaller });
    frame_dig -2
    frame_dig -1
    concat
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    swap
    concat
    // contracts/abstracted_account.algo.ts:570
    // assert(this.plugins(key).exists, 'plugin does not exist');
    dup
    box_len
    bury 1
    assert // plugin does not exist
    // contracts/abstracted_account.algo.ts:571
    // this.plugins(key).delete();
    box_del
    pop
    retsub


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_addNamedPlugin(name: bytes, app: bytes, allowedCaller: bytes, lastValidRound: bytes, cooldown: bytes, adminPrivileges: bytes, methods: bytes) -> void:
arc58_addNamedPlugin:
    // contracts/abstracted_account.algo.ts:587-595
    // arc58_addNamedPlugin(
    //   name: arc4.Str,
    //   app: arc4.UintN64,
    //   allowedCaller: arc4.Address,
    //   lastValidRound: arc4.UintN64,
    //   cooldown: arc4.UintN64,
    //   adminPrivileges: arc4.Bool,
    //   methods: arc4.DynamicArray<MethodRestriction>,
    // ): void {
    proto 7 0
    // contracts/abstracted_account.algo.ts:597
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    txn Sender
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:597
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    ==
    assert // Sender must be the admin
    // contracts/abstracted_account.algo.ts:598
    // assert(!this.namedPlugins(name.native).exists);
    frame_dig -7
    extract 2 0
    // contracts/abstracted_account.algo.ts:84
    // namedPlugins = BoxMap<string, PluginsKey>({ keyPrefix: 'n' });
    bytec 6 // "n"
    swap
    concat
    // contracts/abstracted_account.algo.ts:598
    // assert(!this.namedPlugins(name.native).exists);
    dup
    box_len
    bury 1
    !
    assert
    // contracts/abstracted_account.algo.ts:600
    // const key = new PluginsKey({ application: app, allowedCaller: allowedCaller });
    frame_dig -6
    frame_dig -5
    concat
    dup
    cover 2
    // contracts/abstracted_account.algo.ts:601
    // this.namedPlugins(name.native).value = key.copy();
    box_put
    // contracts/abstracted_account.algo.ts:603
    // let methodInfos = new arc4.DynamicArray<MethodInfo>();
    bytec 9 // 0x0000
    // contracts/abstracted_account.algo.ts:604
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    intc_0 // 0

arc58_addNamedPlugin_while_top@1:
    // contracts/abstracted_account.algo.ts:604
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig 2
    >
    bz arc58_addNamedPlugin_after_while@3
    // contracts/abstracted_account.algo.ts:605-609
    // methodInfos.push(new MethodInfo({
    //   selector: methods[i].selector,
    //   cooldown: methods[i].cooldown,
    //   lastCalled: new arc4.UintN64(),
    // }));
    frame_dig 1
    extract 2 0
    // contracts/abstracted_account.algo.ts:606
    // selector: methods[i].selector,
    frame_dig -1
    extract 2 0
    frame_dig 2
    dup
    cover 3
    pushint 12 // 12
    *
    pushint 12 // 12
    extract3 // on error: Index access is out of bounds
    dup
    extract 0 4 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:607
    // cooldown: methods[i].cooldown,
    swap
    extract 4 8 // on error: Index access is out of bounds
    // contracts/abstracted_account.algo.ts:605-609
    // methodInfos.push(new MethodInfo({
    //   selector: methods[i].selector,
    //   cooldown: methods[i].cooldown,
    //   lastCalled: new arc4.UintN64(),
    // }));
    concat
    // contracts/abstracted_account.algo.ts:608
    // lastCalled: new arc4.UintN64(),
    bytec 5 // 0x0000000000000000
    // contracts/abstracted_account.algo.ts:605-609
    // methodInfos.push(new MethodInfo({
    //   selector: methods[i].selector,
    //   cooldown: methods[i].cooldown,
    //   lastCalled: new arc4.UintN64(),
    // }));
    concat
    concat
    dup
    len
    intc_2 // 20
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    // contracts/abstracted_account.algo.ts:604
    // for (let i: uint64 = 0; i < methods.length; i += 1) {
    intc_1 // 1
    +
    frame_bury 2
    b arc58_addNamedPlugin_while_top@1

arc58_addNamedPlugin_after_while@3:
    // contracts/abstracted_account.algo.ts:612-618
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: lastValidRound,
    //   cooldown: cooldown,
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: adminPrivileges,
    //   methods: methodInfos.copy(),
    // })
    frame_dig -4
    frame_dig -3
    concat
    // contracts/abstracted_account.algo.ts:615
    // lastCalled: new arc4.UintN64(),
    bytec 5 // 0x0000000000000000
    // contracts/abstracted_account.algo.ts:612-618
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: lastValidRound,
    //   cooldown: cooldown,
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: adminPrivileges,
    //   methods: methodInfos.copy(),
    // })
    concat
    frame_dig -2
    concat
    bytec 4 // 0x001b
    concat
    frame_dig 1
    concat
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    frame_dig 0
    concat
    // contracts/abstracted_account.algo.ts:612-618
    // this.plugins(key).value = new PluginInfo({
    //   lastValidRound: lastValidRound,
    //   cooldown: cooldown,
    //   lastCalled: new arc4.UintN64(),
    //   adminPrivileges: adminPrivileges,
    //   methods: methodInfos.copy(),
    // })
    dup
    box_del
    pop
    swap
    box_put
    retsub


// contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_removeNamedPlugin(name: bytes) -> void:
arc58_removeNamedPlugin:
    // contracts/abstracted_account.algo.ts:627
    // arc58_removeNamedPlugin(name: arc4.Str): void {
    proto 1 0
    // contracts/abstracted_account.algo.ts:629
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    txn Sender
    // contracts/abstracted_account.algo.ts:71
    // admin = GlobalState<Account>({ key: 'admin' });
    intc_0 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/abstracted_account.algo.ts:629
    // assert(Txn.sender === this.admin.value, 'Sender must be the admin');
    ==
    assert // Sender must be the admin
    // contracts/abstracted_account.algo.ts:630
    // assert(this.namedPlugins(name.native).exists, 'plugin does not exist');
    frame_dig -1
    extract 2 0
    // contracts/abstracted_account.algo.ts:84
    // namedPlugins = BoxMap<string, PluginsKey>({ keyPrefix: 'n' });
    bytec 6 // "n"
    swap
    concat
    // contracts/abstracted_account.algo.ts:630
    // assert(this.namedPlugins(name.native).exists, 'plugin does not exist');
    dup
    box_len
    bury 1
    assert // plugin does not exist
    // contracts/abstracted_account.algo.ts:631
    // const app = this.namedPlugins(name.native).value.copy();
    dup
    box_get
    assert // Box must have value
    // contracts/abstracted_account.algo.ts:79
    // plugins = BoxMap<PluginsKey, PluginInfo>({ keyPrefix: 'p' });
    bytec_0 // "p"
    swap
    concat
    // contracts/abstracted_account.algo.ts:632
    // assert(this.plugins(app).exists, 'plugin does not exist');
    dup
    box_len
    bury 1
    assert // plugin does not exist
    // contracts/abstracted_account.algo.ts:634
    // this.namedPlugins(name.native).delete();
    swap
    box_del
    pop
    // contracts/abstracted_account.algo.ts:635
    // this.plugins(app).delete();
    box_del
    pop
    retsub
