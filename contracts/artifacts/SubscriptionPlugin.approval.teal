#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "lastPayment"
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/plugins/subscription_plugin.algo.ts:12
    // lastPayment = GlobalState<uint64>({ initialValue: 0 });
    bytec_0 // "lastPayment"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // contracts/plugins/subscription_plugin.algo.ts:10
    // export class SubscriptionPlugin extends Contract {
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0xb8447b36 0xef4ab70e // method "createApplication()void", method "makePayment(uint64,address)void"
    txna ApplicationArgs 0
    match main_createApplication_route@5 main_makePayment_route@6

main_after_if_else@10:
    // contracts/plugins/subscription_plugin.algo.ts:10
    // export class SubscriptionPlugin extends Contract {
    intc_0 // 0
    return

main_makePayment_route@6:
    // contracts/plugins/subscription_plugin.algo.ts:17-21
    // makePayment(
    //   sender: arc4.UintN64,
    //   // eslint-disable-next-line no-unused-vars
    //   _acctRef: arc4.Address
    // ): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/plugins/subscription_plugin.algo.ts:10
    // export class SubscriptionPlugin extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // contracts/plugins/subscription_plugin.algo.ts:17-21
    // makePayment(
    //   sender: arc4.UintN64,
    //   // eslint-disable-next-line no-unused-vars
    //   _acctRef: arc4.Address
    // ): void {
    callsub makePayment
    intc_1 // 1
    return

main_createApplication_route@5:
    // contracts/plugins/subscription_plugin.algo.ts:14
    // @abimethod({ onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/plugins/subscription_plugin.algo.ts::SubscriptionPlugin.makePayment(sender: bytes, _acctRef: bytes) -> void:
makePayment:
    // contracts/plugins/subscription_plugin.algo.ts:17-21
    // makePayment(
    //   sender: arc4.UintN64,
    //   // eslint-disable-next-line no-unused-vars
    //   _acctRef: arc4.Address
    // ): void {
    proto 2 0
    // contracts/plugins/subscription_plugin.algo.ts:22
    // assert(Global.round - this.lastPayment.value > FREQUENCY);
    global Round
    // contracts/plugins/subscription_plugin.algo.ts:12
    // lastPayment = GlobalState<uint64>({ initialValue: 0 });
    intc_0 // 0
    bytec_0 // "lastPayment"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/plugins/subscription_plugin.algo.ts:22
    // assert(Global.round - this.lastPayment.value > FREQUENCY);
    -
    // contracts/plugins/subscription_plugin.algo.ts:6
    // const FREQUENCY: uint64 = 1;
    intc_1 // 1
    // contracts/plugins/subscription_plugin.algo.ts:22
    // assert(Global.round - this.lastPayment.value > FREQUENCY);
    >
    assert
    // contracts/plugins/subscription_plugin.algo.ts:12
    // lastPayment = GlobalState<uint64>({ initialValue: 0 });
    bytec_0 // "lastPayment"
    // contracts/plugins/subscription_plugin.algo.ts:23
    // this.lastPayment.value = Global.round;
    global Round
    app_global_put
    // contracts/plugins/subscription_plugin.algo.ts:25
    // const [controlledAccountBytes] = op.AppGlobal.getExBytes(Application(sender.native), Bytes('c'));
    frame_dig -2
    btoi
    dup
    pushbytes "c"
    app_global_get_ex
    pop
    swap
    // contracts/plugins/subscription_plugin.algo.ts:27-37
    // itxn
    //   .payment({
    //     sender: Account(Bytes(controlledAccountBytes)),
    //     amount: AMOUNT,
    //     // Bytes.fromBase32 appears to be broken
    //     // receiver: Account(Bytes.fromBase32("46XYR7OTRZXISI2TRSBDWPUVQT4ECBWNI7TFWPPS6EKAPJ7W5OBXSNG66M")),
    //     receiver: Global.zeroAddress,
    //     rekeyTo: Application(sender.native).address,
    //     fee: 0,
    //   })
    //   .submit();
    itxn_begin
    // contracts/plugins/subscription_plugin.algo.ts:33
    // receiver: Global.zeroAddress,
    global ZeroAddress
    // contracts/plugins/subscription_plugin.algo.ts:34
    // rekeyTo: Application(sender.native).address,
    swap
    app_params_get AppAddress
    assert // application exists
    itxn_field RekeyTo
    itxn_field Receiver
    // contracts/plugins/subscription_plugin.algo.ts:8
    // const AMOUNT: uint64 = 100_000;
    pushint 100000 // 100000
    itxn_field Amount
    itxn_field Sender
    // contracts/plugins/subscription_plugin.algo.ts:27-36
    // itxn
    //   .payment({
    //     sender: Account(Bytes(controlledAccountBytes)),
    //     amount: AMOUNT,
    //     // Bytes.fromBase32 appears to be broken
    //     // receiver: Account(Bytes.fromBase32("46XYR7OTRZXISI2TRSBDWPUVQT4ECBWNI7TFWPPS6EKAPJ7W5OBXSNG66M")),
    //     receiver: Global.zeroAddress,
    //     rekeyTo: Application(sender.native).address,
    //     fee: 0,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // contracts/plugins/subscription_plugin.algo.ts:35
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // contracts/plugins/subscription_plugin.algo.ts:27-37
    // itxn
    //   .payment({
    //     sender: Account(Bytes(controlledAccountBytes)),
    //     amount: AMOUNT,
    //     // Bytes.fromBase32 appears to be broken
    //     // receiver: Account(Bytes.fromBase32("46XYR7OTRZXISI2TRSBDWPUVQT4ECBWNI7TFWPPS6EKAPJ7W5OBXSNG66M")),
    //     receiver: Global.zeroAddress,
    //     rekeyTo: Application(sender.native).address,
    //     fee: 0,
    //   })
    //   .submit();
    itxn_submit
    retsub
