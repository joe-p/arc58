#pragma version 10
intcblock 1 0 32
bytecblock 0x6c6173745061796d656e74

// This TEAL was generated by TEALScript v0.106.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/plugins/subscription_plugin.algo.ts:17
	// this.lastPayment.value = 0
	bytec 0 //  "lastPayment"
	intc 1 // 0
	app_global_put
	retsub

// makePayment(address,address)void
*abi_route_makePayment:
	// _acctRef: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 0 (_acctRef) for makePayment must be a address
	assert

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (sender) for makePayment must be a address
	assert

	// execute makePayment(address,address)void
	callsub makePayment
	intc 0 // 1
	return

// makePayment(sender: Address, _acctRef: Address): void
makePayment:
	proto 2 0

	// contracts/plugins/subscription_plugin.algo.ts:25
	// assert(globals.round - this.lastPayment.value > FREQUENCY)
	global Round
	bytec 0 //  "lastPayment"
	app_global_get
	-
	intc 0 // 1
	>
	assert

	// contracts/plugins/subscription_plugin.algo.ts:26
	// this.lastPayment.value = globals.round
	bytec 0 //  "lastPayment"
	global Round
	app_global_put

	// contracts/plugins/subscription_plugin.algo.ts:28
	// sendPayment({
	//       sender: sender,
	//       amount: AMOUNT,
	//       receiver: addr('46XYR7OTRZXISI2TRSBDWPUVQT4ECBWNI7TFWPPS6EKAPJ7W5OBXSNG66M'),
	//       rekeyTo: sender,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/plugins/subscription_plugin.algo.ts:29
	// sender: sender
	frame_dig -1 // sender: Address
	itxn_field Sender

	// contracts/plugins/subscription_plugin.algo.ts:30
	// amount: AMOUNT
	pushint 100000
	itxn_field Amount

	// contracts/plugins/subscription_plugin.algo.ts:31
	// receiver: addr('46XYR7OTRZXISI2TRSBDWPUVQT4ECBWNI7TFWPPS6EKAPJ7W5OBXSNG66M')
	pushbytes 0xe7af88fdd38e6e8923538c823b3e9584f84106cd47e65b3df2f11407a7f6eb83 // addr "46XYR7OTRZXISI2TRSBDWPUVQT4ECBWNI7TFWPPS6EKAPJ7W5OBXSNG66M"
	itxn_field Receiver

	// contracts/plugins/subscription_plugin.algo.ts:32
	// rekeyTo: sender
	frame_dig -1 // sender: Address
	itxn_field RekeyTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa8977f18 // method "makePayment(address,address)void"
	txna ApplicationArgs 0
	match *abi_route_makePayment

	// this contract does not implement the given ABI method for call NoOp
	err