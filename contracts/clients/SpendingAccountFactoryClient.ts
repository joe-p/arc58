/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"SpendingAccountFactory","structs":{},"methods":[{"name":"create","args":[{"type":"pay","name":"payment"},{"type":"uint64","name":"plugin"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete","args":[{"type":"uint64","name":"id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"exists","args":[{"type":"address","name":"address"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get","args":[{"type":"address","name":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"mustGet","args":[{"type":"address","name":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getList","args":[{"type":"address[]","name":"addresses"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"mustGetList","args":[{"type":"address[]","name":"addresses"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"walletIDsByAccounts":{"keyType":"byte[16]","valueType":"uint64","prefix":"YQ=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[985,1175],"errorMessage":"Account not found"},{"pc":[847,969,998,1061,1192],"errorMessage":"Box must have value"},{"pc":[1028,1164],"errorMessage":"Index access is out of bounds"},{"pc":[105,129,153,178,203,234,255],"errorMessage":"OnCompletion is not NoOp"},{"pc":[358,820],"errorMessage":"Only applications can create spending accounts"},{"pc":[775,789,825],"errorMessage":"application exists"},{"pc":[397],"errorMessage":"assert target is match for conditions"},{"pc":[302],"errorMessage":"can only call when creating"},{"pc":[110,134,158,183,208,239,260],"errorMessage":"can only call when not creating"},{"pc":[348],"errorMessage":"invalid size"},{"pc":[855],"errorMessage":"only the creator wallet can delete a spending account"},{"pc":[270],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CgptYWluX2Jsb2NrQDA6CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAHAAEgENTeAcCaDNCGAyYEAWEABBUffHUCAAAxGyITQQD7NhoAgARHx51fgASKOeefgARMn7ZWgASJ55kkgARA5lJigAS1YcJWgASCtDX4TweOBwCYAIMAZABLADIAGgACIkMxGSISRDEYIhNENhoBiAP5KkxQsCNC/+cxGSISRDEYIhNENhoBiANbKkxQsCNC/88xGSISRDEYIhNENhoBiAMmFipMULAjQv+2MRkiEkQxGCITRDYaAYgC7BYqTFCwI0L/nTEZIhJEMRgiE0Q2GgGIAsSAAQAiTwJUKkxQsCNC/34xGSISRDEYIhNENhoBF4gCNSNC/2kxGSISRDEYIhNEMRYjCUk4ECMSRDYaAReIAEgWKkxQsCNC/0UxGSJMjgEAA0L/OTEYIhJEiAOUI0L/LooBAYv/FSJLAQ8iSwJPAk1MJUsBDyVPAk8CTYv/TwJPAlJJFSUSRImKAgEyDUkiE0QhBIECCyEFCCEGIgsIgdRhCIv+OAcyChJBAaaL/jgIiwESQQGcI0SxiwAWi/8WTIAEkXxItrIashqyGiKyOCKyNiKyNyKyNYECsjSABAqBAUOyQimyQoCwAgogAgABJgIJd2FsbGV0X2lkCXBsdWdpbl9pZDEbIhNBAIc2GgCABJF8SLaABGWpe8yABD6hGDKABCSHwyxPBI4EAEcAMwAUAAIiQzEZgQUSRDEYIhNEiADQI0L/7TEZIhJEMRgiE0QxFiMJSTgQIxJENhoBF4gAbSNC/84xGSISRDEYIhNENhoBiABCI0L/ujEZIhJEMRgiEkQ2GgEXNhoCF4gAHSNC/6FC/50xACIoZURyCEQSiTEAIillRHIIRBKJigIAKIv+ZymL/2eJigEAiP/YRLGL/7IgIrIII7IQIrIBs4mKAgCI/8FAAAaI/8ZBADEjRIv+OAcyChJBACGL/jgIMhASQQAXI0SxMgqL/7IRIrISshSBBLIQIrIBs4kiQv/mIkL/zDEAMgkSRImyQCmyQCKyGYEGshAisgGztwA9RwJyCESI/isoTFCLABa/sXIIRIGgjQayCLIHI7IQIrIBs4wAiSJC/mGKAQAyDUkiE0SL/3IIRIj9+UkoTFC9RQFBAFAoiwFQvkwXTESLABJBAEEjRCEEgQILIQUIIQYiCwiB1GEIsYv/gAQkh8MsshqBBbIZshiBBrIQIrIBsyiLAVC8SLEyDrIgsggjshAisgGziSJC/7yKAQGL/4j9kyhMUL1FAYmKAQGL/4j9hChMUL1FAUAAAiKJi/+I/XQoTFC+TBdMRImKAQGL/4j9YyhMUL1FAUSL/4j9VyhMUL5MF0xEiYoBASIrKVAii/8iWYsCDUEAb4v/VwIAiwIkCyRYSYwAiP0rKExQvUUBQQAwiwFXAgCLAIj9GChMUL5MF0xEFilMUClMUFBJFYEIChZXBgJMUIwBiwIjCIwCQv+siwFXAgApgAgAAAAAAAAAAFApTFBQSRWBCAoWVwYCTFCMAUL/0osBjACJigEBKylQIov/IlmLAQ1BAEaL/1cCAIsBSU4CJAskWEmI/KUoTFC9RQFEiwBXAgBMiPyVKExQvkwXTEQWKUxQKUxQUEkVgQgKFlcGAkxQjAAjCIwBQv+wiYk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the SpendingAccountFactory contract
 */
export type SpendingAccountFactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(pay,uint64)uint64': {
      payment: AppMethodCallTransactionArgument
      plugin: bigint | number
    }
    'delete(uint64)void': {
      id: bigint | number
    }
    'exists(address)bool': {
      address: string
    }
    'get(address)uint64': {
      address: string
    }
    'mustGet(address)uint64': {
      address: string
    }
    'getList(address[])uint64[]': {
      addresses: string[]
    }
    'mustGetList(address[])uint64[]': {
      addresses: string[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(pay,uint64)uint64': [payment: AppMethodCallTransactionArgument, plugin: bigint | number]
    'delete(uint64)void': [id: bigint | number]
    'exists(address)bool': [address: string]
    'get(address)uint64': [address: string]
    'mustGet(address)uint64': [address: string]
    'getList(address[])uint64[]': [addresses: string[]]
    'mustGetList(address[])uint64[]': [addresses: string[]]
  }
}

/**
 * The return type for each method
 */
export type SpendingAccountFactoryReturns = {
  'create(pay,uint64)uint64': bigint
  'delete(uint64)void': void
  'exists(address)bool': boolean
  'get(address)uint64': bigint
  'mustGet(address)uint64': bigint
  'getList(address[])uint64[]': bigint[]
  'mustGetList(address[])uint64[]': bigint[]
}

/**
 * Defines the types of available calls and state of the SpendingAccountFactory smart contract.
 */
export type SpendingAccountFactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(pay,uint64)uint64' | 'create', {
      argsObj: SpendingAccountFactoryArgs['obj']['create(pay,uint64)uint64']
      argsTuple: SpendingAccountFactoryArgs['tuple']['create(pay,uint64)uint64']
      returns: SpendingAccountFactoryReturns['create(pay,uint64)uint64']
    }>
    & Record<'delete(uint64)void' | 'delete', {
      argsObj: SpendingAccountFactoryArgs['obj']['delete(uint64)void']
      argsTuple: SpendingAccountFactoryArgs['tuple']['delete(uint64)void']
      returns: SpendingAccountFactoryReturns['delete(uint64)void']
    }>
    & Record<'exists(address)bool' | 'exists', {
      argsObj: SpendingAccountFactoryArgs['obj']['exists(address)bool']
      argsTuple: SpendingAccountFactoryArgs['tuple']['exists(address)bool']
      returns: SpendingAccountFactoryReturns['exists(address)bool']
    }>
    & Record<'get(address)uint64' | 'get', {
      argsObj: SpendingAccountFactoryArgs['obj']['get(address)uint64']
      argsTuple: SpendingAccountFactoryArgs['tuple']['get(address)uint64']
      returns: SpendingAccountFactoryReturns['get(address)uint64']
    }>
    & Record<'mustGet(address)uint64' | 'mustGet', {
      argsObj: SpendingAccountFactoryArgs['obj']['mustGet(address)uint64']
      argsTuple: SpendingAccountFactoryArgs['tuple']['mustGet(address)uint64']
      returns: SpendingAccountFactoryReturns['mustGet(address)uint64']
    }>
    & Record<'getList(address[])uint64[]' | 'getList', {
      argsObj: SpendingAccountFactoryArgs['obj']['getList(address[])uint64[]']
      argsTuple: SpendingAccountFactoryArgs['tuple']['getList(address[])uint64[]']
      returns: SpendingAccountFactoryReturns['getList(address[])uint64[]']
    }>
    & Record<'mustGetList(address[])uint64[]' | 'mustGetList', {
      argsObj: SpendingAccountFactoryArgs['obj']['mustGetList(address[])uint64[]']
      argsTuple: SpendingAccountFactoryArgs['tuple']['mustGetList(address[])uint64[]']
      returns: SpendingAccountFactoryReturns['mustGetList(address[])uint64[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        walletIDsByAccounts: Map<Uint8Array, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type SpendingAccountFactorySignatures = keyof SpendingAccountFactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SpendingAccountFactoryNonVoidMethodSignatures = keyof SpendingAccountFactoryTypes['methods'] extends infer T ? T extends keyof SpendingAccountFactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the SpendingAccountFactory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SpendingAccountFactorySignatures> = SpendingAccountFactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the SpendingAccountFactory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SpendingAccountFactorySignatures> = SpendingAccountFactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = SpendingAccountFactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type SpendingAccountFactoryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type SpendingAccountFactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SpendingAccountFactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the SpendingAccountFactory smart contract
 */
export abstract class SpendingAccountFactoryParamsFactory {
  /**
   * Constructs a no op call for the create(pay,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static create(params: CallParams<SpendingAccountFactoryArgs['obj']['create(pay,uint64)uint64'] | SpendingAccountFactoryArgs['tuple']['create(pay,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create(pay,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.plugin],
    }
  }
  /**
   * Constructs a no op call for the delete(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delete(params: CallParams<SpendingAccountFactoryArgs['obj']['delete(uint64)void'] | SpendingAccountFactoryArgs['tuple']['delete(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delete(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the exists(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static exists(params: CallParams<SpendingAccountFactoryArgs['obj']['exists(address)bool'] | SpendingAccountFactoryArgs['tuple']['exists(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'exists(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the get(address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static get(params: CallParams<SpendingAccountFactoryArgs['obj']['get(address)uint64'] | SpendingAccountFactoryArgs['tuple']['get(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the mustGet(address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mustGet(params: CallParams<SpendingAccountFactoryArgs['obj']['mustGet(address)uint64'] | SpendingAccountFactoryArgs['tuple']['mustGet(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mustGet(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the getList(address[])uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getList(params: CallParams<SpendingAccountFactoryArgs['obj']['getList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['getList(address[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getList(address[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addresses],
    }
  }
  /**
   * Constructs a no op call for the mustGetList(address[])uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mustGetList(params: CallParams<SpendingAccountFactoryArgs['obj']['mustGetList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['mustGetList(address[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mustGetList(address[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addresses],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the SpendingAccountFactory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SpendingAccountFactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SpendingAccountFactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SpendingAccountFactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SpendingAccountFactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the SpendingAccountFactory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SpendingAccountFactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new SpendingAccountFactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SpendingAccountFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SpendingAccountFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SpendingAccountFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new SpendingAccountFactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the SpendingAccountFactory smart contract
 */
export class SpendingAccountFactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SpendingAccountFactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the SpendingAccountFactory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SpendingAccountFactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SpendingAccountFactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SpendingAccountFactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SpendingAccountFactoryClient> {
    return new SpendingAccountFactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SpendingAccountFactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SpendingAccountFactoryClient> {
    return new SpendingAccountFactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the SpendingAccountFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `create(pay,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    create: (params: CallParams<SpendingAccountFactoryArgs['obj']['create(pay,uint64)uint64'] | SpendingAccountFactoryArgs['tuple']['create(pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SpendingAccountFactoryParamsFactory.create(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `delete(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delete: (params: CallParams<SpendingAccountFactoryArgs['obj']['delete(uint64)void'] | SpendingAccountFactoryArgs['tuple']['delete(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SpendingAccountFactoryParamsFactory.delete(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    exists: (params: CallParams<SpendingAccountFactoryArgs['obj']['exists(address)bool'] | SpendingAccountFactoryArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SpendingAccountFactoryParamsFactory.exists(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `get(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    get: (params: CallParams<SpendingAccountFactoryArgs['obj']['get(address)uint64'] | SpendingAccountFactoryArgs['tuple']['get(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SpendingAccountFactoryParamsFactory.get(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `mustGet(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mustGet: (params: CallParams<SpendingAccountFactoryArgs['obj']['mustGet(address)uint64'] | SpendingAccountFactoryArgs['tuple']['mustGet(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SpendingAccountFactoryParamsFactory.mustGet(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `getList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getList: (params: CallParams<SpendingAccountFactoryArgs['obj']['getList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['getList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SpendingAccountFactoryParamsFactory.getList(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `mustGetList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mustGetList: (params: CallParams<SpendingAccountFactoryArgs['obj']['mustGetList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['mustGetList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SpendingAccountFactoryParamsFactory.mustGetList(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the SpendingAccountFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `create(pay,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    create: (params: CallParams<SpendingAccountFactoryArgs['obj']['create(pay,uint64)uint64'] | SpendingAccountFactoryArgs['tuple']['create(pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SpendingAccountFactoryParamsFactory.create(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `delete(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delete: (params: CallParams<SpendingAccountFactoryArgs['obj']['delete(uint64)void'] | SpendingAccountFactoryArgs['tuple']['delete(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SpendingAccountFactoryParamsFactory.delete(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    exists: (params: CallParams<SpendingAccountFactoryArgs['obj']['exists(address)bool'] | SpendingAccountFactoryArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SpendingAccountFactoryParamsFactory.exists(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `get(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    get: (params: CallParams<SpendingAccountFactoryArgs['obj']['get(address)uint64'] | SpendingAccountFactoryArgs['tuple']['get(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SpendingAccountFactoryParamsFactory.get(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `mustGet(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mustGet: (params: CallParams<SpendingAccountFactoryArgs['obj']['mustGet(address)uint64'] | SpendingAccountFactoryArgs['tuple']['mustGet(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SpendingAccountFactoryParamsFactory.mustGet(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `getList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getList: (params: CallParams<SpendingAccountFactoryArgs['obj']['getList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['getList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SpendingAccountFactoryParamsFactory.getList(params))
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `mustGetList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mustGetList: (params: CallParams<SpendingAccountFactoryArgs['obj']['mustGetList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['mustGetList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SpendingAccountFactoryParamsFactory.mustGetList(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the SpendingAccountFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `create(pay,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    create: async (params: CallParams<SpendingAccountFactoryArgs['obj']['create(pay,uint64)uint64'] | SpendingAccountFactoryArgs['tuple']['create(pay,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.create(params))
      return {...result, return: result.return as unknown as (undefined | SpendingAccountFactoryReturns['create(pay,uint64)uint64'])}
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `delete(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delete: async (params: CallParams<SpendingAccountFactoryArgs['obj']['delete(uint64)void'] | SpendingAccountFactoryArgs['tuple']['delete(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.delete(params))
      return {...result, return: result.return as unknown as (undefined | SpendingAccountFactoryReturns['delete(uint64)void'])}
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    exists: async (params: CallParams<SpendingAccountFactoryArgs['obj']['exists(address)bool'] | SpendingAccountFactoryArgs['tuple']['exists(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.exists(params))
      return {...result, return: result.return as unknown as (undefined | SpendingAccountFactoryReturns['exists(address)bool'])}
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `get(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    get: async (params: CallParams<SpendingAccountFactoryArgs['obj']['get(address)uint64'] | SpendingAccountFactoryArgs['tuple']['get(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.get(params))
      return {...result, return: result.return as unknown as (undefined | SpendingAccountFactoryReturns['get(address)uint64'])}
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `mustGet(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mustGet: async (params: CallParams<SpendingAccountFactoryArgs['obj']['mustGet(address)uint64'] | SpendingAccountFactoryArgs['tuple']['mustGet(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.mustGet(params))
      return {...result, return: result.return as unknown as (undefined | SpendingAccountFactoryReturns['mustGet(address)uint64'])}
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `getList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getList: async (params: CallParams<SpendingAccountFactoryArgs['obj']['getList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['getList(address[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.getList(params))
      return {...result, return: result.return as unknown as (undefined | SpendingAccountFactoryReturns['getList(address[])uint64[]'])}
    },

    /**
     * Makes a call to the SpendingAccountFactory smart contract using the `mustGetList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mustGetList: async (params: CallParams<SpendingAccountFactoryArgs['obj']['mustGetList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['mustGetList(address[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.mustGetList(params))
      return {...result, return: result.return as unknown as (undefined | SpendingAccountFactoryReturns['mustGetList(address[])uint64[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SpendingAccountFactoryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the SpendingAccountFactory smart contract using the `exists(address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async exists(params: CallParams<SpendingAccountFactoryArgs['obj']['exists(address)bool'] | SpendingAccountFactoryArgs['tuple']['exists(address)bool']>) {
    const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.exists(params))
    return result.return as unknown as SpendingAccountFactoryReturns['exists(address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the SpendingAccountFactory smart contract using the `get(address)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async get(params: CallParams<SpendingAccountFactoryArgs['obj']['get(address)uint64'] | SpendingAccountFactoryArgs['tuple']['get(address)uint64']>) {
    const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.get(params))
    return result.return as unknown as SpendingAccountFactoryReturns['get(address)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the SpendingAccountFactory smart contract using the `mustGet(address)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async mustGet(params: CallParams<SpendingAccountFactoryArgs['obj']['mustGet(address)uint64'] | SpendingAccountFactoryArgs['tuple']['mustGet(address)uint64']>) {
    const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.mustGet(params))
    return result.return as unknown as SpendingAccountFactoryReturns['mustGet(address)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the SpendingAccountFactory smart contract using the `getList(address[])uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getList(params: CallParams<SpendingAccountFactoryArgs['obj']['getList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['getList(address[])uint64[]']>) {
    const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.getList(params))
    return result.return as unknown as SpendingAccountFactoryReturns['getList(address[])uint64[]']
  }

  /**
   * Makes a readonly (simulated) call to the SpendingAccountFactory smart contract using the `mustGetList(address[])uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async mustGetList(params: CallParams<SpendingAccountFactoryArgs['obj']['mustGetList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['mustGetList(address[])uint64[]']>) {
    const result = await this.appClient.send.call(SpendingAccountFactoryParamsFactory.mustGetList(params))
    return result.return as unknown as SpendingAccountFactoryReturns['mustGetList(address[])uint64[]']
  }

  /**
   * Methods to access state for the current SpendingAccountFactory app
   */
  state = {
    /**
     * Methods to access box state for the current SpendingAccountFactory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the walletIDsByAccounts map in box state
       */
      walletIDsByAccounts: {
        /**
         * Get all current values of the walletIDsByAccounts map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("walletIDsByAccounts")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the walletIDsByAccounts map by key from box state
         */
        value: async (key: Uint8Array): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("walletIDsByAccounts", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): SpendingAccountFactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create(pay,uint64)uint64 method call against the SpendingAccountFactory contract
       */
      create(params: CallParams<SpendingAccountFactoryArgs['obj']['create(pay,uint64)uint64'] | SpendingAccountFactoryArgs['tuple']['create(pay,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.create(params)))
        resultMappers.push((v) => client.decodeReturnValue('create(pay,uint64)uint64', v))
        return this
      },
      /**
       * Add a delete(uint64)void method call against the SpendingAccountFactory contract
       */
      delete(params: CallParams<SpendingAccountFactoryArgs['obj']['delete(uint64)void'] | SpendingAccountFactoryArgs['tuple']['delete(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delete(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a exists(address)bool method call against the SpendingAccountFactory contract
       */
      exists(params: CallParams<SpendingAccountFactoryArgs['obj']['exists(address)bool'] | SpendingAccountFactoryArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.exists(params)))
        resultMappers.push((v) => client.decodeReturnValue('exists(address)bool', v))
        return this
      },
      /**
       * Add a get(address)uint64 method call against the SpendingAccountFactory contract
       */
      get(params: CallParams<SpendingAccountFactoryArgs['obj']['get(address)uint64'] | SpendingAccountFactoryArgs['tuple']['get(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.get(params)))
        resultMappers.push((v) => client.decodeReturnValue('get(address)uint64', v))
        return this
      },
      /**
       * Add a mustGet(address)uint64 method call against the SpendingAccountFactory contract
       */
      mustGet(params: CallParams<SpendingAccountFactoryArgs['obj']['mustGet(address)uint64'] | SpendingAccountFactoryArgs['tuple']['mustGet(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mustGet(params)))
        resultMappers.push((v) => client.decodeReturnValue('mustGet(address)uint64', v))
        return this
      },
      /**
       * Add a getList(address[])uint64[] method call against the SpendingAccountFactory contract
       */
      getList(params: CallParams<SpendingAccountFactoryArgs['obj']['getList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['getList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getList(params)))
        resultMappers.push((v) => client.decodeReturnValue('getList(address[])uint64[]', v))
        return this
      },
      /**
       * Add a mustGetList(address[])uint64[] method call against the SpendingAccountFactory contract
       */
      mustGetList(params: CallParams<SpendingAccountFactoryArgs['obj']['mustGetList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['mustGetList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mustGetList(params)))
        resultMappers.push((v) => client.decodeReturnValue('mustGetList(address[])uint64[]', v))
        return this
      },
      /**
       * Add a clear state call to the SpendingAccountFactory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SpendingAccountFactoryComposer
  }
}
export type SpendingAccountFactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create(pay,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(params?: CallParams<SpendingAccountFactoryArgs['obj']['create(pay,uint64)uint64'] | SpendingAccountFactoryArgs['tuple']['create(pay,uint64)uint64']>): SpendingAccountFactoryComposer<[...TReturns, SpendingAccountFactoryReturns['create(pay,uint64)uint64'] | undefined]>

  /**
   * Calls the delete(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delete(params?: CallParams<SpendingAccountFactoryArgs['obj']['delete(uint64)void'] | SpendingAccountFactoryArgs['tuple']['delete(uint64)void']>): SpendingAccountFactoryComposer<[...TReturns, SpendingAccountFactoryReturns['delete(uint64)void'] | undefined]>

  /**
   * Calls the exists(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  exists(params?: CallParams<SpendingAccountFactoryArgs['obj']['exists(address)bool'] | SpendingAccountFactoryArgs['tuple']['exists(address)bool']>): SpendingAccountFactoryComposer<[...TReturns, SpendingAccountFactoryReturns['exists(address)bool'] | undefined]>

  /**
   * Calls the get(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  get(params?: CallParams<SpendingAccountFactoryArgs['obj']['get(address)uint64'] | SpendingAccountFactoryArgs['tuple']['get(address)uint64']>): SpendingAccountFactoryComposer<[...TReturns, SpendingAccountFactoryReturns['get(address)uint64'] | undefined]>

  /**
   * Calls the mustGet(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mustGet(params?: CallParams<SpendingAccountFactoryArgs['obj']['mustGet(address)uint64'] | SpendingAccountFactoryArgs['tuple']['mustGet(address)uint64']>): SpendingAccountFactoryComposer<[...TReturns, SpendingAccountFactoryReturns['mustGet(address)uint64'] | undefined]>

  /**
   * Calls the getList(address[])uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getList(params?: CallParams<SpendingAccountFactoryArgs['obj']['getList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['getList(address[])uint64[]']>): SpendingAccountFactoryComposer<[...TReturns, SpendingAccountFactoryReturns['getList(address[])uint64[]'] | undefined]>

  /**
   * Calls the mustGetList(address[])uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mustGetList(params?: CallParams<SpendingAccountFactoryArgs['obj']['mustGetList(address[])uint64[]'] | SpendingAccountFactoryArgs['tuple']['mustGetList(address[])uint64[]']>): SpendingAccountFactoryComposer<[...TReturns, SpendingAccountFactoryReturns['mustGetList(address[])uint64[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the SpendingAccountFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SpendingAccountFactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SpendingAccountFactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SpendingAccountFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SpendingAccountFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SpendingAccountFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SpendingAccountFactoryComposerResults<TReturns>>
}
export type SpendingAccountFactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

