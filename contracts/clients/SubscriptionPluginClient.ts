/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"SubscriptionPlugin","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"makePayment","args":[{"name":"sender","type":"address"},{"name":"_acctRef","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"lastPayment":{"key":"bGFzdFBheW1lbnQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[0]},{"teal":2,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[1,2,3,4,5]},{"teal":3,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[6,7,8,9,10,11,12,13,14,15,16,17,18,19]},{"teal":15,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[20,21]},{"teal":16,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[22]},{"teal":17,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[23,24]},{"teal":18,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[25]},{"teal":19,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[26,27]},{"teal":20,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[28]},{"teal":21,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]},{"teal":25,"source":"contracts/plugins/subscription_plugin.algo.ts:10","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[55]},{"teal":30,"source":"contracts/plugins/subscription_plugin.algo.ts:15","pc":[56,57,58]},{"teal":31,"source":"contracts/plugins/subscription_plugin.algo.ts:15","pc":[59]},{"teal":32,"source":"contracts/plugins/subscription_plugin.algo.ts:15","pc":[60]},{"teal":36,"source":"contracts/plugins/subscription_plugin.algo.ts:15","pc":[61,62,63]},{"teal":40,"source":"contracts/plugins/subscription_plugin.algo.ts:17","pc":[64]},{"teal":41,"source":"contracts/plugins/subscription_plugin.algo.ts:17","pc":[65]},{"teal":42,"source":"contracts/plugins/subscription_plugin.algo.ts:17","pc":[66]},{"teal":43,"source":"contracts/plugins/subscription_plugin.algo.ts:15","pc":[67]},{"teal":48,"source":"contracts/plugins/subscription_plugin.algo.ts:23","pc":[68,69,70]},{"teal":49,"source":"contracts/plugins/subscription_plugin.algo.ts:23","pc":[71]},{"teal":50,"source":"contracts/plugins/subscription_plugin.algo.ts:23","pc":[72]},{"teal":51,"source":"contracts/plugins/subscription_plugin.algo.ts:23","pc":[73]},{"teal":52,"source":"contracts/plugins/subscription_plugin.algo.ts:23","pc":[74]},{"teal":55,"source":"contracts/plugins/subscription_plugin.algo.ts:23","errorMessage":"argument 0 (_acctRef) for makePayment must be a address","pc":[75]},{"teal":58,"source":"contracts/plugins/subscription_plugin.algo.ts:21","pc":[76,77,78]},{"teal":59,"source":"contracts/plugins/subscription_plugin.algo.ts:21","pc":[79]},{"teal":60,"source":"contracts/plugins/subscription_plugin.algo.ts:21","pc":[80]},{"teal":61,"source":"contracts/plugins/subscription_plugin.algo.ts:21","pc":[81]},{"teal":62,"source":"contracts/plugins/subscription_plugin.algo.ts:21","pc":[82]},{"teal":65,"source":"contracts/plugins/subscription_plugin.algo.ts:21","errorMessage":"argument 1 (sender) for makePayment must be a address","pc":[83]},{"teal":68,"source":"contracts/plugins/subscription_plugin.algo.ts:20","pc":[84,85,86]},{"teal":69,"source":"contracts/plugins/subscription_plugin.algo.ts:20","pc":[87]},{"teal":70,"source":"contracts/plugins/subscription_plugin.algo.ts:20","pc":[88]},{"teal":74,"source":"contracts/plugins/subscription_plugin.algo.ts:20","pc":[89,90,91]},{"teal":78,"source":"contracts/plugins/subscription_plugin.algo.ts:25","pc":[92,93]},{"teal":79,"source":"contracts/plugins/subscription_plugin.algo.ts:25","pc":[94]},{"teal":80,"source":"contracts/plugins/subscription_plugin.algo.ts:25","pc":[95]},{"teal":81,"source":"contracts/plugins/subscription_plugin.algo.ts:25","pc":[96]},{"teal":82,"source":"contracts/plugins/subscription_plugin.algo.ts:25","pc":[97]},{"teal":83,"source":"contracts/plugins/subscription_plugin.algo.ts:25","pc":[98]},{"teal":84,"source":"contracts/plugins/subscription_plugin.algo.ts:25","pc":[99]},{"teal":88,"source":"contracts/plugins/subscription_plugin.algo.ts:26","pc":[100]},{"teal":89,"source":"contracts/plugins/subscription_plugin.algo.ts:26","pc":[101,102]},{"teal":90,"source":"contracts/plugins/subscription_plugin.algo.ts:26","pc":[103]},{"teal":99,"source":"contracts/plugins/subscription_plugin.algo.ts:28","pc":[104]},{"teal":100,"source":"contracts/plugins/subscription_plugin.algo.ts:28","pc":[105]},{"teal":101,"source":"contracts/plugins/subscription_plugin.algo.ts:28","pc":[106,107]},{"teal":105,"source":"contracts/plugins/subscription_plugin.algo.ts:29","pc":[108,109]},{"teal":106,"source":"contracts/plugins/subscription_plugin.algo.ts:29","pc":[110,111]},{"teal":110,"source":"contracts/plugins/subscription_plugin.algo.ts:30","pc":[112,113,114,115]},{"teal":111,"source":"contracts/plugins/subscription_plugin.algo.ts:30","pc":[116,117]},{"teal":115,"source":"contracts/plugins/subscription_plugin.algo.ts:31","pc":[118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151]},{"teal":116,"source":"contracts/plugins/subscription_plugin.algo.ts:31","pc":[152,153]},{"teal":120,"source":"contracts/plugins/subscription_plugin.algo.ts:32","pc":[154,155]},{"teal":121,"source":"contracts/plugins/subscription_plugin.algo.ts:32","pc":[156,157]},{"teal":124,"source":"contracts/plugins/subscription_plugin.algo.ts:28","pc":[158]},{"teal":125,"source":"contracts/plugins/subscription_plugin.algo.ts:28","pc":[159,160]},{"teal":128,"source":"contracts/plugins/subscription_plugin.algo.ts:28","pc":[161]},{"teal":129,"source":"contracts/plugins/subscription_plugin.algo.ts:20","pc":[162]},{"teal":132,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[163,164]},{"teal":133,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[165,166,167]},{"teal":134,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[168,169,170,171,172,173]},{"teal":135,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[174,175,176]},{"teal":136,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[177,178,179,180]},{"teal":139,"source":"contracts/plugins/subscription_plugin.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[181]},{"teal":142,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[182,183,184,185,186,187]},{"teal":143,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[188,189,190]},{"teal":144,"source":"contracts/plugins/subscription_plugin.algo.ts:10","pc":[191,192,193,194]},{"teal":147,"source":"contracts/plugins/subscription_plugin.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[195]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAgMzIKYnl0ZWNibG9jayAweDZjNjE3Mzc0NTA2MTc5NmQ2NTZlNzQKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjEKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9wbHVnaW5zL3N1YnNjcmlwdGlvbl9wbHVnaW4uYWxnby50czoxNwoJLy8gdGhpcy5sYXN0UGF5bWVudC52YWx1ZSA9IDAKCWJ5dGVjIDAgLy8gICJsYXN0UGF5bWVudCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBtYWtlUGF5bWVudChhZGRyZXNzLGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX21ha2VQYXltZW50OgoJLy8gX2FjY3RSZWY6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDIgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoX2FjY3RSZWYpIGZvciBtYWtlUGF5bWVudCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gc2VuZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAyIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKHNlbmRlcikgZm9yIG1ha2VQYXltZW50IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIG1ha2VQYXltZW50KGFkZHJlc3MsYWRkcmVzcyl2b2lkCgljYWxsc3ViIG1ha2VQYXltZW50CglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBtYWtlUGF5bWVudChzZW5kZXI6IEFkZHJlc3MsIF9hY2N0UmVmOiBBZGRyZXNzKTogdm9pZAptYWtlUGF5bWVudDoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9wbHVnaW5zL3N1YnNjcmlwdGlvbl9wbHVnaW4uYWxnby50czoyNQoJLy8gYXNzZXJ0KGdsb2JhbHMucm91bmQgLSB0aGlzLmxhc3RQYXltZW50LnZhbHVlID4gRlJFUVVFTkNZKQoJZ2xvYmFsIFJvdW5kCglieXRlYyAwIC8vICAibGFzdFBheW1lbnQiCglhcHBfZ2xvYmFsX2dldAoJLQoJaW50YyAwIC8vIDEKCT4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9wbHVnaW5zL3N1YnNjcmlwdGlvbl9wbHVnaW4uYWxnby50czoyNgoJLy8gdGhpcy5sYXN0UGF5bWVudC52YWx1ZSA9IGdsb2JhbHMucm91bmQKCWJ5dGVjIDAgLy8gICJsYXN0UGF5bWVudCIKCWdsb2JhbCBSb3VuZAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvcGx1Z2lucy9zdWJzY3JpcHRpb25fcGx1Z2luLmFsZ28udHM6MjgKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIHNlbmRlcjogc2VuZGVyLAoJLy8gICAgICAgYW1vdW50OiBBTU9VTlQsCgkvLyAgICAgICByZWNlaXZlcjogYWRkcignNDZYWVI3T1RSWlhJU0kyVFJTQkRXUFVWUVQ0RUNCV05JN1RGV1BQUzZFS0FQSjdXNU9CWFNORzY2TScpLAoJLy8gICAgICAgcmVrZXlUbzogc2VuZGVyLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDAgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9wbHVnaW5zL3N1YnNjcmlwdGlvbl9wbHVnaW4uYWxnby50czoyOQoJLy8gc2VuZGVyOiBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBzZW5kZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gY29udHJhY3RzL3BsdWdpbnMvc3Vic2NyaXB0aW9uX3BsdWdpbi5hbGdvLnRzOjMwCgkvLyBhbW91bnQ6IEFNT1VOVAoJcHVzaGludCAxMDAwMDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL3BsdWdpbnMvc3Vic2NyaXB0aW9uX3BsdWdpbi5hbGdvLnRzOjMxCgkvLyByZWNlaXZlcjogYWRkcignNDZYWVI3T1RSWlhJU0kyVFJTQkRXUFVWUVQ0RUNCV05JN1RGV1BQUzZFS0FQSjdXNU9CWFNORzY2TScpCglwdXNoYnl0ZXMgMHhlN2FmODhmZGQzOGU2ZTg5MjM1MzhjODIzYjNlOTU4NGY4NDEwNmNkNDdlNjViM2RmMmYxMTQwN2E3ZjZlYjgzIC8vIGFkZHIgIjQ2WFlSN09UUlpYSVNJMlRSU0JEV1BVVlFUNEVDQldOSTdURldQUFM2RUtBUEo3VzVPQlhTTkc2Nk0iCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL3BsdWdpbnMvc3Vic2NyaXB0aW9uX3BsdWdpbi5hbGdvLnRzOjMyCgkvLyByZWtleVRvOiBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBzZW5kZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgUmVrZXlUbwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJdHhuIE51bUFwcEFyZ3MKCWJ6ICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhhODk3N2YxOCAvLyBtZXRob2QgIm1ha2VQYXltZW50KGFkZHJlc3MsYWRkcmVzcyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9tYWtlUGF5bWVudAoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiADAQAgJgELbGFzdFBheW1lbnQxGBSBBgsxGQiNDAB/AAAAAAAAAAAAAABsAAAAAAAAAAAAAACIAAIiQ4oAACgjZ4k2GgJJFSQSRDYaAUkVJBJEiAACIkOKAgAyBihkCSINRCgyBmexIrIQi/+yAIGgjQayCIAg56+I/dOObokjU4yCOz6VhPhBBs1H5ls98vEUB6f264OyB4v/siAjsgGziTEbQf+QgAS4RHs2NhoAjgH/gwCABKiXfxg2GgCOAf+BAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":26,"patch":0,"commitHash":"0d10b244"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the SubscriptionPlugin contract
 */
export type SubscriptionPluginArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'makePayment(address,address)void': {
      sender: string
      _acctRef: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'makePayment(address,address)void': [sender: string, _acctRef: string]
  }
}

/**
 * The return type for each method
 */
export type SubscriptionPluginReturns = {
  'createApplication()void': void
  'makePayment(address,address)void': void
}

/**
 * Defines the types of available calls and state of the SubscriptionPlugin smart contract.
 */
export type SubscriptionPluginTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: SubscriptionPluginArgs['obj']['createApplication()void']
      argsTuple: SubscriptionPluginArgs['tuple']['createApplication()void']
      returns: SubscriptionPluginReturns['createApplication()void']
    }>
    & Record<'makePayment(address,address)void' | 'makePayment', {
      argsObj: SubscriptionPluginArgs['obj']['makePayment(address,address)void']
      argsTuple: SubscriptionPluginArgs['tuple']['makePayment(address,address)void']
      returns: SubscriptionPluginReturns['makePayment(address,address)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        lastPayment: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type SubscriptionPluginSignatures = keyof SubscriptionPluginTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SubscriptionPluginNonVoidMethodSignatures = keyof SubscriptionPluginTypes['methods'] extends infer T ? T extends keyof SubscriptionPluginTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the SubscriptionPlugin smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SubscriptionPluginSignatures> = SubscriptionPluginTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the SubscriptionPlugin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SubscriptionPluginSignatures> = SubscriptionPluginTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = SubscriptionPluginTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type SubscriptionPluginCreateCallParams =
  | Expand<CallParams<SubscriptionPluginArgs['obj']['createApplication()void'] | SubscriptionPluginArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<SubscriptionPluginArgs['obj']['createApplication()void'] | SubscriptionPluginArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type SubscriptionPluginDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SubscriptionPluginCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the SubscriptionPlugin smart contract
 */
export abstract class SubscriptionPluginParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends SubscriptionPluginCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return SubscriptionPluginParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the SubscriptionPlugin smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<SubscriptionPluginArgs['obj']['createApplication()void'] | SubscriptionPluginArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the makePayment(address,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makePayment(params: CallParams<SubscriptionPluginArgs['obj']['makePayment(address,address)void'] | SubscriptionPluginArgs['tuple']['makePayment(address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makePayment(address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args._acctRef],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the SubscriptionPlugin smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SubscriptionPluginFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SubscriptionPluginFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SubscriptionPluginClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SubscriptionPluginClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the SubscriptionPlugin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SubscriptionPluginDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? SubscriptionPluginParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
    })
    return { result: result.result, appClient: new SubscriptionPluginClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SubscriptionPlugin smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<SubscriptionPluginArgs['obj']['createApplication()void'] | SubscriptionPluginArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(SubscriptionPluginParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SubscriptionPlugin smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<SubscriptionPluginArgs['obj']['createApplication()void'] | SubscriptionPluginArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(SubscriptionPluginParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SubscriptionPlugin smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<SubscriptionPluginArgs['obj']['createApplication()void'] | SubscriptionPluginArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(SubscriptionPluginParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | SubscriptionPluginReturns['createApplication()void'] }, appClient: new SubscriptionPluginClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the SubscriptionPlugin smart contract
 */
export class SubscriptionPluginClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SubscriptionPluginClient`
   *
   * @param appClient An `AppClient` instance which has been created with the SubscriptionPlugin app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SubscriptionPluginClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SubscriptionPluginNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SubscriptionPluginClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SubscriptionPluginClient> {
    return new SubscriptionPluginClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SubscriptionPluginClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SubscriptionPluginClient> {
    return new SubscriptionPluginClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the SubscriptionPlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the SubscriptionPlugin smart contract using the `makePayment(address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makePayment: (params: CallParams<SubscriptionPluginArgs['obj']['makePayment(address,address)void'] | SubscriptionPluginArgs['tuple']['makePayment(address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SubscriptionPluginParamsFactory.makePayment(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the SubscriptionPlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the SubscriptionPlugin smart contract using the `makePayment(address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makePayment: (params: CallParams<SubscriptionPluginArgs['obj']['makePayment(address,address)void'] | SubscriptionPluginArgs['tuple']['makePayment(address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SubscriptionPluginParamsFactory.makePayment(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the SubscriptionPlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the SubscriptionPlugin smart contract using the `makePayment(address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makePayment: async (params: CallParams<SubscriptionPluginArgs['obj']['makePayment(address,address)void'] | SubscriptionPluginArgs['tuple']['makePayment(address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SubscriptionPluginParamsFactory.makePayment(params))
      return {...result, return: result.return as undefined | SubscriptionPluginReturns['makePayment(address,address)void']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SubscriptionPluginClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current SubscriptionPlugin app
   */
  state = {
    /**
     * Methods to access global state for the current SubscriptionPlugin app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          lastPayment: result.lastPayment,
        }
      },
      /**
       * Get the current value of the lastPayment key in global state
       */
      lastPayment: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastPayment")) as bigint | undefined },
    },
  }

  public newGroup(): SubscriptionPluginComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a makePayment(address,address)void method call against the SubscriptionPlugin contract
       */
      makePayment(params: CallParams<SubscriptionPluginArgs['obj']['makePayment(address,address)void'] | SubscriptionPluginArgs['tuple']['makePayment(address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makePayment(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the SubscriptionPlugin contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SubscriptionPluginComposer
  }
}
export type SubscriptionPluginComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the makePayment(address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makePayment(params?: CallParams<SubscriptionPluginArgs['obj']['makePayment(address,address)void'] | SubscriptionPluginArgs['tuple']['makePayment(address,address)void']>): SubscriptionPluginComposer<[...TReturns, SubscriptionPluginReturns['makePayment(address,address)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the SubscriptionPlugin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SubscriptionPluginComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SubscriptionPluginComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SubscriptionPluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SubscriptionPluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SubscriptionPluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SubscriptionPluginComposerResults<TReturns>>
}
export type SubscriptionPluginComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

