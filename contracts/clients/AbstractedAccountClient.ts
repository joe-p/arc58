/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AbstractedAccount","structs":{"PluginInfo":[{"name":"lastValidRound","type":"uint64"},{"name":"cooldown","type":"uint64"},{"name":"lastCalled","type":"uint64"},{"name":"adminPrivileges","type":"bool"}],"PluginsKey":[{"name":"application","type":"uint64"},{"name":"allowedCaller","type":"address"}]},"methods":[{"name":"createApplication","args":[{"type":"address","name":"controlledAddress","desc":"The address of the abstracted account. If zeroAddress, then the address of the contract account will be used"},{"type":"address","name":"admin","desc":"The admin for this app"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Create an abstracted account application.\nThis is not part of ARC58 and implementation specific.","events":[],"recommendations":{}},{"name":"arc58_changeAdmin","args":[{"type":"address","name":"newAdmin","desc":"The new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Attempt to change the admin for this app. Some implementations MAY not support this.","events":[],"recommendations":{}},{"name":"arc58_pluginChangeAdmin","args":[{"type":"uint64","name":"plugin","desc":"The app calling the plugin"},{"type":"address","name":"allowedCaller","desc":"The address that triggered the plugin"},{"type":"address","name":"newAdmin","desc":"The new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Attempt to change the admin via plugin.","events":[],"recommendations":{}},{"name":"arc58_getAdmin","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin.","events":[],"recommendations":{}},{"name":"arc58_verifyAuthAddr","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Verify the abstracted account is rekeyed to this app","events":[],"recommendations":{}},{"name":"arc58_rekeyTo","args":[{"type":"address","name":"address"},{"type":"bool","name":"flash","desc":"Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.","events":[],"recommendations":{}},{"name":"arc58_canCall","args":[{"type":"uint64","name":"plugin","desc":"the plugin to be rekeyed to"},{"type":"address","name":"address"}],"returns":{"type":"bool","desc":"whether the plugin can be called via txn sender or globally"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"check whether the plugin can be used","events":[],"recommendations":{}},{"name":"arc58_rekeyToPlugin","args":[{"type":"uint64","name":"plugin","desc":"The app to rekey to"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Temporarily rekey to an approved plugin app address","events":[],"recommendations":{}},{"name":"arc58_rekeyToNamedPlugin","args":[{"type":"string","name":"name","desc":"The name of the plugin to rekey to"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Temporarily rekey to a named plugin app address","events":[],"recommendations":{}},{"name":"arc58_addPlugin","args":[{"type":"uint64","name":"app","desc":"The app to add"},{"type":"address","name":"allowedCaller","desc":"The address of that's allowed to call the app\nor the global zero address for all addresses"},{"type":"uint64","name":"lastValidRound","desc":"The round when the permission expires"},{"type":"uint64","name":"cooldown","desc":"The number of rounds that must pass before the plugin can be called again"},{"type":"bool","name":"adminPrivileges","desc":"Whether the plugin has permissions to change the admin account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add an app to the list of approved plugins","events":[],"recommendations":{}},{"name":"arc58_removePlugin","args":[{"type":"uint64","name":"app","desc":"The app to remove"},{"type":"address","name":"allowedCaller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove an app from the list of approved plugins","events":[],"recommendations":{}},{"name":"arc58_addNamedPlugin","args":[{"type":"string","name":"name","desc":"The plugin name"},{"type":"uint64","name":"app","desc":"The plugin app"},{"type":"address","name":"allowedCaller","desc":"The address of that's allowed to call the app\nor the global zero address for all addresses"},{"type":"uint64","name":"lastValidRound","desc":"The round when the permission expires"},{"type":"uint64","name":"cooldown","desc":"The number of rounds that must pass before the plugin can be called again"},{"type":"bool","name":"adminPrivileges","desc":"Whether the plugin has permissions to change the admin account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add a named plugin","events":[],"recommendations":{}},{"name":"arc58_removeNamedPlugin","args":[{"type":"string","name":"name","desc":"The plugin name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove a named plugin","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YQ==","desc":"The admin of the abstracted account. This address can add plugins and initiate rekeys"},"controlledAddress":{"keyType":"AVMString","valueType":"AVMBytes","key":"Yw==","desc":"The address this app controls"}},"local":{},"box":{"plugins":{"keyType":"AVMString","valueType":"PluginInfo","key":"cA==","desc":"Plugins that add functionality to the controlledAddress and the account that has permission to use it."},"namedPlugins":{"keyType":"AVMString","valueType":"PluginsKey","key":"bg==","desc":"Plugins that have been given a name for discoverability"}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[923,1128,1267],"errorMessage":"Box must have value"},{"pc":[925,934,1129],"errorMessage":"Index access is out of bounds"},{"pc":[1100],"errorMessage":"Invalid app arg"},{"pc":[1095],"errorMessage":"Invalid app arg length"},{"pc":[1075],"errorMessage":"Invalid app call"},{"pc":[1086],"errorMessage":"Invalid number of app args"},{"pc":[1080],"errorMessage":"Invalid onCompletion"},{"pc":[145,160,190,208,235,250,265,294,312,324,341,362,377],"errorMessage":"OnCompletion is not NoOp"},{"pc":[413],"errorMessage":"Sender must be either controlledAddress or admin"},{"pc":[457,580,1146,1180,1202,1255],"errorMessage":"Sender must be the admin"},{"pc":[478],"errorMessage":"Sender must be the plugin"},{"pc":[520],"errorMessage":"This plugin does not have admin privileges"},{"pc":[491],"errorMessage":"This plugin is not in control of the account"},{"pc":[853],"errorMessage":"This sender is not allowed to trigger this plugin"},{"pc":[485,544],"errorMessage":"account funded"},{"pc":[474,489,867],"errorMessage":"application exists"},{"pc":[381],"errorMessage":"can only call when creating"},{"pc":[148,163,193,211,238,253,268,297,315,327,344,365],"errorMessage":"can only call when not creating"},{"pc":[455,482,533,541,548,578,585,665,858,862,984,1144,1178,1200,1253],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEGwAEmCAFhAWMBcAQPiFSTAQABbgQVH3x1CAAAAAAAAAAAMRtBAGCCBAS0x31xBNJLdVYEX6RJxgQTvETkK4IIBMlaXT0E6QJtqAR8dm3cBFbyi1gE0S3LYQRNNyNVBIpyp1AE41C51DYaAI4NAOoA2wDGALUAqQCXAHoAawBcAEEALwARAAIiQzEZFEQxGEQ2GgGIBEIjQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgU2GgaIA+8jQzEZFEQxGEQ2GgE2GgKIA8cjQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgWIA4ojQzEZFEQxGEQ2GgGIA2YjQzEZFEQxGEQ2GgGIAjYjQzEZFEQxGEQ2GgE2GgKIAgknBCJPAlQnBkxQsCNDMRkURDEYRDYaATYaAogBBCNDMRkURDEYRIgA2CNDMRkURDEYRIgAxycGTFCwI0MxGRREMRhENhoBNhoCNhoDiABqI0MxGRREMRhENhoBiABLI0MxGRREMRgURDYaATYaAogAAiNDigIAMQCL/hJAAAgxAIv/EkEAHyNEi/+L/hNEKIv/Z4v+MgMSQQAGMgopTGeJi/5C//ciQv/eigEAMQAiKGVEEkQoi/9niYoDADEAi/0XSXIIRE8CEkQiKWVEcwJETHIIRBJEi/2L/lAqTFC+QQAWiwAlUycEIk8CVCJTQQAHI0Qoi/9niSJC//YiKGVEiYoAACIpZURzAkQiKWVEMgoSQQAHMgOLABJEiTIKQv/2igIAgABJMQAiKGVEEkSxIillRIAbcmVrZXlpbmcgYWJzdHJhY3RlZCBhY2NvdW50sgWL/rIgi/6yB7IAI7IQIrIBs4v/IlNBAC0ijAExFiMIjACLADIEDEEAGYsAOAAiKWVEEkEAEYsAOCAyChJBAAcjjAGLAUSJiwA4ECQSQQAqiwA4GDIIEkEAIIsAOBlAABmLADgbIxJBABCLACLCGisSQQAGI4wBQv/JiwAjCIwAQv+figIBi/4Wi/9QKkxQvkEAIIsAIlsyBg9BABYyBosASU4CgRBbCUyBCFsPQQADI0yJIkL/+ooCAYv+F0kyA4j/wEEAAyNMiYsAi/+I/7NMiYoBAIAARwKL/xdJMgOI/6FJQAAIiwMxAIj/lkSxIillRCIpZUSLA3IIRIAWcmVrZXlpbmcgdG8gcGx1Z2luIGFwcLIFsiCyB7IAI7IQIrIBs4sEQQDGMgOL/0xQKkxQSb5ESVcACEsBJVNPAlcICDIGFicEIk8EVE8DTwNQTwJQTFC/IowBMRYjCIwAMgQxFgmLAA1BABmLADgAIillRBJBABGLADggMgoSQQAHI4wBiwFEiYsAOBBJjAIkEkEAKosAOBgyCBJBACCLADgZQAAZiwA4GyMSQQAQiwAiwhorEkEABiOMAUL/xosCJBNAACKLAEk4GIsDEkRJOBkUREk4GyMNRCPCGkkVgQgSRBcyCBJEiwAjCIwAQv9wMQBC/zeKAQCL/1cCACcFTFC+RFcACIj+y4mKBQAxACIoZUQSRIv7i/xQi/2L/lAnB1CL/1AqTwJQTL+JigIAMQAiKGVEEkSL/ov/UCpMULxIiYoGADEAIihlRBJEi/pXAgAnBUxQSb1FARREi/uL/FBMSwG/i/2L/lAnB1CL/1AqTwJQTL+JigEAMQAiKGVEEkSL/1cCACcFTFBJvkRMvEgqTFC8SIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":4,"patch":4}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type PluginInfo = {
  lastValidRound: bigint,
  cooldown: bigint,
  lastCalled: bigint,
  adminPrivileges: boolean
}


/**
 * Converts the ABI tuple representation of a PluginInfo to the struct representation
 */
export function PluginInfoFromTuple(abiTuple: [bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginInfo, APP_SPEC.structs) as PluginInfo
}

export type PluginsKey = {
  application: bigint,
  allowedCaller: string
}


/**
 * Converts the ABI tuple representation of a PluginsKey to the struct representation
 */
export function PluginsKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginsKey, APP_SPEC.structs) as PluginsKey
}

/**
 * The argument types for the AbstractedAccount contract
 */
export type AbstractedAccountArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,address)void': {
      /**
       * The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
       */
      controlledAddress: string
      /**
       * The admin for this app
       */
      admin: string
    }
    'arc58_changeAdmin(address)void': {
      /**
       * The new admin
       */
      newAdmin: string
    }
    'arc58_pluginChangeAdmin(uint64,address,address)void': {
      /**
       * The app calling the plugin
       */
      plugin: bigint | number
      /**
       * The address that triggered the plugin
       */
      allowedCaller: string
      /**
       * The new admin
       */
      newAdmin: string
    }
    'arc58_getAdmin()address': Record<string, never>
    'arc58_verifyAuthAddr()void': Record<string, never>
    'arc58_rekeyTo(address,bool)void': {
      address: string
      /**
       * Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
       */
      flash: boolean
    }
    'arc58_canCall(uint64,address)bool': {
      /**
       * the plugin to be rekeyed to
       */
      plugin: bigint | number
      address: string
    }
    'arc58_rekeyToPlugin(uint64)void': {
      /**
       * The app to rekey to
       */
      plugin: bigint | number
    }
    'arc58_rekeyToNamedPlugin(string)void': {
      /**
       * The name of the plugin to rekey to
       */
      name: string
    }
    'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': {
      /**
       * The app to add
       */
      app: bigint | number
      /**
      * The address of that's allowed to call the app
      or the global zero address for all addresses

       */
      allowedCaller: string
      /**
       * The round when the permission expires
       */
      lastValidRound: bigint | number
      /**
       * The number of rounds that must pass before the plugin can be called again
       */
      cooldown: bigint | number
      /**
       * Whether the plugin has permissions to change the admin account
       */
      adminPrivileges: boolean
    }
    'arc58_removePlugin(uint64,address)void': {
      /**
       * The app to remove
       */
      app: bigint | number
      allowedCaller: string
    }
    'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': {
      /**
       * The plugin name
       */
      name: string
      /**
       * The plugin app
       */
      app: bigint | number
      /**
      * The address of that's allowed to call the app
      or the global zero address for all addresses

       */
      allowedCaller: string
      /**
       * The round when the permission expires
       */
      lastValidRound: bigint | number
      /**
       * The number of rounds that must pass before the plugin can be called again
       */
      cooldown: bigint | number
      /**
       * Whether the plugin has permissions to change the admin account
       */
      adminPrivileges: boolean
    }
    'arc58_removeNamedPlugin(string)void': {
      /**
       * The plugin name
       */
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,address)void': [controlledAddress: string, admin: string]
    'arc58_changeAdmin(address)void': [newAdmin: string]
    'arc58_pluginChangeAdmin(uint64,address,address)void': [plugin: bigint | number, allowedCaller: string, newAdmin: string]
    'arc58_getAdmin()address': []
    'arc58_verifyAuthAddr()void': []
    'arc58_rekeyTo(address,bool)void': [address: string, flash: boolean]
    'arc58_canCall(uint64,address)bool': [plugin: bigint | number, address: string]
    'arc58_rekeyToPlugin(uint64)void': [plugin: bigint | number]
    'arc58_rekeyToNamedPlugin(string)void': [name: string]
    'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': [app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
    'arc58_removePlugin(uint64,address)void': [app: bigint | number, allowedCaller: string]
    'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': [name: string, app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
    'arc58_removeNamedPlugin(string)void': [name: string]
  }
}

/**
 * The return type for each method
 */
export type AbstractedAccountReturns = {
  'createApplication(address,address)void': void
  'arc58_changeAdmin(address)void': void
  'arc58_pluginChangeAdmin(uint64,address,address)void': void
  'arc58_getAdmin()address': string
  'arc58_verifyAuthAddr()void': void
  'arc58_rekeyTo(address,bool)void': void
  'arc58_canCall(uint64,address)bool': boolean
  'arc58_rekeyToPlugin(uint64)void': void
  'arc58_rekeyToNamedPlugin(string)void': void
  'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': void
  'arc58_removePlugin(uint64,address)void': void
  'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': void
  'arc58_removeNamedPlugin(string)void': void
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccountTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: AbstractedAccountArgs['obj']['createApplication(address,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['createApplication(address,address)void']
      returns: AbstractedAccountReturns['createApplication(address,address)void']
    }>
    & Record<'arc58_changeAdmin(address)void' | 'arc58_changeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']
      returns: AbstractedAccountReturns['arc58_changeAdmin(address)void']
    }>
    & Record<'arc58_pluginChangeAdmin(uint64,address,address)void' | 'arc58_pluginChangeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']
      returns: AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void']
    }>
    & Record<'arc58_getAdmin()address' | 'arc58_getAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_getAdmin()address']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_getAdmin()address']
      returns: AbstractedAccountReturns['arc58_getAdmin()address']
    }>
    & Record<'arc58_verifyAuthAddr()void' | 'arc58_verifyAuthAddr', {
      argsObj: AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']
      returns: AbstractedAccountReturns['arc58_verifyAuthAddr()void']
    }>
    & Record<'arc58_rekeyTo(address,bool)void' | 'arc58_rekeyTo', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']
      returns: AbstractedAccountReturns['arc58_rekeyTo(address,bool)void']
    }>
    & Record<'arc58_canCall(uint64,address)bool' | 'arc58_canCall', {
      argsObj: AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']
      /**
       * whether the plugin can be called via txn sender or globally
       */
      returns: AbstractedAccountReturns['arc58_canCall(uint64,address)bool']
    }>
    & Record<'arc58_rekeyToPlugin(uint64)void' | 'arc58_rekeyToPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']
      returns: AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void']
    }>
    & Record<'arc58_rekeyToNamedPlugin(string)void' | 'arc58_rekeyToNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void']
    }>
    & Record<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void' | 'arc58_addPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
      returns: AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
    }>
    & Record<'arc58_removePlugin(uint64,address)void' | 'arc58_removePlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']
      returns: AbstractedAccountReturns['arc58_removePlugin(uint64,address)void']
    }>
    & Record<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void' | 'arc58_addNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
      returns: AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
    }>
    & Record<'arc58_removeNamedPlugin(string)void' | 'arc58_removeNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_removeNamedPlugin(string)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * The admin of the abstracted account. This address can add plugins and initiate rekeys
         */
        admin: BinaryState
        /**
         * The address this app controls
         */
        controlledAddress: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {
        /**
         * Plugins that add functionality to the controlledAddress and the account that has permission to use it.
         */
        plugins: PluginInfo
        /**
         * Plugins that have been given a name for discoverability
         */
        namedPlugins: PluginsKey
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AbstractedAccountSignatures = keyof AbstractedAccountTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AbstractedAccountNonVoidMethodSignatures = keyof AbstractedAccountTypes['methods'] extends infer T ? T extends keyof AbstractedAccountTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AbstractedAccountTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AbstractedAccountTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication(address,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AbstractedAccountCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AbstractedAccount smart contract
 */
export abstract class AbstractedAccountParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AbstractedAccountCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,address)void':
            return AbstractedAccountParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AbstractedAccount smart contract using the createApplication(address,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.controlledAddress, params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc58_changeAdmin(address)void ABI method
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_changeAdmin(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_pluginChangeAdmin(uint64,address,address)void ABI method
   *
   * Attempt to change the admin via plugin.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_pluginChangeAdmin(uint64,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.allowedCaller, params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_getAdmin()address ABI method
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_getAdmin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_verifyAuthAddr()void ABI method
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_verifyAuthAddr()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyTo(address,bool)void ABI method
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyTo(address,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address, params.args.flash],
    }
  }
  /**
   * Constructs a no op call for the arc58_canCall(uint64,address)bool ABI method
   *
   * check whether the plugin can be used
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_canCall(uint64,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.address],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToPlugin(uint64)void ABI method
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToPlugin(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToNamedPlugin(string)void ABI method
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method
   *
   * Add an app to the list of approved plugins
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addPlugin(uint64,address,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges],
    }
  }
  /**
   * Constructs a no op call for the arc58_removePlugin(uint64,address)void ABI method
   *
   * Remove an app from the list of approved plugins
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removePlugin(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller],
    }
  }
  /**
   * Constructs a no op call for the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method
   *
   * Add a named plugin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges],
    }
  }
  /**
   * Constructs a no op call for the arc58_removeNamedPlugin(string)void ABI method
   *
   * Remove a named plugin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removeNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AbstractedAccount smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AbstractedAccountFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AbstractedAccountFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AbstractedAccountClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AbstractedAccountClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AbstractedAccountDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AbstractedAccountParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AbstractedAccountCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AbstractedAccountClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using an ABI method call using the createApplication(address,address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AbstractedAccountParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AbstractedAccountReturns['createApplication(address,address)void']) }, appClient: new AbstractedAccountClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AbstractedAccount app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AbstractedAccountNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AbstractedAccountClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AbstractedAccountClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call params: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58ChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_changeAdmin(address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58PluginChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58GetAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_getAdmin()address'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58VerifyAuthAddr: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_verifyAuthAddr()void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyTo: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call result: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58CanCall(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_canCall(uint64,address)bool'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemovePlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removePlugin(uint64,address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemoveNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AbstractedAccountClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> = {args: []}) {
    const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    return result.return as unknown as AbstractedAccountReturns['arc58_getAdmin()address']
  }

  /**
   * Makes a readonly (simulated) call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * check whether the plugin can be used
   *
   * @param params The params for the smart contract call
   * @returns The call result: whether the plugin can be called via txn sender or globally
   */
  async arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']>) {
    const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    return result.return as unknown as AbstractedAccountReturns['arc58_canCall(uint64,address)bool']
  }

  /**
   * Methods to access state for the current AbstractedAccount app
   */
  state = {
    /**
     * Methods to access global state for the current AbstractedAccount app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          controlledAddress: new BinaryStateValue(result.controlledAddress),
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the controlledAddress key in global state
       */
      controlledAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("controlledAddress")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current AbstractedAccount app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          plugins: result.plugins,
          namedPlugins: result.namedPlugins,
        }
      },
      /**
       * Get the current value of the plugins key in box state
       */
      plugins: async (): Promise<PluginInfo | undefined> => { return (await this.appClient.state.box.getValue("plugins")) as PluginInfo | undefined },
      /**
       * Get the current value of the namedPlugins key in box state
       */
      namedPlugins: async (): Promise<PluginsKey | undefined> => { return (await this.appClient.state.box.getValue("namedPlugins")) as PluginsKey | undefined },
    },
  }

  public newGroup(): AbstractedAccountComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc58_changeAdmin(address)void method call against the AbstractedAccount contract
       */
      arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58ChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_pluginChangeAdmin(uint64,address,address)void method call against the AbstractedAccount contract
       */
      arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58PluginChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_getAdmin()address method call against the AbstractedAccount contract
       */
      arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58GetAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_getAdmin()address', v))
        return this
      },
      /**
       * Add a arc58_verifyAuthAddr()void method call against the AbstractedAccount contract
       */
      arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58VerifyAuthAddr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyTo(address,bool)void method call against the AbstractedAccount contract
       */
      arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyTo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_canCall(uint64,address)bool method call against the AbstractedAccount contract
       */
      arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58CanCall(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_canCall(uint64,address)bool', v))
        return this
      },
      /**
       * Add a arc58_rekeyToPlugin(uint64)void method call against the AbstractedAccount contract
       */
      arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyToNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addPlugin(uint64,address,uint64,uint64,bool)void method call against the AbstractedAccount contract
       */
      arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removePlugin(uint64,address)void method call against the AbstractedAccount contract
       */
      arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemovePlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void method call against the AbstractedAccount contract
       */
      arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removeNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemoveNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AbstractedAccount contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc58_changeAdmin(address)void ABI method.
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58ChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_changeAdmin(address)void'] | undefined]>

  /**
   * Calls the arc58_pluginChangeAdmin(uint64,address,address)void ABI method.
   *
   * Attempt to change the admin via plugin.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58PluginChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'] | undefined]>

  /**
   * Calls the arc58_getAdmin()address ABI method.
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58GetAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_getAdmin()address'] | undefined]>

  /**
   * Calls the arc58_verifyAuthAddr()void ABI method.
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58VerifyAuthAddr(params?: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_verifyAuthAddr()void'] | undefined]>

  /**
   * Calls the arc58_rekeyTo(address,bool)void ABI method.
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyTo(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'] | undefined]>

  /**
   * Calls the arc58_canCall(uint64,address)bool ABI method.
   *
   * check whether the plugin can be used
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58CanCall(params?: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_canCall(uint64,address)bool'] | undefined]>

  /**
   * Calls the arc58_rekeyToPlugin(uint64)void ABI method.
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void'] | undefined]>

  /**
   * Calls the arc58_rekeyToNamedPlugin(string)void ABI method.
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'] | undefined]>

  /**
   * Calls the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method.
   *
   * Add an app to the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the arc58_removePlugin(uint64,address)void ABI method.
   *
   * Remove an app from the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemovePlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removePlugin(uint64,address)void'] | undefined]>

  /**
   * Calls the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method.
   *
   * Add a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the arc58_removeNamedPlugin(string)void ABI method.
   *
   * Remove a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

