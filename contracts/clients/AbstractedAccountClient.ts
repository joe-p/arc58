/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc58_changeAdmin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_pluginChangeAdmin(uint64,address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_getAdmin()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_verifyAuthAddr()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_rekeyTo(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_canCall(uint64,address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_rekeyToPlugin(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_rekeyToNamedPlugin(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_addPlugin(uint64,address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_removePlugin(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_removeNamedPlugin(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "admin": {
          "type": "bytes",
          "key": "a"
        },
        "controlledAddress": {
          "type": "bytes",
          "key": "c"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AbstractedAccount",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Create an abstracted account application.\nThis is not part of ARC58 and implementation specific.",
        "args": [
          {
            "name": "controlledAddress",
            "type": "address",
            "desc": "The address of the abstracted account. If zeroAddress, then the address of the contract account will be used"
          },
          {
            "name": "admin",
            "type": "address",
            "desc": "The admin for this app"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_changeAdmin",
        "desc": "Attempt to change the admin for this app. Some implementations MAY not support this.",
        "args": [
          {
            "name": "newAdmin",
            "type": "address",
            "desc": "The new admin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_pluginChangeAdmin",
        "desc": "Attempt to change the admin via plugin.",
        "args": [
          {
            "name": "plugin",
            "type": "uint64",
            "desc": "The app calling the plugin"
          },
          {
            "name": "allowedCaller",
            "type": "address",
            "desc": "The address that triggered the plugin"
          },
          {
            "name": "newAdmin",
            "type": "address",
            "desc": "The new admin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_getAdmin",
        "desc": "Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "arc58_verifyAuthAddr",
        "desc": "Verify the abstracted account is rekeyed to this app",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_rekeyTo",
        "desc": "Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.",
        "args": [
          {
            "name": "addr",
            "type": "address",
            "desc": "The address to rekey to"
          },
          {
            "name": "flash",
            "type": "bool",
            "desc": "Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_canCall",
        "desc": "check whether the plugin can be used",
        "readonly": true,
        "args": [
          {
            "name": "plugin",
            "type": "uint64",
            "desc": "the plugin to be rekeyed to"
          },
          {
            "name": "address",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "whether the plugin can be called via txn sender or globally"
        }
      },
      {
        "name": "arc58_rekeyToPlugin",
        "desc": "Temporarily rekey to an approved plugin app address",
        "args": [
          {
            "name": "plugin",
            "type": "uint64",
            "desc": "The app to rekey to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_rekeyToNamedPlugin",
        "desc": "Temporarily rekey to a named plugin app address",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "The name of the plugin to rekey to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_addPlugin",
        "desc": "Add an app to the list of approved plugins",
        "args": [
          {
            "name": "app",
            "type": "uint64",
            "desc": "The app to add"
          },
          {
            "name": "allowedCaller",
            "type": "address",
            "desc": "The address of that's allowed to call the app\nor the global zero address for all addresses"
          },
          {
            "name": "lastValidRound",
            "type": "uint64",
            "desc": "The round when the permission expires"
          },
          {
            "name": "cooldown",
            "type": "uint64",
            "desc": "The number of rounds that must pass before the plugin can be called again"
          },
          {
            "name": "adminPrivileges",
            "type": "bool",
            "desc": "Whether the plugin has permissions to change the admin account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_removePlugin",
        "desc": "Remove an app from the list of approved plugins",
        "args": [
          {
            "name": "app",
            "type": "uint64",
            "desc": "The app to remove"
          },
          {
            "name": "allowedCaller",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_addNamedPlugin",
        "desc": "Add a named plugin",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "The plugin name"
          },
          {
            "name": "app",
            "type": "uint64",
            "desc": "The plugin app"
          },
          {
            "name": "allowedCaller",
            "type": "address",
            "desc": "The address of that's allowed to call the app\nor the global zero address for all addresses"
          },
          {
            "name": "lastValidRound",
            "type": "uint64",
            "desc": "The round when the permission expires"
          },
          {
            "name": "cooldown",
            "type": "uint64",
            "desc": "The number of rounds that must pass before the plugin can be called again"
          },
          {
            "name": "adminPrivileges",
            "type": "bool",
            "desc": "Whether the plugin has permissions to change the admin account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_removeNamedPlugin",
        "desc": "Remove a named plugin",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "The plugin name"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccount = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: {
        /**
         * The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
         */
        controlledAddress: string
        /**
         * The admin for this app
         */
        admin: string
      }
      argsTuple: [controlledAddress: string, admin: string]
      returns: void
    }>
    & Record<'arc58_changeAdmin(address)void' | 'arc58_changeAdmin', {
      argsObj: {
        /**
         * The new admin
         */
        newAdmin: string
      }
      argsTuple: [newAdmin: string]
      returns: void
    }>
    & Record<'arc58_pluginChangeAdmin(uint64,address,address)void' | 'arc58_pluginChangeAdmin', {
      argsObj: {
        /**
         * The app calling the plugin
         */
        plugin: bigint | number
        /**
         * The address that triggered the plugin
         */
        allowedCaller: string
        /**
         * The new admin
         */
        newAdmin: string
      }
      argsTuple: [plugin: bigint | number, allowedCaller: string, newAdmin: string]
      returns: void
    }>
    & Record<'arc58_getAdmin()address' | 'arc58_getAdmin', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'arc58_verifyAuthAddr()void' | 'arc58_verifyAuthAddr', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'arc58_rekeyTo(address,bool)void' | 'arc58_rekeyTo', {
      argsObj: {
        /**
         * The address to rekey to
         */
        addr: string
        /**
         * Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
         */
        flash: boolean
      }
      argsTuple: [addr: string, flash: boolean]
      returns: void
    }>
    & Record<'arc58_canCall(uint64,address)bool' | 'arc58_canCall', {
      argsObj: {
        /**
         * the plugin to be rekeyed to
         */
        plugin: bigint | number
        address: string
      }
      argsTuple: [plugin: bigint | number, address: string]
      /**
       * whether the plugin can be called via txn sender or globally
       */
      returns: boolean
    }>
    & Record<'arc58_rekeyToPlugin(uint64)void' | 'arc58_rekeyToPlugin', {
      argsObj: {
        /**
         * The app to rekey to
         */
        plugin: bigint | number
      }
      argsTuple: [plugin: bigint | number]
      returns: void
    }>
    & Record<'arc58_rekeyToNamedPlugin(string)void' | 'arc58_rekeyToNamedPlugin', {
      argsObj: {
        /**
         * The name of the plugin to rekey to
         */
        name: string
      }
      argsTuple: [name: string]
      returns: void
    }>
    & Record<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void' | 'arc58_addPlugin', {
      argsObj: {
        /**
         * The app to add
         */
        app: bigint | number
        /**
         * The address of that's allowed to call the app
or the global zero address for all addresses
         */
        allowedCaller: string
        /**
         * The round when the permission expires
         */
        lastValidRound: bigint | number
        /**
         * The number of rounds that must pass before the plugin can be called again
         */
        cooldown: bigint | number
        /**
         * Whether the plugin has permissions to change the admin account
         */
        adminPrivileges: boolean
      }
      argsTuple: [app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
      returns: void
    }>
    & Record<'arc58_removePlugin(uint64,address)void' | 'arc58_removePlugin', {
      argsObj: {
        /**
         * The app to remove
         */
        app: bigint | number
        allowedCaller: string
      }
      argsTuple: [app: bigint | number, allowedCaller: string]
      returns: void
    }>
    & Record<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void' | 'arc58_addNamedPlugin', {
      argsObj: {
        /**
         * The plugin name
         */
        name: string
        /**
         * The plugin app
         */
        app: bigint | number
        /**
         * The address of that's allowed to call the app
or the global zero address for all addresses
         */
        allowedCaller: string
        /**
         * The round when the permission expires
         */
        lastValidRound: bigint | number
        /**
         * The number of rounds that must pass before the plugin can be called again
         */
        cooldown: bigint | number
        /**
         * Whether the plugin has permissions to change the admin account
         */
        adminPrivileges: boolean
      }
      argsTuple: [name: string, app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
      returns: void
    }>
    & Record<'arc58_removeNamedPlugin(string)void' | 'arc58_removeNamedPlugin', {
      argsObj: {
        /**
         * The plugin name
         */
        name: string
      }
      argsTuple: [name: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'a'?: BinaryState
      'c'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AbstractedAccountSig = keyof AbstractedAccount['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AbstractedAccountSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSig> = AbstractedAccount['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSig> = AbstractedAccount['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AbstractedAccountCreateCalls = (typeof AbstractedAccountCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | (TypedCallParams<'createApplication(address,address)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AbstractedAccountCreateCalls) => AbstractedAccountCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AbstractedAccountCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AbstractedAccount smart contract using the createApplication(address,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.controlledAddress, args.admin],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc58_changeAdmin(address)void ABI method
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58ChangeAdmin(args: MethodArgs<'arc58_changeAdmin(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_changeAdmin(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newAdmin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_pluginChangeAdmin(uint64,address,address)void ABI method
   *
   * Attempt to change the admin via plugin.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58PluginChangeAdmin(args: MethodArgs<'arc58_pluginChangeAdmin(uint64,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_pluginChangeAdmin(uint64,address,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.plugin, args.allowedCaller, args.newAdmin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_getAdmin()address ABI method
   *
   * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
because different implementations may have different ways of determining the admin.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58GetAdmin(args: MethodArgs<'arc58_getAdmin()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_getAdmin()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_verifyAuthAddr()void ABI method
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58VerifyAuthAddr(args: MethodArgs<'arc58_verifyAuthAddr()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_verifyAuthAddr()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyTo(address,bool)void ABI method
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58RekeyTo(args: MethodArgs<'arc58_rekeyTo(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_rekeyTo(address,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr, args.flash],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_canCall(uint64,address)bool ABI method
   *
   * check whether the plugin can be used
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58CanCall(args: MethodArgs<'arc58_canCall(uint64,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_canCall(uint64,address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.plugin, args.address],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToPlugin(uint64)void ABI method
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58RekeyToPlugin(args: MethodArgs<'arc58_rekeyToPlugin(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_rekeyToPlugin(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.plugin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToNamedPlugin(string)void ABI method
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58RekeyToNamedPlugin(args: MethodArgs<'arc58_rekeyToNamedPlugin(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_rekeyToNamedPlugin(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method
   *
   * Add an app to the list of approved plugins
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58AddPlugin(args: MethodArgs<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_addPlugin(uint64,address,uint64,uint64,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app, args.allowedCaller, args.lastValidRound, args.cooldown, args.adminPrivileges],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_removePlugin(uint64,address)void ABI method
   *
   * Remove an app from the list of approved plugins
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58RemovePlugin(args: MethodArgs<'arc58_removePlugin(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_removePlugin(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app, args.allowedCaller],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method
   *
   * Add a named plugin
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58AddNamedPlugin(args: MethodArgs<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.app, args.allowedCaller, args.lastValidRound, args.cooldown, args.adminPrivileges],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc58_removeNamedPlugin(string)void ABI method
   *
   * Remove a named plugin
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc58RemoveNamedPlugin(args: MethodArgs<'arc58_removeNamedPlugin(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc58_removeNamedPlugin(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AbstractedAccount['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AbstractedAccountDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AbstractedAccountCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(address,address)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AbstractedAccountCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the arc58_changeAdmin(address)void ABI method.
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58ChangeAdmin(args: MethodArgs<'arc58_changeAdmin(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58ChangeAdmin(args, params))
  }

  /**
   * Calls the arc58_pluginChangeAdmin(uint64,address,address)void ABI method.
   *
   * Attempt to change the admin via plugin.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58PluginChangeAdmin(args: MethodArgs<'arc58_pluginChangeAdmin(uint64,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58PluginChangeAdmin(args, params))
  }

  /**
   * Calls the arc58_getAdmin()address ABI method.
   *
   * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
because different implementations may have different ways of determining the admin.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58GetAdmin(args: MethodArgs<'arc58_getAdmin()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58GetAdmin(args, params))
  }

  /**
   * Calls the arc58_verifyAuthAddr()void ABI method.
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58VerifyAuthAddr(args: MethodArgs<'arc58_verifyAuthAddr()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58VerifyAuthAddr(args, params))
  }

  /**
   * Calls the arc58_rekeyTo(address,bool)void ABI method.
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58RekeyTo(args: MethodArgs<'arc58_rekeyTo(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58RekeyTo(args, params))
  }

  /**
   * Calls the arc58_canCall(uint64,address)bool ABI method.
   *
   * check whether the plugin can be used
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: whether the plugin can be called via txn sender or globally
   */
  public arc58CanCall(args: MethodArgs<'arc58_canCall(uint64,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58CanCall(args, params))
  }

  /**
   * Calls the arc58_rekeyToPlugin(uint64)void ABI method.
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58RekeyToPlugin(args: MethodArgs<'arc58_rekeyToPlugin(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58RekeyToPlugin(args, params))
  }

  /**
   * Calls the arc58_rekeyToNamedPlugin(string)void ABI method.
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58RekeyToNamedPlugin(args: MethodArgs<'arc58_rekeyToNamedPlugin(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58RekeyToNamedPlugin(args, params))
  }

  /**
   * Calls the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method.
   *
   * Add an app to the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58AddPlugin(args: MethodArgs<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58AddPlugin(args, params))
  }

  /**
   * Calls the arc58_removePlugin(uint64,address)void ABI method.
   *
   * Remove an app from the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58RemovePlugin(args: MethodArgs<'arc58_removePlugin(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58RemovePlugin(args, params))
  }

  /**
   * Calls the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method.
   *
   * Add a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58AddNamedPlugin(args: MethodArgs<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58AddNamedPlugin(args, params))
  }

  /**
   * Calls the arc58_removeNamedPlugin(string)void ABI method.
   *
   * Remove a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc58RemoveNamedPlugin(args: MethodArgs<'arc58_removeNamedPlugin(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.arc58RemoveNamedPlugin(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AbstractedAccount['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get a() {
        return AbstractedAccountClient.getBinaryState(state, 'a')
      },
      get c() {
        return AbstractedAccountClient.getBinaryState(state, 'c')
      },
    }
  }

  public compose(): AbstractedAccountComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      arc58ChangeAdmin(args: MethodArgs<'arc58_changeAdmin(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58ChangeAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58PluginChangeAdmin(args: MethodArgs<'arc58_pluginChangeAdmin(uint64,address,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58PluginChangeAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58GetAdmin(args: MethodArgs<'arc58_getAdmin()address'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58GetAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58VerifyAuthAddr(args: MethodArgs<'arc58_verifyAuthAddr()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58VerifyAuthAddr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58RekeyTo(args: MethodArgs<'arc58_rekeyTo(address,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58RekeyTo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58CanCall(args: MethodArgs<'arc58_canCall(uint64,address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58CanCall(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58RekeyToPlugin(args: MethodArgs<'arc58_rekeyToPlugin(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58RekeyToPlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58RekeyToNamedPlugin(args: MethodArgs<'arc58_rekeyToNamedPlugin(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58RekeyToNamedPlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58AddPlugin(args: MethodArgs<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58AddPlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58RemovePlugin(args: MethodArgs<'arc58_removePlugin(uint64,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58RemovePlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58AddNamedPlugin(args: MethodArgs<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58AddNamedPlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc58RemoveNamedPlugin(args: MethodArgs<'arc58_removeNamedPlugin(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc58RemoveNamedPlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc58_changeAdmin(address)void ABI method.
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58ChangeAdmin(args: MethodArgs<'arc58_changeAdmin(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_changeAdmin(address)void'>]>

  /**
   * Calls the arc58_pluginChangeAdmin(uint64,address,address)void ABI method.
   *
   * Attempt to change the admin via plugin.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58PluginChangeAdmin(args: MethodArgs<'arc58_pluginChangeAdmin(uint64,address,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_pluginChangeAdmin(uint64,address,address)void'>]>

  /**
   * Calls the arc58_getAdmin()address ABI method.
   *
   * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
because different implementations may have different ways of determining the admin.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58GetAdmin(args: MethodArgs<'arc58_getAdmin()address'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_getAdmin()address'>]>

  /**
   * Calls the arc58_verifyAuthAddr()void ABI method.
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58VerifyAuthAddr(args: MethodArgs<'arc58_verifyAuthAddr()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_verifyAuthAddr()void'>]>

  /**
   * Calls the arc58_rekeyTo(address,bool)void ABI method.
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyTo(args: MethodArgs<'arc58_rekeyTo(address,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_rekeyTo(address,bool)void'>]>

  /**
   * Calls the arc58_canCall(uint64,address)bool ABI method.
   *
   * check whether the plugin can be used
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58CanCall(args: MethodArgs<'arc58_canCall(uint64,address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_canCall(uint64,address)bool'>]>

  /**
   * Calls the arc58_rekeyToPlugin(uint64)void ABI method.
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToPlugin(args: MethodArgs<'arc58_rekeyToPlugin(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_rekeyToPlugin(uint64)void'>]>

  /**
   * Calls the arc58_rekeyToNamedPlugin(string)void ABI method.
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToNamedPlugin(args: MethodArgs<'arc58_rekeyToNamedPlugin(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_rekeyToNamedPlugin(string)void'>]>

  /**
   * Calls the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method.
   *
   * Add an app to the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddPlugin(args: MethodArgs<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void'>]>

  /**
   * Calls the arc58_removePlugin(uint64,address)void ABI method.
   *
   * Remove an app from the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemovePlugin(args: MethodArgs<'arc58_removePlugin(uint64,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_removePlugin(uint64,address)void'>]>

  /**
   * Calls the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method.
   *
   * Add a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddNamedPlugin(args: MethodArgs<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'>]>

  /**
   * Calls the arc58_removeNamedPlugin(string)void ABI method.
   *
   * Remove a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveNamedPlugin(args: MethodArgs<'arc58_removeNamedPlugin(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'arc58_removeNamedPlugin(string)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
