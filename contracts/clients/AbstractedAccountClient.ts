/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AbstractedAccount","desc":"","methods":[{"name":"createApplication","desc":"Create an abstracted account application.\nThis is not part of ARC58 and implementation specific.","args":[{"name":"controlledAddress","type":"address","desc":"The address of the abstracted account. If zeroAddress, then the address of the contract account will be used"},{"name":"admin","type":"address","desc":"The admin for this app"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc58_changeAdmin","desc":"Attempt to change the admin for this app. Some implementations MAY not support this.","args":[{"name":"newAdmin","type":"address","desc":"The new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_pluginChangeAdmin","desc":"Attempt to change the admin via plugin.","args":[{"name":"plugin","type":"uint64","desc":"The app calling the plugin"},{"name":"allowedCaller","type":"address","desc":"The address that triggered the plugin"},{"name":"newAdmin","type":"address","desc":"The new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_getAdmin","desc":"Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin.","readonly":true,"args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_verifyAuthAddr","desc":"Verify the abstracted account is rekeyed to this app","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_rekeyTo","desc":"Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.","args":[{"name":"addr","type":"address","desc":"The address to rekey to"},{"name":"flash","type":"bool","desc":"Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_canCall","desc":"check whether the plugin can be used","readonly":true,"args":[{"name":"plugin","type":"uint64","desc":"the plugin to be rekeyed to"},{"name":"address","type":"address"}],"returns":{"type":"bool","desc":"whether the plugin can be called via txn sender or globally"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_rekeyToPlugin","desc":"Temporarily rekey to an approved plugin app address","args":[{"name":"plugin","type":"uint64","desc":"The app to rekey to"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_rekeyToNamedPlugin","desc":"Temporarily rekey to a named plugin app address","args":[{"name":"name","type":"string","desc":"The name of the plugin to rekey to"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_addPlugin","desc":"Add an app to the list of approved plugins","args":[{"name":"app","type":"uint64","desc":"The app to add"},{"name":"allowedCaller","type":"address","desc":"The address of that's allowed to call the app\nor the global zero address for all addresses"},{"name":"lastValidRound","type":"uint64","desc":"The round when the permission expires"},{"name":"cooldown","type":"uint64","desc":"The number of rounds that must pass before the plugin can be called again"},{"name":"adminPrivileges","type":"bool","desc":"Whether the plugin has permissions to change the admin account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_removePlugin","desc":"Remove an app from the list of approved plugins","args":[{"name":"app","type":"uint64","desc":"The app to remove"},{"name":"allowedCaller","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_addNamedPlugin","desc":"Add a named plugin","args":[{"name":"name","type":"string","desc":"The plugin name"},{"name":"app","type":"uint64","desc":"The plugin app"},{"name":"allowedCaller","type":"address","desc":"The address of that's allowed to call the app\nor the global zero address for all addresses"},{"name":"lastValidRound","type":"uint64","desc":"The round when the permission expires"},{"name":"cooldown","type":"uint64","desc":"The number of rounds that must pass before the plugin can be called again"},{"name":"adminPrivileges","type":"bool","desc":"Whether the plugin has permissions to change the admin account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_removeNamedPlugin","desc":"Remove a named plugin","args":[{"name":"name","type":"string","desc":"The plugin name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"PluginInfo":[{"name":"lastValidRound","type":"uint64"},{"name":"cooldown","type":"uint64"},{"name":"lastCalled","type":"uint64"},{"name":"adminPrivileges","type":"bool"}],"PluginsKey":[{"name":"application","type":"uint64"},{"name":"allowedCaller","type":"address"}]},"state":{"schema":{"global":{"bytes":2,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"admin":{"key":"YQ==","keyType":"AVMBytes","valueType":"address"},"controlledAddress":{"key":"Yw==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"plugins":{"keyType":"PluginsKey","valueType":"PluginInfo","prefix":"p"},"namedPlugins":{"keyType":"AVMBytes","valueType":"PluginsKey","prefix":"n"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/abstracted_account.algo.ts:21","pc":[0]},{"teal":2,"source":"contracts/abstracted_account.algo.ts:21","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/abstracted_account.algo.ts:21","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]},{"teal":15,"source":"contracts/abstracted_account.algo.ts:21","pc":[39,40]},{"teal":16,"source":"contracts/abstracted_account.algo.ts:21","pc":[41]},{"teal":17,"source":"contracts/abstracted_account.algo.ts:21","pc":[42]},{"teal":18,"source":"contracts/abstracted_account.algo.ts:21","pc":[43]},{"teal":19,"source":"contracts/abstracted_account.algo.ts:21","pc":[44,45]},{"teal":20,"source":"contracts/abstracted_account.algo.ts:21","pc":[46]},{"teal":21,"source":"contracts/abstracted_account.algo.ts:21","pc":[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72]},{"teal":25,"source":"contracts/abstracted_account.algo.ts:21","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[73]},{"teal":31,"source":"contracts/abstracted_account.algo.ts:44","pc":[74,75,76]},{"teal":34,"source":"contracts/abstracted_account.algo.ts:44","pc":[77]},{"teal":35,"source":"contracts/abstracted_account.algo.ts:44","pc":[78,79]},{"teal":39,"source":"contracts/abstracted_account.algo.ts:45","pc":[80]},{"teal":40,"source":"contracts/abstracted_account.algo.ts:45","pc":[81,82]},{"teal":44,"source":"contracts/abstracted_account.algo.ts:47","pc":[83,84]},{"teal":45,"source":"contracts/abstracted_account.algo.ts:47","pc":[85]},{"teal":46,"source":"contracts/abstracted_account.algo.ts:47","pc":[86]},{"teal":47,"source":"contracts/abstracted_account.algo.ts:47","pc":[87,88]},{"teal":52,"source":"contracts/abstracted_account.algo.ts:47","pc":[89,90]},{"teal":53,"source":"contracts/abstracted_account.algo.ts:47","pc":[91,92]},{"teal":54,"source":"contracts/abstracted_account.algo.ts:47","pc":[93]},{"teal":55,"source":"contracts/abstracted_account.algo.ts:47","pc":[94,95,96]},{"teal":59,"source":"contracts/abstracted_account.algo.ts:48","pc":[97,98]},{"teal":60,"source":"contracts/abstracted_account.algo.ts:48","pc":[99,100]},{"teal":65,"source":"contracts/abstracted_account.algo.ts:51","pc":[101,102]},{"teal":66,"source":"contracts/abstracted_account.algo.ts:51","pc":[103,104]},{"teal":67,"source":"contracts/abstracted_account.algo.ts:51","pc":[105]},{"teal":68,"source":"contracts/abstracted_account.algo.ts:51","pc":[106]},{"teal":69,"source":"contracts/abstracted_account.algo.ts:51","pc":[107]},{"teal":70,"source":"contracts/abstracted_account.algo.ts:51","pc":[108]},{"teal":71,"source":"contracts/abstracted_account.algo.ts:51","pc":[109,110,111]},{"teal":72,"source":"contracts/abstracted_account.algo.ts:51","pc":[112,113]},{"teal":73,"source":"contracts/abstracted_account.algo.ts:51","pc":[114,115]},{"teal":74,"source":"contracts/abstracted_account.algo.ts:51","pc":[116,117]},{"teal":75,"source":"contracts/abstracted_account.algo.ts:51","pc":[118]},{"teal":76,"source":"contracts/abstracted_account.algo.ts:51","pc":[119]},{"teal":79,"source":"contracts/abstracted_account.algo.ts:51","pc":[120,121,122]},{"teal":84,"source":"contracts/abstracted_account.algo.ts:52","pc":[123]},{"teal":85,"source":"contracts/abstracted_account.algo.ts:52","pc":[124,125]},{"teal":86,"source":"contracts/abstracted_account.algo.ts:53","pc":[126,127,128]},{"teal":96,"source":"contracts/abstracted_account.algo.ts:58","pc":[129,130]},{"teal":97,"source":"contracts/abstracted_account.algo.ts:58","pc":[131,132]},{"teal":98,"source":"contracts/abstracted_account.algo.ts:58","pc":[133]},{"teal":99,"source":"contracts/abstracted_account.algo.ts:58","pc":[134]},{"teal":100,"source":"contracts/abstracted_account.algo.ts:58","pc":[135]},{"teal":101,"source":"contracts/abstracted_account.algo.ts:58","pc":[136,137,138]},{"teal":102,"source":"contracts/abstracted_account.algo.ts:59","pc":[139,140]},{"teal":103,"source":"contracts/abstracted_account.algo.ts:59","pc":[141,142]},{"teal":104,"source":"contracts/abstracted_account.algo.ts:59","pc":[143,144,145]},{"teal":105,"source":"contracts/abstracted_account.algo.ts:59","pc":[146]},{"teal":106,"source":"contracts/abstracted_account.algo.ts:58","pc":[147]},{"teal":109,"source":"contracts/abstracted_account.algo.ts:59","pc":[148]},{"teal":110,"source":"contracts/abstracted_account.algo.ts:59","pc":[149,150,151]},{"teal":111,"source":"contracts/abstracted_account.algo.ts:60","pc":[152,153]},{"teal":112,"source":"contracts/abstracted_account.algo.ts:60","pc":[154,155]},{"teal":113,"source":"contracts/abstracted_account.algo.ts:60","pc":[156]},{"teal":114,"source":"contracts/abstracted_account.algo.ts:60","pc":[157]},{"teal":115,"source":"contracts/abstracted_account.algo.ts:59","pc":[158]},{"teal":118,"source":"contracts/abstracted_account.algo.ts:60","pc":[159]},{"teal":119,"source":"contracts/abstracted_account.algo.ts:60","pc":[160,161,162]},{"teal":120,"source":"contracts/abstracted_account.algo.ts:61","pc":[163,164]},{"teal":121,"source":"contracts/abstracted_account.algo.ts:61","pc":[165,166]},{"teal":122,"source":"contracts/abstracted_account.algo.ts:61","pc":[167]},{"teal":123,"source":"contracts/abstracted_account.algo.ts:61","pc":[168]},{"teal":124,"source":"contracts/abstracted_account.algo.ts:60","pc":[169]},{"teal":127,"source":"contracts/abstracted_account.algo.ts:61","pc":[170]},{"teal":128,"source":"contracts/abstracted_account.algo.ts:61","pc":[171,172,173]},{"teal":129,"source":"contracts/abstracted_account.algo.ts:62","pc":[174,175]},{"teal":130,"source":"contracts/abstracted_account.algo.ts:62","pc":[176,177,178]},{"teal":131,"source":"contracts/abstracted_account.algo.ts:62","pc":[179,180]},{"teal":132,"source":"contracts/abstracted_account.algo.ts:62","pc":[181]},{"teal":133,"source":"contracts/abstracted_account.algo.ts:61","pc":[182]},{"teal":136,"source":"contracts/abstracted_account.algo.ts:57","pc":[183,184,185]},{"teal":141,"source":"contracts/abstracted_account.algo.ts:64","pc":[186]},{"teal":142,"source":"contracts/abstracted_account.algo.ts:64","pc":[187,188]},{"teal":143,"source":"contracts/abstracted_account.algo.ts:65","pc":[189,190,191]},{"teal":150,"source":"contracts/abstracted_account.algo.ts:47","pc":[192,193]},{"teal":151,"source":"contracts/abstracted_account.algo.ts:47","pc":[194]},{"teal":152,"source":"contracts/abstracted_account.algo.ts:47","pc":[195]},{"teal":153,"source":"contracts/abstracted_account.algo.ts:47","pc":[196,197]},{"teal":154,"source":"contracts/abstracted_account.algo.ts:47","pc":[198,199,200]},{"teal":159,"source":"contracts/abstracted_account.algo.ts:69","pc":[201,202]},{"teal":160,"source":"contracts/abstracted_account.algo.ts:69","pc":[203]},{"teal":161,"source":"contracts/abstracted_account.algo.ts:44","pc":[204]},{"teal":167,"source":"contracts/abstracted_account.algo.ts:75","pc":[205,206,207]},{"teal":170,"source":"contracts/abstracted_account.algo.ts:75","pc":[208]},{"teal":171,"source":"contracts/abstracted_account.algo.ts:75","pc":[209,210]},{"teal":175,"source":"contracts/abstracted_account.algo.ts:76","pc":[211]},{"teal":176,"source":"contracts/abstracted_account.algo.ts:76","pc":[212,213]},{"teal":180,"source":"contracts/abstracted_account.algo.ts:78","pc":[214,215]},{"teal":181,"source":"contracts/abstracted_account.algo.ts:78","pc":[216]},{"teal":182,"source":"contracts/abstracted_account.algo.ts:78","pc":[217]},{"teal":183,"source":"contracts/abstracted_account.algo.ts:78","pc":[218,219]},{"teal":188,"source":"contracts/abstracted_account.algo.ts:78","pc":[220,221]},{"teal":189,"source":"contracts/abstracted_account.algo.ts:78","pc":[222,223]},{"teal":190,"source":"contracts/abstracted_account.algo.ts:78","pc":[224]},{"teal":191,"source":"contracts/abstracted_account.algo.ts:78","pc":[225,226,227]},{"teal":195,"source":"contracts/abstracted_account.algo.ts:79","pc":[228,229]},{"teal":196,"source":"contracts/abstracted_account.algo.ts:79","pc":[230,231]},{"teal":201,"source":"contracts/abstracted_account.algo.ts:82","pc":[232,233]},{"teal":202,"source":"contracts/abstracted_account.algo.ts:82","pc":[234,235]},{"teal":203,"source":"contracts/abstracted_account.algo.ts:82","pc":[236]},{"teal":204,"source":"contracts/abstracted_account.algo.ts:82","pc":[237]},{"teal":205,"source":"contracts/abstracted_account.algo.ts:82","pc":[238]},{"teal":206,"source":"contracts/abstracted_account.algo.ts:82","pc":[239]},{"teal":207,"source":"contracts/abstracted_account.algo.ts:82","pc":[240,241,242]},{"teal":208,"source":"contracts/abstracted_account.algo.ts:82","pc":[243,244]},{"teal":209,"source":"contracts/abstracted_account.algo.ts:82","pc":[245,246]},{"teal":210,"source":"contracts/abstracted_account.algo.ts:82","pc":[247,248]},{"teal":211,"source":"contracts/abstracted_account.algo.ts:82","pc":[249]},{"teal":212,"source":"contracts/abstracted_account.algo.ts:82","pc":[250]},{"teal":215,"source":"contracts/abstracted_account.algo.ts:82","pc":[251,252,253]},{"teal":220,"source":"contracts/abstracted_account.algo.ts:83","pc":[254]},{"teal":221,"source":"contracts/abstracted_account.algo.ts:83","pc":[255,256]},{"teal":222,"source":"contracts/abstracted_account.algo.ts:84","pc":[257,258,259]},{"teal":232,"source":"contracts/abstracted_account.algo.ts:89","pc":[260,261]},{"teal":233,"source":"contracts/abstracted_account.algo.ts:89","pc":[262,263]},{"teal":234,"source":"contracts/abstracted_account.algo.ts:89","pc":[264]},{"teal":235,"source":"contracts/abstracted_account.algo.ts:89","pc":[265]},{"teal":236,"source":"contracts/abstracted_account.algo.ts:89","pc":[266]},{"teal":237,"source":"contracts/abstracted_account.algo.ts:89","pc":[267,268,269]},{"teal":238,"source":"contracts/abstracted_account.algo.ts:90","pc":[270,271]},{"teal":239,"source":"contracts/abstracted_account.algo.ts:90","pc":[272,273]},{"teal":240,"source":"contracts/abstracted_account.algo.ts:90","pc":[274,275,276]},{"teal":241,"source":"contracts/abstracted_account.algo.ts:90","pc":[277]},{"teal":242,"source":"contracts/abstracted_account.algo.ts:89","pc":[278]},{"teal":245,"source":"contracts/abstracted_account.algo.ts:90","pc":[279]},{"teal":246,"source":"contracts/abstracted_account.algo.ts:90","pc":[280,281,282]},{"teal":247,"source":"contracts/abstracted_account.algo.ts:91","pc":[283,284]},{"teal":248,"source":"contracts/abstracted_account.algo.ts:91","pc":[285,286]},{"teal":249,"source":"contracts/abstracted_account.algo.ts:91","pc":[287]},{"teal":250,"source":"contracts/abstracted_account.algo.ts:91","pc":[288]},{"teal":251,"source":"contracts/abstracted_account.algo.ts:90","pc":[289]},{"teal":254,"source":"contracts/abstracted_account.algo.ts:91","pc":[290]},{"teal":255,"source":"contracts/abstracted_account.algo.ts:91","pc":[291,292,293]},{"teal":256,"source":"contracts/abstracted_account.algo.ts:92","pc":[294,295]},{"teal":257,"source":"contracts/abstracted_account.algo.ts:92","pc":[296,297]},{"teal":258,"source":"contracts/abstracted_account.algo.ts:92","pc":[298]},{"teal":259,"source":"contracts/abstracted_account.algo.ts:92","pc":[299]},{"teal":260,"source":"contracts/abstracted_account.algo.ts:91","pc":[300]},{"teal":263,"source":"contracts/abstracted_account.algo.ts:92","pc":[301]},{"teal":264,"source":"contracts/abstracted_account.algo.ts:92","pc":[302,303,304]},{"teal":265,"source":"contracts/abstracted_account.algo.ts:93","pc":[305,306]},{"teal":266,"source":"contracts/abstracted_account.algo.ts:93","pc":[307,308,309]},{"teal":267,"source":"contracts/abstracted_account.algo.ts:93","pc":[310,311]},{"teal":268,"source":"contracts/abstracted_account.algo.ts:93","pc":[312]},{"teal":269,"source":"contracts/abstracted_account.algo.ts:92","pc":[313]},{"teal":272,"source":"contracts/abstracted_account.algo.ts:88","pc":[314,315,316]},{"teal":277,"source":"contracts/abstracted_account.algo.ts:95","pc":[317]},{"teal":278,"source":"contracts/abstracted_account.algo.ts:95","pc":[318,319]},{"teal":279,"source":"contracts/abstracted_account.algo.ts:96","pc":[320,321,322]},{"teal":285,"source":"contracts/abstracted_account.algo.ts:99","pc":[323,324]},{"teal":286,"source":"contracts/abstracted_account.algo.ts:99","pc":[325,326]},{"teal":287,"source":"contracts/abstracted_account.algo.ts:99","pc":[327]},{"teal":288,"source":"contracts/abstracted_account.algo.ts:99","pc":[328]},{"teal":289,"source":"contracts/abstracted_account.algo.ts:99","pc":[329,330,331]},{"teal":292,"source":"contracts/abstracted_account.algo.ts:100","pc":[332,333,334]},{"teal":297,"source":"contracts/abstracted_account.algo.ts:103","pc":[335,336]},{"teal":298,"source":"contracts/abstracted_account.algo.ts:103","pc":[337,338]},{"teal":299,"source":"contracts/abstracted_account.algo.ts:103","pc":[339,340]},{"teal":300,"source":"contracts/abstracted_account.algo.ts:103","pc":[341]},{"teal":303,"source":"contracts/abstracted_account.algo.ts:103","errorMessage":"Invalid app call","pc":[342]},{"teal":307,"source":"contracts/abstracted_account.algo.ts:104","pc":[343,344]},{"teal":308,"source":"contracts/abstracted_account.algo.ts:104","pc":[345,346]},{"teal":309,"source":"contracts/abstracted_account.algo.ts:104","pc":[347]},{"teal":310,"source":"contracts/abstracted_account.algo.ts:104","pc":[348]},{"teal":313,"source":"contracts/abstracted_account.algo.ts:104","errorMessage":"Invalid onCompletion","pc":[349]},{"teal":318,"source":"contracts/abstracted_account.algo.ts:78","pc":[350,351]},{"teal":319,"source":"contracts/abstracted_account.algo.ts:78","pc":[352]},{"teal":320,"source":"contracts/abstracted_account.algo.ts:78","pc":[353]},{"teal":321,"source":"contracts/abstracted_account.algo.ts:78","pc":[354,355]},{"teal":322,"source":"contracts/abstracted_account.algo.ts:78","pc":[356,357,358]},{"teal":327,"source":"contracts/abstracted_account.algo.ts:107","pc":[359,360]},{"teal":328,"source":"contracts/abstracted_account.algo.ts:107","pc":[361]},{"teal":329,"source":"contracts/abstracted_account.algo.ts:75","pc":[362]},{"teal":336,"source":"contracts/abstracted_account.algo.ts:114","pc":[363,364,365]},{"teal":340,"source":"contracts/abstracted_account.algo.ts:115","pc":[366]},{"teal":341,"source":"contracts/abstracted_account.algo.ts:115","pc":[367]},{"teal":342,"source":"contracts/abstracted_account.algo.ts:115","pc":[368,369]},{"teal":343,"source":"contracts/abstracted_account.algo.ts:115","pc":[370]},{"teal":344,"source":"contracts/abstracted_account.algo.ts:115","pc":[371,372,373]},{"teal":345,"source":"contracts/abstracted_account.algo.ts:115","pc":[374,375]},{"teal":346,"source":"contracts/abstracted_account.algo.ts:115","pc":[376,377,378]},{"teal":349,"source":"contracts/abstracted_account.algo.ts:115","pc":[379,380]},{"teal":352,"source":"contracts/abstracted_account.algo.ts:114","pc":[381]},{"teal":357,"source":"contracts/abstracted_account.algo.ts:125","pc":[382,383,384]},{"teal":358,"source":"contracts/abstracted_account.algo.ts:125","pc":[385]},{"teal":359,"source":"contracts/abstracted_account.algo.ts:125","pc":[386]},{"teal":360,"source":"contracts/abstracted_account.algo.ts:125","pc":[387]},{"teal":361,"source":"contracts/abstracted_account.algo.ts:125","pc":[388]},{"teal":364,"source":"contracts/abstracted_account.algo.ts:125","errorMessage":"argument 0 (admin) for createApplication must be a address","pc":[389]},{"teal":367,"source":"contracts/abstracted_account.algo.ts:125","pc":[390,391,392]},{"teal":368,"source":"contracts/abstracted_account.algo.ts:125","pc":[393]},{"teal":369,"source":"contracts/abstracted_account.algo.ts:125","pc":[394]},{"teal":370,"source":"contracts/abstracted_account.algo.ts:125","pc":[395]},{"teal":371,"source":"contracts/abstracted_account.algo.ts:125","pc":[396]},{"teal":374,"source":"contracts/abstracted_account.algo.ts:125","errorMessage":"argument 1 (controlledAddress) for createApplication must be a address","pc":[397]},{"teal":377,"source":"contracts/abstracted_account.algo.ts:125","pc":[398,399,400]},{"teal":378,"source":"contracts/abstracted_account.algo.ts:125","pc":[401]},{"teal":379,"source":"contracts/abstracted_account.algo.ts:125","pc":[402]},{"teal":389,"source":"contracts/abstracted_account.algo.ts:125","pc":[403,404,405]},{"teal":396,"source":"contracts/abstracted_account.algo.ts:127","pc":[406,407]},{"teal":397,"source":"contracts/abstracted_account.algo.ts:127","pc":[408,409]},{"teal":398,"source":"contracts/abstracted_account.algo.ts:127","pc":[410]},{"teal":399,"source":"contracts/abstracted_account.algo.ts:127","pc":[411,412]},{"teal":400,"source":"contracts/abstracted_account.algo.ts:127","pc":[413,414]},{"teal":401,"source":"contracts/abstracted_account.algo.ts:127","pc":[415]},{"teal":402,"source":"contracts/abstracted_account.algo.ts:127","pc":[416]},{"teal":405,"source":"contracts/abstracted_account.algo.ts:127","errorMessage":"transaction verification failed: {\"txn\":{\"txnText\":\"this.txn\"},\"field\":\"sender\",\"condition\":\"includedIn\",\"expected\":\"[controlledAddress, admin]\"}","pc":[417]},{"teal":409,"source":"contracts/abstracted_account.algo.ts:130","pc":[418,419]},{"teal":410,"source":"contracts/abstracted_account.algo.ts:130","pc":[420,421]},{"teal":411,"source":"contracts/abstracted_account.algo.ts:130","pc":[422]},{"teal":412,"source":"contracts/abstracted_account.algo.ts:130","pc":[423]},{"teal":416,"source":"contracts/abstracted_account.algo.ts:132","pc":[424]},{"teal":417,"source":"contracts/abstracted_account.algo.ts:132","pc":[425,426]},{"teal":418,"source":"contracts/abstracted_account.algo.ts:132","pc":[427]},{"teal":422,"source":"contracts/abstracted_account.algo.ts:133","pc":[428]},{"teal":423,"source":"contracts/abstracted_account.algo.ts:133","pc":[429,430]},{"teal":424,"source":"contracts/abstracted_account.algo.ts:133","pc":[431,432]},{"teal":425,"source":"contracts/abstracted_account.algo.ts:133","pc":[433]},{"teal":426,"source":"contracts/abstracted_account.algo.ts:133","pc":[434,435,436]},{"teal":427,"source":"contracts/abstracted_account.algo.ts:133","pc":[437,438]},{"teal":428,"source":"contracts/abstracted_account.algo.ts:133","pc":[439,440,441]},{"teal":431,"source":"contracts/abstracted_account.algo.ts:133","pc":[442,443]},{"teal":434,"source":"contracts/abstracted_account.algo.ts:133","pc":[444]},{"teal":435,"source":"contracts/abstracted_account.algo.ts:125","pc":[445]},{"teal":440,"source":"contracts/abstracted_account.algo.ts:141","pc":[446,447,448]},{"teal":441,"source":"contracts/abstracted_account.algo.ts:141","pc":[449]},{"teal":442,"source":"contracts/abstracted_account.algo.ts:141","pc":[450]},{"teal":443,"source":"contracts/abstracted_account.algo.ts:141","pc":[451]},{"teal":444,"source":"contracts/abstracted_account.algo.ts:141","pc":[452]},{"teal":447,"source":"contracts/abstracted_account.algo.ts:141","errorMessage":"argument 0 (newAdmin) for arc58_changeAdmin must be a address","pc":[453]},{"teal":450,"source":"contracts/abstracted_account.algo.ts:141","pc":[454,455,456]},{"teal":451,"source":"contracts/abstracted_account.algo.ts:141","pc":[457]},{"teal":452,"source":"contracts/abstracted_account.algo.ts:141","pc":[458]},{"teal":460,"source":"contracts/abstracted_account.algo.ts:141","pc":[459,460,461]},{"teal":465,"source":"contracts/abstracted_account.algo.ts:142","pc":[462,463]},{"teal":466,"source":"contracts/abstracted_account.algo.ts:142","pc":[464]},{"teal":467,"source":"contracts/abstracted_account.algo.ts:142","pc":[465]},{"teal":468,"source":"contracts/abstracted_account.algo.ts:142","pc":[466]},{"teal":471,"source":"contracts/abstracted_account.algo.ts:142","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[467]},{"teal":475,"source":"contracts/abstracted_account.algo.ts:143","pc":[468]},{"teal":476,"source":"contracts/abstracted_account.algo.ts:143","pc":[469,470]},{"teal":477,"source":"contracts/abstracted_account.algo.ts:143","pc":[471]},{"teal":478,"source":"contracts/abstracted_account.algo.ts:141","pc":[472]},{"teal":483,"source":"contracts/abstracted_account.algo.ts:154","pc":[473,474,475]},{"teal":484,"source":"contracts/abstracted_account.algo.ts:154","pc":[476]},{"teal":485,"source":"contracts/abstracted_account.algo.ts:154","pc":[477]},{"teal":486,"source":"contracts/abstracted_account.algo.ts:154","pc":[478]},{"teal":487,"source":"contracts/abstracted_account.algo.ts:154","pc":[479]},{"teal":490,"source":"contracts/abstracted_account.algo.ts:154","errorMessage":"argument 0 (newAdmin) for arc58_pluginChangeAdmin must be a address","pc":[480]},{"teal":493,"source":"contracts/abstracted_account.algo.ts:154","pc":[481,482,483]},{"teal":494,"source":"contracts/abstracted_account.algo.ts:154","pc":[484]},{"teal":495,"source":"contracts/abstracted_account.algo.ts:154","pc":[485]},{"teal":496,"source":"contracts/abstracted_account.algo.ts:154","pc":[486]},{"teal":497,"source":"contracts/abstracted_account.algo.ts:154","pc":[487]},{"teal":500,"source":"contracts/abstracted_account.algo.ts:154","errorMessage":"argument 1 (allowedCaller) for arc58_pluginChangeAdmin must be a address","pc":[488]},{"teal":503,"source":"contracts/abstracted_account.algo.ts:154","pc":[489,490,491]},{"teal":504,"source":"contracts/abstracted_account.algo.ts:154","pc":[492]},{"teal":507,"source":"contracts/abstracted_account.algo.ts:154","pc":[493,494,495]},{"teal":508,"source":"contracts/abstracted_account.algo.ts:154","pc":[496]},{"teal":509,"source":"contracts/abstracted_account.algo.ts:154","pc":[497]},{"teal":519,"source":"contracts/abstracted_account.algo.ts:154","pc":[498,499,500]},{"teal":522,"source":"contracts/abstracted_account.algo.ts:154","pc":[501]},{"teal":527,"source":"contracts/abstracted_account.algo.ts:155","pc":[502,503]},{"teal":528,"source":"contracts/abstracted_account.algo.ts:155","pc":[504,505]},{"teal":529,"source":"contracts/abstracted_account.algo.ts:155","pc":[506,507]},{"teal":530,"source":"contracts/abstracted_account.algo.ts:155","pc":[508]},{"teal":531,"source":"contracts/abstracted_account.algo.ts:155","pc":[509]},{"teal":534,"source":"contracts/abstracted_account.algo.ts:155","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"plugin.address\"}","pc":[510]},{"teal":538,"source":"contracts/abstracted_account.algo.ts:156","pc":[511]},{"teal":539,"source":"contracts/abstracted_account.algo.ts:156","pc":[512]},{"teal":540,"source":"contracts/abstracted_account.algo.ts:156","pc":[513,514]},{"teal":541,"source":"contracts/abstracted_account.algo.ts:156","pc":[515]},{"teal":542,"source":"contracts/abstracted_account.algo.ts:156","pc":[516,517]},{"teal":543,"source":"contracts/abstracted_account.algo.ts:156","pc":[518,519]},{"teal":544,"source":"contracts/abstracted_account.algo.ts:156","pc":[520]},{"teal":545,"source":"contracts/abstracted_account.algo.ts:156","pc":[521]},{"teal":548,"source":"contracts/abstracted_account.algo.ts:156","errorMessage":"This plugin is not in control of the account","pc":[522]},{"teal":552,"source":"contracts/abstracted_account.algo.ts:158","pc":[523,524]},{"teal":553,"source":"contracts/abstracted_account.algo.ts:158","pc":[525]},{"teal":554,"source":"contracts/abstracted_account.algo.ts:158","pc":[526,527]},{"teal":555,"source":"contracts/abstracted_account.algo.ts:158","pc":[528]},{"teal":556,"source":"contracts/abstracted_account.algo.ts:158","pc":[529,530]},{"teal":563,"source":"contracts/abstracted_account.algo.ts:160","pc":[531]},{"teal":564,"source":"contracts/abstracted_account.algo.ts:160","pc":[532,533]},{"teal":565,"source":"contracts/abstracted_account.algo.ts:160","pc":[534]},{"teal":566,"source":"contracts/abstracted_account.algo.ts:160","pc":[535]},{"teal":567,"source":"contracts/abstracted_account.algo.ts:160","pc":[536]},{"teal":568,"source":"contracts/abstracted_account.algo.ts:160","pc":[537]},{"teal":569,"source":"contracts/abstracted_account.algo.ts:160","pc":[538]},{"teal":570,"source":"contracts/abstracted_account.algo.ts:160","pc":[539,540,541]},{"teal":571,"source":"contracts/abstracted_account.algo.ts:160","pc":[542]},{"teal":572,"source":"contracts/abstracted_account.algo.ts:160","pc":[543,544]},{"teal":573,"source":"contracts/abstracted_account.algo.ts:160","pc":[545]},{"teal":574,"source":"contracts/abstracted_account.algo.ts:160","pc":[546]},{"teal":577,"source":"contracts/abstracted_account.algo.ts:160","errorMessage":"box value does not exist: this.plugins(key).value","pc":[547]},{"teal":578,"source":"contracts/abstracted_account.algo.ts:160","pc":[548,549]},{"teal":579,"source":"contracts/abstracted_account.algo.ts:160","pc":[550,551]},{"teal":580,"source":"contracts/abstracted_account.algo.ts:160","pc":[552,553,554]},{"teal":581,"source":"contracts/abstracted_account.algo.ts:160","pc":[555]},{"teal":582,"source":"contracts/abstracted_account.algo.ts:160","pc":[556]},{"teal":586,"source":"contracts/abstracted_account.algo.ts:159","errorMessage":"This plugin does not have admin privileges","pc":[557]},{"teal":590,"source":"contracts/abstracted_account.algo.ts:164","pc":[558]},{"teal":591,"source":"contracts/abstracted_account.algo.ts:164","pc":[559,560]},{"teal":592,"source":"contracts/abstracted_account.algo.ts:164","pc":[561]},{"teal":593,"source":"contracts/abstracted_account.algo.ts:154","pc":[562]},{"teal":598,"source":"contracts/abstracted_account.algo.ts:171","pc":[563,564]},{"teal":601,"source":"contracts/abstracted_account.algo.ts:171","pc":[565,566,567]},{"teal":602,"source":"contracts/abstracted_account.algo.ts:171","pc":[568]},{"teal":603,"source":"contracts/abstracted_account.algo.ts:171","pc":[569]},{"teal":604,"source":"contracts/abstracted_account.algo.ts:171","pc":[570]},{"teal":605,"source":"contracts/abstracted_account.algo.ts:171","pc":[571]},{"teal":612,"source":"contracts/abstracted_account.algo.ts:171","pc":[572,573,574]},{"teal":616,"source":"contracts/abstracted_account.algo.ts:173","pc":[575]},{"teal":617,"source":"contracts/abstracted_account.algo.ts:173","pc":[576]},{"teal":618,"source":"contracts/abstracted_account.algo.ts:171","pc":[577]},{"teal":623,"source":"contracts/abstracted_account.algo.ts:179","pc":[578,579,580]},{"teal":624,"source":"contracts/abstracted_account.algo.ts:179","pc":[581]},{"teal":625,"source":"contracts/abstracted_account.algo.ts:179","pc":[582]},{"teal":631,"source":"contracts/abstracted_account.algo.ts:179","pc":[583,584,585]},{"teal":635,"source":"contracts/abstracted_account.algo.ts:180","pc":[586]},{"teal":636,"source":"contracts/abstracted_account.algo.ts:180","pc":[587]},{"teal":637,"source":"contracts/abstracted_account.algo.ts:180","pc":[588,589]},{"teal":638,"source":"contracts/abstracted_account.algo.ts:180","pc":[590]},{"teal":639,"source":"contracts/abstracted_account.algo.ts:180","pc":[591,592,593]},{"teal":640,"source":"contracts/abstracted_account.algo.ts:180","pc":[594]},{"teal":641,"source":"contracts/abstracted_account.algo.ts:180","pc":[595]},{"teal":642,"source":"contracts/abstracted_account.algo.ts:179","pc":[596]},{"teal":647,"source":"contracts/abstracted_account.algo.ts:189","pc":[597,598,599]},{"teal":648,"source":"contracts/abstracted_account.algo.ts:189","pc":[600]},{"teal":649,"source":"contracts/abstracted_account.algo.ts:189","pc":[601]},{"teal":650,"source":"contracts/abstracted_account.algo.ts:189","pc":[602]},{"teal":651,"source":"contracts/abstracted_account.algo.ts:189","pc":[603]},{"teal":654,"source":"contracts/abstracted_account.algo.ts:189","errorMessage":"argument 0 (flash) for arc58_rekeyTo must be a bool","pc":[604]},{"teal":655,"source":"contracts/abstracted_account.algo.ts:189","pc":[605]},{"teal":656,"source":"contracts/abstracted_account.algo.ts:189","pc":[606]},{"teal":659,"source":"contracts/abstracted_account.algo.ts:189","pc":[607,608,609]},{"teal":660,"source":"contracts/abstracted_account.algo.ts:189","pc":[610]},{"teal":661,"source":"contracts/abstracted_account.algo.ts:189","pc":[611]},{"teal":662,"source":"contracts/abstracted_account.algo.ts:189","pc":[612]},{"teal":663,"source":"contracts/abstracted_account.algo.ts:189","pc":[613]},{"teal":666,"source":"contracts/abstracted_account.algo.ts:189","errorMessage":"argument 1 (addr) for arc58_rekeyTo must be a address","pc":[614]},{"teal":669,"source":"contracts/abstracted_account.algo.ts:189","pc":[615,616,617]},{"teal":670,"source":"contracts/abstracted_account.algo.ts:189","pc":[618]},{"teal":671,"source":"contracts/abstracted_account.algo.ts:189","pc":[619]},{"teal":680,"source":"contracts/abstracted_account.algo.ts:189","pc":[620,621,622]},{"teal":685,"source":"contracts/abstracted_account.algo.ts:190","pc":[623,624]},{"teal":686,"source":"contracts/abstracted_account.algo.ts:190","pc":[625]},{"teal":687,"source":"contracts/abstracted_account.algo.ts:190","pc":[626]},{"teal":688,"source":"contracts/abstracted_account.algo.ts:190","pc":[627]},{"teal":691,"source":"contracts/abstracted_account.algo.ts:190","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[628]},{"teal":700,"source":"contracts/abstracted_account.algo.ts:192","pc":[629]},{"teal":701,"source":"contracts/abstracted_account.algo.ts:192","pc":[630]},{"teal":702,"source":"contracts/abstracted_account.algo.ts:192","pc":[631,632]},{"teal":706,"source":"contracts/abstracted_account.algo.ts:193","pc":[633]},{"teal":707,"source":"contracts/abstracted_account.algo.ts:193","pc":[634]},{"teal":708,"source":"contracts/abstracted_account.algo.ts:193","pc":[635,636]},{"teal":712,"source":"contracts/abstracted_account.algo.ts:194","pc":[637,638]},{"teal":713,"source":"contracts/abstracted_account.algo.ts:194","pc":[639,640]},{"teal":717,"source":"contracts/abstracted_account.algo.ts:195","pc":[641,642]},{"teal":718,"source":"contracts/abstracted_account.algo.ts:195","pc":[643,644]},{"teal":722,"source":"contracts/abstracted_account.algo.ts:196","pc":[645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673]},{"teal":723,"source":"contracts/abstracted_account.algo.ts:196","pc":[674,675]},{"teal":726,"source":"contracts/abstracted_account.algo.ts:192","pc":[676]},{"teal":727,"source":"contracts/abstracted_account.algo.ts:192","pc":[677,678]},{"teal":730,"source":"contracts/abstracted_account.algo.ts:192","pc":[679]},{"teal":735,"source":"contracts/abstracted_account.algo.ts:199","pc":[680,681]},{"teal":736,"source":"contracts/abstracted_account.algo.ts:199","pc":[682,683,684]},{"teal":741,"source":"contracts/abstracted_account.algo.ts:199","pc":[685,686,687]},{"teal":744,"source":"contracts/abstracted_account.algo.ts:189","pc":[688]},{"teal":748,"source":"contracts/abstracted_account.algo.ts:202","pc":[689,690,691]},{"teal":751,"source":"contracts/abstracted_account.algo.ts:202","pc":[692]},{"teal":755,"source":"contracts/abstracted_account.algo.ts:203","pc":[693,694]},{"teal":756,"source":"contracts/abstracted_account.algo.ts:203","pc":[695]},{"teal":757,"source":"contracts/abstracted_account.algo.ts:203","pc":[696,697]},{"teal":758,"source":"contracts/abstracted_account.algo.ts:203","pc":[698]},{"teal":759,"source":"contracts/abstracted_account.algo.ts:203","pc":[699,700]},{"teal":767,"source":"contracts/abstracted_account.algo.ts:206","pc":[701]},{"teal":768,"source":"contracts/abstracted_account.algo.ts:206","pc":[702,703]},{"teal":769,"source":"contracts/abstracted_account.algo.ts:206","pc":[704]},{"teal":770,"source":"contracts/abstracted_account.algo.ts:206","pc":[705]},{"teal":771,"source":"contracts/abstracted_account.algo.ts:206","pc":[706]},{"teal":772,"source":"contracts/abstracted_account.algo.ts:206","pc":[707]},{"teal":773,"source":"contracts/abstracted_account.algo.ts:206","pc":[708]},{"teal":774,"source":"contracts/abstracted_account.algo.ts:206","pc":[709,710,711]},{"teal":775,"source":"contracts/abstracted_account.algo.ts:207","pc":[712]},{"teal":776,"source":"contracts/abstracted_account.algo.ts:207","pc":[713,714]},{"teal":777,"source":"contracts/abstracted_account.algo.ts:207","pc":[715]},{"teal":778,"source":"contracts/abstracted_account.algo.ts:207","pc":[716]},{"teal":781,"source":"contracts/abstracted_account.algo.ts:207","errorMessage":"box value does not exist: this.plugins(key).value","pc":[717]},{"teal":782,"source":"contracts/abstracted_account.algo.ts:207","pc":[718,719]},{"teal":783,"source":"contracts/abstracted_account.algo.ts:207","pc":[720,721]},{"teal":784,"source":"contracts/abstracted_account.algo.ts:207","pc":[722,723,724]},{"teal":785,"source":"contracts/abstracted_account.algo.ts:207","pc":[725]},{"teal":786,"source":"contracts/abstracted_account.algo.ts:207","pc":[726,727]},{"teal":787,"source":"contracts/abstracted_account.algo.ts:207","pc":[728]},{"teal":788,"source":"contracts/abstracted_account.algo.ts:206","pc":[729]},{"teal":791,"source":"contracts/abstracted_account.algo.ts:207","pc":[730]},{"teal":792,"source":"contracts/abstracted_account.algo.ts:207","pc":[731,732,733]},{"teal":793,"source":"contracts/abstracted_account.algo.ts:208","pc":[734,735]},{"teal":794,"source":"contracts/abstracted_account.algo.ts:208","pc":[736]},{"teal":795,"source":"contracts/abstracted_account.algo.ts:208","pc":[737,738]},{"teal":796,"source":"contracts/abstracted_account.algo.ts:208","pc":[739]},{"teal":797,"source":"contracts/abstracted_account.algo.ts:208","pc":[740]},{"teal":800,"source":"contracts/abstracted_account.algo.ts:208","errorMessage":"box value does not exist: this.plugins(key).value","pc":[741]},{"teal":801,"source":"contracts/abstracted_account.algo.ts:208","pc":[742,743]},{"teal":802,"source":"contracts/abstracted_account.algo.ts:208","pc":[744,745]},{"teal":803,"source":"contracts/abstracted_account.algo.ts:208","pc":[746,747,748]},{"teal":804,"source":"contracts/abstracted_account.algo.ts:208","pc":[749]},{"teal":805,"source":"contracts/abstracted_account.algo.ts:208","pc":[750]},{"teal":806,"source":"contracts/abstracted_account.algo.ts:208","pc":[751]},{"teal":807,"source":"contracts/abstracted_account.algo.ts:208","pc":[752,753]},{"teal":808,"source":"contracts/abstracted_account.algo.ts:208","pc":[754]},{"teal":809,"source":"contracts/abstracted_account.algo.ts:208","pc":[755]},{"teal":812,"source":"contracts/abstracted_account.algo.ts:208","errorMessage":"box value does not exist: this.plugins(key).value","pc":[756]},{"teal":813,"source":"contracts/abstracted_account.algo.ts:208","pc":[757,758]},{"teal":814,"source":"contracts/abstracted_account.algo.ts:208","pc":[759,760]},{"teal":815,"source":"contracts/abstracted_account.algo.ts:208","pc":[761,762,763]},{"teal":816,"source":"contracts/abstracted_account.algo.ts:208","pc":[764]},{"teal":817,"source":"contracts/abstracted_account.algo.ts:208","pc":[765]},{"teal":818,"source":"contracts/abstracted_account.algo.ts:207","pc":[766]},{"teal":822,"source":"contracts/abstracted_account.algo.ts:202","pc":[767,768]},{"teal":823,"source":"contracts/abstracted_account.algo.ts:202","pc":[769]},{"teal":828,"source":"contracts/abstracted_account.algo.ts:218","pc":[770,771]},{"teal":831,"source":"contracts/abstracted_account.algo.ts:219","pc":[772,773,774]},{"teal":832,"source":"contracts/abstracted_account.algo.ts:219","pc":[775]},{"teal":833,"source":"contracts/abstracted_account.algo.ts:219","pc":[776]},{"teal":834,"source":"contracts/abstracted_account.algo.ts:219","pc":[777]},{"teal":835,"source":"contracts/abstracted_account.algo.ts:219","pc":[778]},{"teal":838,"source":"contracts/abstracted_account.algo.ts:219","errorMessage":"argument 0 (address) for arc58_canCall must be a address","pc":[779]},{"teal":841,"source":"contracts/abstracted_account.algo.ts:219","pc":[780,781,782]},{"teal":842,"source":"contracts/abstracted_account.algo.ts:219","pc":[783]},{"teal":845,"source":"contracts/abstracted_account.algo.ts:218","pc":[784,785,786]},{"teal":846,"source":"contracts/abstracted_account.algo.ts:218","pc":[787,788]},{"teal":847,"source":"contracts/abstracted_account.algo.ts:218","pc":[789]},{"teal":848,"source":"contracts/abstracted_account.algo.ts:218","pc":[790,791]},{"teal":849,"source":"contracts/abstracted_account.algo.ts:218","pc":[792]},{"teal":850,"source":"contracts/abstracted_account.algo.ts:218","pc":[793]},{"teal":851,"source":"contracts/abstracted_account.algo.ts:218","pc":[794]},{"teal":852,"source":"contracts/abstracted_account.algo.ts:218","pc":[795]},{"teal":853,"source":"contracts/abstracted_account.algo.ts:218","pc":[796]},{"teal":862,"source":"contracts/abstracted_account.algo.ts:218","pc":[797,798,799]},{"teal":865,"source":"contracts/abstracted_account.algo.ts:218","pc":[800]},{"teal":869,"source":"contracts/abstracted_account.algo.ts:220","pc":[801,802]},{"teal":870,"source":"contracts/abstracted_account.algo.ts:220","pc":[803,804]},{"teal":871,"source":"contracts/abstracted_account.algo.ts:220","pc":[805,806,807]},{"teal":872,"source":"contracts/abstracted_account.algo.ts:220","pc":[808,809]},{"teal":877,"source":"contracts/abstracted_account.algo.ts:221","pc":[810,811]},{"teal":878,"source":"contracts/abstracted_account.algo.ts:221","pc":[812,813,814]},{"teal":883,"source":"contracts/abstracted_account.algo.ts:221","pc":[815]},{"teal":884,"source":"contracts/abstracted_account.algo.ts:221","pc":[816,817,818]},{"teal":889,"source":"contracts/abstracted_account.algo.ts:223","pc":[819,820]},{"teal":890,"source":"contracts/abstracted_account.algo.ts:223","pc":[821,822]},{"teal":891,"source":"contracts/abstracted_account.algo.ts:223","pc":[823,824,825]},{"teal":895,"source":"contracts/abstracted_account.algo.ts:218","pc":[826,827]},{"teal":896,"source":"contracts/abstracted_account.algo.ts:218","pc":[828]},{"teal":901,"source":"contracts/abstracted_account.algo.ts:231","pc":[829,830,831]},{"teal":902,"source":"contracts/abstracted_account.algo.ts:231","pc":[832]},{"teal":905,"source":"contracts/abstracted_account.algo.ts:231","pc":[833,834,835]},{"teal":906,"source":"contracts/abstracted_account.algo.ts:231","pc":[836]},{"teal":907,"source":"contracts/abstracted_account.algo.ts:231","pc":[837]},{"teal":915,"source":"contracts/abstracted_account.algo.ts:231","pc":[838,839,840]},{"teal":918,"source":"contracts/abstracted_account.algo.ts:231","pc":[841]},{"teal":922,"source":"contracts/abstracted_account.algo.ts:232","pc":[842,843]},{"teal":923,"source":"contracts/abstracted_account.algo.ts:232","pc":[844,845]},{"teal":924,"source":"contracts/abstracted_account.algo.ts:232","pc":[846,847,848]},{"teal":925,"source":"contracts/abstracted_account.algo.ts:232","pc":[849,850]},{"teal":930,"source":"contracts/abstracted_account.algo.ts:234","pc":[851,852]},{"teal":931,"source":"contracts/abstracted_account.algo.ts:234","pc":[853]},{"teal":932,"source":"contracts/abstracted_account.algo.ts:234","pc":[854,855,856]},{"teal":937,"source":"contracts/abstracted_account.algo.ts:235","pc":[857,858]},{"teal":938,"source":"contracts/abstracted_account.algo.ts:235","pc":[859,860]},{"teal":939,"source":"contracts/abstracted_account.algo.ts:235","pc":[861,862,863]},{"teal":942,"source":"contracts/abstracted_account.algo.ts:235","errorMessage":"This sender is not allowed to trigger this plugin","pc":[864]},{"teal":952,"source":"contracts/abstracted_account.algo.ts:237","pc":[865]},{"teal":953,"source":"contracts/abstracted_account.algo.ts:237","pc":[866]},{"teal":954,"source":"contracts/abstracted_account.algo.ts:237","pc":[867,868]},{"teal":958,"source":"contracts/abstracted_account.algo.ts:238","pc":[869]},{"teal":959,"source":"contracts/abstracted_account.algo.ts:238","pc":[870]},{"teal":960,"source":"contracts/abstracted_account.algo.ts:238","pc":[871,872]},{"teal":964,"source":"contracts/abstracted_account.algo.ts:239","pc":[873]},{"teal":965,"source":"contracts/abstracted_account.algo.ts:239","pc":[874]},{"teal":966,"source":"contracts/abstracted_account.algo.ts:239","pc":[875,876]},{"teal":970,"source":"contracts/abstracted_account.algo.ts:240","pc":[877,878]},{"teal":971,"source":"contracts/abstracted_account.algo.ts:240","pc":[879,880]},{"teal":972,"source":"contracts/abstracted_account.algo.ts:240","pc":[881]},{"teal":973,"source":"contracts/abstracted_account.algo.ts:240","pc":[882,883]},{"teal":977,"source":"contracts/abstracted_account.algo.ts:241","pc":[884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907]},{"teal":978,"source":"contracts/abstracted_account.algo.ts:241","pc":[908,909]},{"teal":981,"source":"contracts/abstracted_account.algo.ts:237","pc":[910]},{"teal":982,"source":"contracts/abstracted_account.algo.ts:237","pc":[911,912]},{"teal":985,"source":"contracts/abstracted_account.algo.ts:237","pc":[913]},{"teal":992,"source":"contracts/abstracted_account.algo.ts:244","pc":[914]},{"teal":993,"source":"contracts/abstracted_account.algo.ts:245","pc":[915,916]},{"teal":994,"source":"contracts/abstracted_account.algo.ts:245","pc":[917]},{"teal":995,"source":"contracts/abstracted_account.algo.ts:246","pc":[918,919]},{"teal":996,"source":"contracts/abstracted_account.algo.ts:246","pc":[920,921,922]},{"teal":997,"source":"contracts/abstracted_account.algo.ts:246","pc":[923,924]},{"teal":998,"source":"contracts/abstracted_account.algo.ts:246","pc":[925,926,927]},{"teal":1001,"source":"contracts/abstracted_account.algo.ts:246","pc":[928,929]},{"teal":1004,"source":"contracts/abstracted_account.algo.ts:246","pc":[930]},{"teal":1005,"source":"contracts/abstracted_account.algo.ts:244","pc":[931]},{"teal":1006,"source":"contracts/abstracted_account.algo.ts:244","pc":[932]},{"teal":1009,"source":"contracts/abstracted_account.algo.ts:244","errorMessage":"box value does not exist: this.plugins({ application: plugin, allowedCaller: globalAllowed ? Address.zeroAddress : this.txn.sender, }).value","pc":[933]},{"teal":1010,"source":"contracts/abstracted_account.algo.ts:244","pc":[934,935]},{"teal":1011,"source":"contracts/abstracted_account.algo.ts:244","pc":[936,937]},{"teal":1012,"source":"contracts/abstracted_account.algo.ts:244","pc":[938,939]},{"teal":1013,"source":"contracts/abstracted_account.algo.ts:247","pc":[940,941]},{"teal":1014,"source":"contracts/abstracted_account.algo.ts:247","pc":[942]},{"teal":1015,"source":"contracts/abstracted_account.algo.ts:244","pc":[943]},{"teal":1016,"source":"contracts/abstracted_account.algo.ts:244","pc":[944]},{"teal":1017,"source":"contracts/abstracted_account.algo.ts:245","pc":[945,946]},{"teal":1018,"source":"contracts/abstracted_account.algo.ts:245","pc":[947]},{"teal":1019,"source":"contracts/abstracted_account.algo.ts:246","pc":[948,949]},{"teal":1020,"source":"contracts/abstracted_account.algo.ts:246","pc":[950,951,952]},{"teal":1021,"source":"contracts/abstracted_account.algo.ts:246","pc":[953,954]},{"teal":1022,"source":"contracts/abstracted_account.algo.ts:246","pc":[955,956,957]},{"teal":1025,"source":"contracts/abstracted_account.algo.ts:246","pc":[958,959]},{"teal":1028,"source":"contracts/abstracted_account.algo.ts:246","pc":[960]},{"teal":1029,"source":"contracts/abstracted_account.algo.ts:244","pc":[961]},{"teal":1030,"source":"contracts/abstracted_account.algo.ts:244","pc":[962]},{"teal":1031,"source":"contracts/abstracted_account.algo.ts:244","pc":[963]},{"teal":1035,"source":"contracts/abstracted_account.algo.ts:249","pc":[964,965]},{"teal":1036,"source":"contracts/abstracted_account.algo.ts:249","pc":[966,967,968]},{"teal":1037,"source":"contracts/abstracted_account.algo.ts:231","pc":[969]},{"teal":1042,"source":"contracts/abstracted_account.algo.ts:257","pc":[970,971,972]},{"teal":1043,"source":"contracts/abstracted_account.algo.ts:257","pc":[973,974,975]},{"teal":1046,"source":"contracts/abstracted_account.algo.ts:257","pc":[976,977,978]},{"teal":1047,"source":"contracts/abstracted_account.algo.ts:257","pc":[979]},{"teal":1048,"source":"contracts/abstracted_account.algo.ts:257","pc":[980]},{"teal":1056,"source":"contracts/abstracted_account.algo.ts:257","pc":[981,982,983]},{"teal":1060,"source":"contracts/abstracted_account.algo.ts:258","pc":[984]},{"teal":1061,"source":"contracts/abstracted_account.algo.ts:258","pc":[985,986]},{"teal":1062,"source":"contracts/abstracted_account.algo.ts:258","pc":[987,988]},{"teal":1063,"source":"contracts/abstracted_account.algo.ts:258","pc":[989,990]},{"teal":1064,"source":"contracts/abstracted_account.algo.ts:258","pc":[991]},{"teal":1065,"source":"contracts/abstracted_account.algo.ts:258","pc":[992,993]},{"teal":1066,"source":"contracts/abstracted_account.algo.ts:258","pc":[994]},{"teal":1067,"source":"contracts/abstracted_account.algo.ts:258","pc":[995]},{"teal":1068,"source":"contracts/abstracted_account.algo.ts:258","pc":[996,997,998]},{"teal":1069,"source":"contracts/abstracted_account.algo.ts:257","pc":[999]},{"teal":1074,"source":"contracts/abstracted_account.algo.ts:276","pc":[1000,1001,1002]},{"teal":1075,"source":"contracts/abstracted_account.algo.ts:276","pc":[1003]},{"teal":1076,"source":"contracts/abstracted_account.algo.ts:276","pc":[1004]},{"teal":1077,"source":"contracts/abstracted_account.algo.ts:276","pc":[1005]},{"teal":1078,"source":"contracts/abstracted_account.algo.ts:276","pc":[1006]},{"teal":1081,"source":"contracts/abstracted_account.algo.ts:276","errorMessage":"argument 0 (adminPrivileges) for arc58_addPlugin must be a bool","pc":[1007]},{"teal":1082,"source":"contracts/abstracted_account.algo.ts:276","pc":[1008]},{"teal":1083,"source":"contracts/abstracted_account.algo.ts:276","pc":[1009]},{"teal":1086,"source":"contracts/abstracted_account.algo.ts:275","pc":[1010,1011,1012]},{"teal":1087,"source":"contracts/abstracted_account.algo.ts:275","pc":[1013]},{"teal":1090,"source":"contracts/abstracted_account.algo.ts:274","pc":[1014,1015,1016]},{"teal":1091,"source":"contracts/abstracted_account.algo.ts:274","pc":[1017]},{"teal":1094,"source":"contracts/abstracted_account.algo.ts:273","pc":[1018,1019,1020]},{"teal":1095,"source":"contracts/abstracted_account.algo.ts:273","pc":[1021]},{"teal":1096,"source":"contracts/abstracted_account.algo.ts:273","pc":[1022]},{"teal":1097,"source":"contracts/abstracted_account.algo.ts:273","pc":[1023]},{"teal":1098,"source":"contracts/abstracted_account.algo.ts:273","pc":[1024]},{"teal":1101,"source":"contracts/abstracted_account.algo.ts:273","errorMessage":"argument 3 (allowedCaller) for arc58_addPlugin must be a address","pc":[1025]},{"teal":1104,"source":"contracts/abstracted_account.algo.ts:272","pc":[1026,1027,1028]},{"teal":1105,"source":"contracts/abstracted_account.algo.ts:272","pc":[1029]},{"teal":1108,"source":"contracts/abstracted_account.algo.ts:271","pc":[1030,1031,1032]},{"teal":1109,"source":"contracts/abstracted_account.algo.ts:271","pc":[1033]},{"teal":1110,"source":"contracts/abstracted_account.algo.ts:271","pc":[1034]},{"teal":1123,"source":"contracts/abstracted_account.algo.ts:271","pc":[1035,1036,1037]},{"teal":1126,"source":"contracts/abstracted_account.algo.ts:271","pc":[1038]},{"teal":1131,"source":"contracts/abstracted_account.algo.ts:278","pc":[1039,1040]},{"teal":1132,"source":"contracts/abstracted_account.algo.ts:278","pc":[1041]},{"teal":1133,"source":"contracts/abstracted_account.algo.ts:278","pc":[1042]},{"teal":1134,"source":"contracts/abstracted_account.algo.ts:278","pc":[1043]},{"teal":1137,"source":"contracts/abstracted_account.algo.ts:278","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1044]},{"teal":1141,"source":"contracts/abstracted_account.algo.ts:279","pc":[1045,1046]},{"teal":1142,"source":"contracts/abstracted_account.algo.ts:279","pc":[1047]},{"teal":1143,"source":"contracts/abstracted_account.algo.ts:279","pc":[1048,1049]},{"teal":1144,"source":"contracts/abstracted_account.algo.ts:279","pc":[1050]},{"teal":1145,"source":"contracts/abstracted_account.algo.ts:279","pc":[1051,1052]},{"teal":1154,"source":"contracts/abstracted_account.algo.ts:280","pc":[1053]},{"teal":1155,"source":"contracts/abstracted_account.algo.ts:280","pc":[1054,1055]},{"teal":1156,"source":"contracts/abstracted_account.algo.ts:280","pc":[1056]},{"teal":1157,"source":"contracts/abstracted_account.algo.ts:281","pc":[1057,1058]},{"teal":1158,"source":"contracts/abstracted_account.algo.ts:281","pc":[1059]},{"teal":1159,"source":"contracts/abstracted_account.algo.ts:282","pc":[1060,1061]},{"teal":1160,"source":"contracts/abstracted_account.algo.ts:282","pc":[1062]},{"teal":1161,"source":"contracts/abstracted_account.algo.ts:282","pc":[1063]},{"teal":1162,"source":"contracts/abstracted_account.algo.ts:283","pc":[1064,1065]},{"teal":1163,"source":"contracts/abstracted_account.algo.ts:283","pc":[1066]},{"teal":1164,"source":"contracts/abstracted_account.algo.ts:284","pc":[1067,1068]},{"teal":1165,"source":"contracts/abstracted_account.algo.ts:284","pc":[1069]},{"teal":1166,"source":"contracts/abstracted_account.algo.ts:284","pc":[1070,1071]},{"teal":1167,"source":"contracts/abstracted_account.algo.ts:284","pc":[1072]},{"teal":1168,"source":"contracts/abstracted_account.algo.ts:280","pc":[1073]},{"teal":1169,"source":"contracts/abstracted_account.algo.ts:280","pc":[1074]},{"teal":1170,"source":"contracts/abstracted_account.algo.ts:271","pc":[1075]},{"teal":1175,"source":"contracts/abstracted_account.algo.ts:293","pc":[1076,1077,1078]},{"teal":1176,"source":"contracts/abstracted_account.algo.ts:293","pc":[1079]},{"teal":1177,"source":"contracts/abstracted_account.algo.ts:293","pc":[1080]},{"teal":1178,"source":"contracts/abstracted_account.algo.ts:293","pc":[1081]},{"teal":1179,"source":"contracts/abstracted_account.algo.ts:293","pc":[1082]},{"teal":1182,"source":"contracts/abstracted_account.algo.ts:293","errorMessage":"argument 0 (allowedCaller) for arc58_removePlugin must be a address","pc":[1083]},{"teal":1185,"source":"contracts/abstracted_account.algo.ts:293","pc":[1084,1085,1086]},{"teal":1186,"source":"contracts/abstracted_account.algo.ts:293","pc":[1087]},{"teal":1189,"source":"contracts/abstracted_account.algo.ts:293","pc":[1088,1089,1090]},{"teal":1190,"source":"contracts/abstracted_account.algo.ts:293","pc":[1091]},{"teal":1191,"source":"contracts/abstracted_account.algo.ts:293","pc":[1092]},{"teal":1199,"source":"contracts/abstracted_account.algo.ts:293","pc":[1093,1094,1095]},{"teal":1202,"source":"contracts/abstracted_account.algo.ts:293","pc":[1096]},{"teal":1207,"source":"contracts/abstracted_account.algo.ts:294","pc":[1097,1098]},{"teal":1208,"source":"contracts/abstracted_account.algo.ts:294","pc":[1099]},{"teal":1209,"source":"contracts/abstracted_account.algo.ts:294","pc":[1100]},{"teal":1210,"source":"contracts/abstracted_account.algo.ts:294","pc":[1101]},{"teal":1213,"source":"contracts/abstracted_account.algo.ts:294","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1102]},{"teal":1217,"source":"contracts/abstracted_account.algo.ts:296","pc":[1103,1104]},{"teal":1218,"source":"contracts/abstracted_account.algo.ts:296","pc":[1105]},{"teal":1219,"source":"contracts/abstracted_account.algo.ts:296","pc":[1106,1107]},{"teal":1220,"source":"contracts/abstracted_account.algo.ts:296","pc":[1108]},{"teal":1221,"source":"contracts/abstracted_account.algo.ts:296","pc":[1109,1110]},{"teal":1225,"source":"contracts/abstracted_account.algo.ts:297","pc":[1111]},{"teal":1226,"source":"contracts/abstracted_account.algo.ts:297","pc":[1112,1113]},{"teal":1227,"source":"contracts/abstracted_account.algo.ts:297","pc":[1114]},{"teal":1228,"source":"contracts/abstracted_account.algo.ts:297","pc":[1115]},{"teal":1229,"source":"contracts/abstracted_account.algo.ts:293","pc":[1116]},{"teal":1234,"source":"contracts/abstracted_account.algo.ts:317","pc":[1117,1118,1119]},{"teal":1235,"source":"contracts/abstracted_account.algo.ts:317","pc":[1120]},{"teal":1236,"source":"contracts/abstracted_account.algo.ts:317","pc":[1121]},{"teal":1237,"source":"contracts/abstracted_account.algo.ts:317","pc":[1122]},{"teal":1238,"source":"contracts/abstracted_account.algo.ts:317","pc":[1123]},{"teal":1241,"source":"contracts/abstracted_account.algo.ts:317","errorMessage":"argument 0 (adminPrivileges) for arc58_addNamedPlugin must be a bool","pc":[1124]},{"teal":1242,"source":"contracts/abstracted_account.algo.ts:317","pc":[1125]},{"teal":1243,"source":"contracts/abstracted_account.algo.ts:317","pc":[1126]},{"teal":1246,"source":"contracts/abstracted_account.algo.ts:316","pc":[1127,1128,1129]},{"teal":1247,"source":"contracts/abstracted_account.algo.ts:316","pc":[1130]},{"teal":1250,"source":"contracts/abstracted_account.algo.ts:315","pc":[1131,1132,1133]},{"teal":1251,"source":"contracts/abstracted_account.algo.ts:315","pc":[1134]},{"teal":1254,"source":"contracts/abstracted_account.algo.ts:314","pc":[1135,1136,1137]},{"teal":1255,"source":"contracts/abstracted_account.algo.ts:314","pc":[1138]},{"teal":1256,"source":"contracts/abstracted_account.algo.ts:314","pc":[1139]},{"teal":1257,"source":"contracts/abstracted_account.algo.ts:314","pc":[1140]},{"teal":1258,"source":"contracts/abstracted_account.algo.ts:314","pc":[1141]},{"teal":1261,"source":"contracts/abstracted_account.algo.ts:314","errorMessage":"argument 3 (allowedCaller) for arc58_addNamedPlugin must be a address","pc":[1142]},{"teal":1264,"source":"contracts/abstracted_account.algo.ts:313","pc":[1143,1144,1145]},{"teal":1265,"source":"contracts/abstracted_account.algo.ts:313","pc":[1146]},{"teal":1268,"source":"contracts/abstracted_account.algo.ts:312","pc":[1147,1148,1149]},{"teal":1269,"source":"contracts/abstracted_account.algo.ts:312","pc":[1150,1151,1152]},{"teal":1272,"source":"contracts/abstracted_account.algo.ts:311","pc":[1153,1154,1155]},{"teal":1273,"source":"contracts/abstracted_account.algo.ts:311","pc":[1156]},{"teal":1274,"source":"contracts/abstracted_account.algo.ts:311","pc":[1157]},{"teal":1288,"source":"contracts/abstracted_account.algo.ts:311","pc":[1158,1159,1160]},{"teal":1291,"source":"contracts/abstracted_account.algo.ts:311","pc":[1161]},{"teal":1292,"source":"contracts/abstracted_account.algo.ts:311","pc":[1162]},{"teal":1297,"source":"contracts/abstracted_account.algo.ts:319","pc":[1163,1164]},{"teal":1298,"source":"contracts/abstracted_account.algo.ts:319","pc":[1165]},{"teal":1299,"source":"contracts/abstracted_account.algo.ts:319","pc":[1166]},{"teal":1300,"source":"contracts/abstracted_account.algo.ts:319","pc":[1167]},{"teal":1303,"source":"contracts/abstracted_account.algo.ts:319","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1168]},{"teal":1307,"source":"contracts/abstracted_account.algo.ts:320","pc":[1169,1170]},{"teal":1308,"source":"contracts/abstracted_account.algo.ts:320","pc":[1171,1172]},{"teal":1309,"source":"contracts/abstracted_account.algo.ts:320","pc":[1173]},{"teal":1310,"source":"contracts/abstracted_account.algo.ts:320","pc":[1174]},{"teal":1311,"source":"contracts/abstracted_account.algo.ts:320","pc":[1175]},{"teal":1312,"source":"contracts/abstracted_account.algo.ts:320","pc":[1176]},{"teal":1313,"source":"contracts/abstracted_account.algo.ts:320","pc":[1177]},{"teal":1314,"source":"contracts/abstracted_account.algo.ts:320","pc":[1178]},{"teal":1318,"source":"contracts/abstracted_account.algo.ts:322","pc":[1179,1180]},{"teal":1319,"source":"contracts/abstracted_account.algo.ts:322","pc":[1181]},{"teal":1320,"source":"contracts/abstracted_account.algo.ts:322","pc":[1182,1183]},{"teal":1321,"source":"contracts/abstracted_account.algo.ts:322","pc":[1184]},{"teal":1322,"source":"contracts/abstracted_account.algo.ts:322","pc":[1185,1186]},{"teal":1326,"source":"contracts/abstracted_account.algo.ts:323","pc":[1187,1188]},{"teal":1327,"source":"contracts/abstracted_account.algo.ts:323","pc":[1189,1190]},{"teal":1328,"source":"contracts/abstracted_account.algo.ts:323","pc":[1191]},{"teal":1329,"source":"contracts/abstracted_account.algo.ts:323","pc":[1192,1193]},{"teal":1330,"source":"contracts/abstracted_account.algo.ts:323","pc":[1194]},{"teal":1339,"source":"contracts/abstracted_account.algo.ts:326","pc":[1195,1196]},{"teal":1340,"source":"contracts/abstracted_account.algo.ts:326","pc":[1197]},{"teal":1341,"source":"contracts/abstracted_account.algo.ts:327","pc":[1198,1199]},{"teal":1342,"source":"contracts/abstracted_account.algo.ts:327","pc":[1200]},{"teal":1343,"source":"contracts/abstracted_account.algo.ts:327","pc":[1201]},{"teal":1344,"source":"contracts/abstracted_account.algo.ts:328","pc":[1202,1203]},{"teal":1345,"source":"contracts/abstracted_account.algo.ts:328","pc":[1204]},{"teal":1346,"source":"contracts/abstracted_account.algo.ts:329","pc":[1205,1206]},{"teal":1347,"source":"contracts/abstracted_account.algo.ts:329","pc":[1207]},{"teal":1348,"source":"contracts/abstracted_account.algo.ts:329","pc":[1208,1209]},{"teal":1349,"source":"contracts/abstracted_account.algo.ts:329","pc":[1210]},{"teal":1350,"source":"contracts/abstracted_account.algo.ts:325","pc":[1211]},{"teal":1351,"source":"contracts/abstracted_account.algo.ts:325","pc":[1212,1213]},{"teal":1355,"source":"contracts/abstracted_account.algo.ts:332","pc":[1214]},{"teal":1356,"source":"contracts/abstracted_account.algo.ts:332","pc":[1215,1216]},{"teal":1357,"source":"contracts/abstracted_account.algo.ts:332","pc":[1217]},{"teal":1358,"source":"contracts/abstracted_account.algo.ts:332","pc":[1218,1219]},{"teal":1359,"source":"contracts/abstracted_account.algo.ts:332","pc":[1220]},{"teal":1360,"source":"contracts/abstracted_account.algo.ts:311","pc":[1221]},{"teal":1365,"source":"contracts/abstracted_account.algo.ts:340","pc":[1222,1223,1224]},{"teal":1366,"source":"contracts/abstracted_account.algo.ts:340","pc":[1225,1226,1227]},{"teal":1369,"source":"contracts/abstracted_account.algo.ts:340","pc":[1228,1229,1230]},{"teal":1370,"source":"contracts/abstracted_account.algo.ts:340","pc":[1231]},{"teal":1371,"source":"contracts/abstracted_account.algo.ts:340","pc":[1232]},{"teal":1379,"source":"contracts/abstracted_account.algo.ts:340","pc":[1233,1234,1235]},{"teal":1382,"source":"contracts/abstracted_account.algo.ts:340","pc":[1236]},{"teal":1387,"source":"contracts/abstracted_account.algo.ts:341","pc":[1237,1238]},{"teal":1388,"source":"contracts/abstracted_account.algo.ts:341","pc":[1239]},{"teal":1389,"source":"contracts/abstracted_account.algo.ts:341","pc":[1240]},{"teal":1390,"source":"contracts/abstracted_account.algo.ts:341","pc":[1241]},{"teal":1393,"source":"contracts/abstracted_account.algo.ts:341","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1242]},{"teal":1397,"source":"contracts/abstracted_account.algo.ts:343","pc":[1243,1244]},{"teal":1398,"source":"contracts/abstracted_account.algo.ts:343","pc":[1245,1246]},{"teal":1399,"source":"contracts/abstracted_account.algo.ts:343","pc":[1247]},{"teal":1400,"source":"contracts/abstracted_account.algo.ts:343","pc":[1248,1249]},{"teal":1404,"source":"contracts/abstracted_account.algo.ts:344","pc":[1250,1251]},{"teal":1405,"source":"contracts/abstracted_account.algo.ts:344","pc":[1252,1253]},{"teal":1406,"source":"contracts/abstracted_account.algo.ts:344","pc":[1254]},{"teal":1407,"source":"contracts/abstracted_account.algo.ts:344","pc":[1255]},{"teal":1411,"source":"contracts/abstracted_account.algo.ts:345","pc":[1256]},{"teal":1412,"source":"contracts/abstracted_account.algo.ts:343","pc":[1257,1258]},{"teal":1413,"source":"contracts/abstracted_account.algo.ts:343","pc":[1259]},{"teal":1416,"source":"contracts/abstracted_account.algo.ts:343","errorMessage":"box value does not exist: this.namedPlugins(name).value","pc":[1260]},{"teal":1417,"source":"contracts/abstracted_account.algo.ts:345","pc":[1261]},{"teal":1418,"source":"contracts/abstracted_account.algo.ts:345","pc":[1262]},{"teal":1419,"source":"contracts/abstracted_account.algo.ts:340","pc":[1263]},{"teal":1422,"source":"contracts/abstracted_account.algo.ts:21","pc":[1264,1265,1266,1267,1268,1269]},{"teal":1423,"source":"contracts/abstracted_account.algo.ts:21","pc":[1270,1271,1272]},{"teal":1424,"source":"contracts/abstracted_account.algo.ts:21","pc":[1273,1274,1275,1276]},{"teal":1427,"source":"contracts/abstracted_account.algo.ts:21","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1277]},{"teal":1430,"source":"contracts/abstracted_account.algo.ts:21","pc":[1278,1279,1280,1281,1282,1283]},{"teal":1431,"source":"contracts/abstracted_account.algo.ts:21","pc":[1284,1285,1286,1287,1288,1289]},{"teal":1432,"source":"contracts/abstracted_account.algo.ts:21","pc":[1290,1291,1292,1293,1294,1295]},{"teal":1433,"source":"contracts/abstracted_account.algo.ts:21","pc":[1296,1297]},{"teal":1434,"source":"contracts/abstracted_account.algo.ts:21","pc":[1298,1299,1300,1301,1302,1303]},{"teal":1435,"source":"contracts/abstracted_account.algo.ts:21","pc":[1304,1305,1306,1307,1308,1309]},{"teal":1436,"source":"contracts/abstracted_account.algo.ts:21","pc":[1310,1311,1312,1313,1314,1315]},{"teal":1437,"source":"contracts/abstracted_account.algo.ts:21","pc":[1316,1317,1318,1319,1320,1321]},{"teal":1438,"source":"contracts/abstracted_account.algo.ts:21","pc":[1322,1323,1324,1325,1326,1327]},{"teal":1439,"source":"contracts/abstracted_account.algo.ts:21","pc":[1328,1329,1330,1331,1332,1333]},{"teal":1440,"source":"contracts/abstracted_account.algo.ts:21","pc":[1334,1335,1336,1337,1338,1339]},{"teal":1441,"source":"contracts/abstracted_account.algo.ts:21","pc":[1340,1341,1342,1343,1344,1345]},{"teal":1442,"source":"contracts/abstracted_account.algo.ts:21","pc":[1346,1347,1348]},{"teal":1443,"source":"contracts/abstracted_account.algo.ts:21","pc":[1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374]},{"teal":1446,"source":"contracts/abstracted_account.algo.ts:21","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1375]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAgBiYJAAFwAWEBYwFuBA+IVJMBAAgAAAAAAAAAAAQVH3x1MRgUJQsxGQiNDAS1AAAAAAAAAAAAAASnAAAAAAAAAAAAAACKAAAoRwIjjAAxFiIIjAGLATIEDEEAaIsBjAKLAjgAK2QSSUEACIsCOCAyChIQQQAGIowAQgBIiwI4ECUSSUEACYsCOBg2MgASEElBAAeLAjgZIxIQSUEAB4sCOBsiEhBJQQAJiwI5GgAnBRIQQQAGIowAQgAJiwEiCIwBQv+QiwBEiYoBAChHAiOMADEWIgiMAYsBMgQMQQCDiwGMAosCOAArZBJJQQAIiwI4IDIKEhBBAAYijABCAGOLAjgQJRJJQQAJiwI4GDYyABIQSUEAB4sCOBkjEhBJQQAHiwI4GyISEElBAAmLAjkaACcFEhBBAAYijABCACSLAjgQJRNBAANCAA+LAjgYi/8SRIsCOBkjEkSLASIIjAFC/3WLAESJigABK2QyChJBAAUyA0IAAjIKiTYaAkkVJBJENhoBSRUkEkSIAAIiQ4oCADEAi/8SMQCL/hIRRIv+i/8TRCqL/mcri/8yAxJBAAUyCkIAAov/Z4k2GgFJFSQSRIgAAiJDigEAMQAqZBJEKov/Z4k2GgNJFSQSRDYaAkkVJBJENhoBF4gAAiJDigMAKDEAi/9yCEgSRCtkcwJIi/9yCEgSRIv/Fov+UIwAKYsAUL1MSElBAA8piwBQvkQ1/zT/gcABUxBEKov9Z4knCIgABFCwIkOKAAEqZImIAAIiQ4oAACtkcwJIiP8ZEkSJNhoCSRUiEkQjUzYaAUkVJBJEiAACIkOKAgAxACpkEkSxIrIQK2SyAIv/sgeL/7IggBtyZWtleWluZyBhYnN0cmFjdGVkIGFjY291bnSyBSOyAbOL/kEAA4j9momKAgEoi/8Wi/5QjAApiwBQvUxISUEAEimLAFC+RDX/NP9XAAgXMgYPEElBACEyBimLAFC+RDX/NP9XEAgXCSmLAFC+RDX/NP9XCAgXDxCMAIknCDYaAkkVJBJENhoBF4gACicGI08CVFCwIkOKAgEoMgOL/4j/iYwAiwBBAAQiQgAHi/6L/4j/d4wAiTYaAReIAAIiQ4oBACgyA4v/iP9gjACLABRBAAgxAIv/iP9RRLEishArZLIAK2SyB4v/cghIsiCAFnJla2V5aW5nIHRvIHBsdWdpbiBhcHCyBSOyAbMpi/8WiwBBAAUyA0IAAjEAUFC+RDX/NP+BEDIGFl0pi/8WiwBBAAUyA0IAAjEAUFBMv4v/iP0EiTYaAVcCAIgAAiJDigEAI4EIJwSL/1BOAroXiP9fiTYaBUkVIhJEI1M2GgQXNhoDFzYaAkkVJBJENhoBF4gAAiJDigUAKDEAKmQSRIv/Fov+UIwAKYsAUIv9Fov8FlAnB1AnBiOL+1RQv4k2GgJJFSQSRDYaAReIAAIiQ4oCACgxACpkEkSL/xaL/lCMACmLAFC8iTYaBkkVIhJEI1M2GgUXNhoEFzYaA0kVJBJENhoCFzYaAVcCAIgAAiJDigYAKEkxACpkEkQnBIv/UL1MSBREi/4Wi/1QjAAnBIv/UIsAv4v8Fov7FlAnB1AnBiOL+lRQjAEpiwBQiwG/iTYaAVcCAIgAAiJDigEAKDEAKmQSRCcEi/9QjAAnBIv/ULwpiwC+RFC8iYAEtMd9cTYaAI4B/IEAgATSS3VWgARfpEnGgAQTvETkJwWABMlaXT2ABOkCbaiABHx2bdyABFbyi1iABNEty2GABE03I1WABIpyp1CABONQudQ2GgCODPxf/Hr81Pzj/Pb9o/3e/mv+if7V/v7/ZwA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type PluginInfo = {
  lastValidRound: bigint,
  cooldown: bigint,
  lastCalled: bigint,
  adminPrivileges: boolean
}


/**
 * Converts the ABI tuple representation of a PluginInfo to the struct representation
 */
export function PluginInfoFromTuple(abiTuple: [bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginInfo, APP_SPEC.structs) as PluginInfo
}

export type PluginsKey = {
  application: bigint,
  allowedCaller: string
}


/**
 * Converts the ABI tuple representation of a PluginsKey to the struct representation
 */
export function PluginsKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginsKey, APP_SPEC.structs) as PluginsKey
}

/**
 * The argument types for the AbstractedAccount contract
 */
export type AbstractedAccountArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,address)void': {
      /**
       * The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
       */
      controlledAddress: string
      /**
       * The admin for this app
       */
      admin: string
    }
    'arc58_changeAdmin(address)void': {
      /**
       * The new admin
       */
      newAdmin: string
    }
    'arc58_pluginChangeAdmin(uint64,address,address)void': {
      /**
       * The app calling the plugin
       */
      plugin: bigint | number
      /**
       * The address that triggered the plugin
       */
      allowedCaller: string
      /**
       * The new admin
       */
      newAdmin: string
    }
    'arc58_getAdmin()address': Record<string, never>
    'arc58_verifyAuthAddr()void': Record<string, never>
    'arc58_rekeyTo(address,bool)void': {
      /**
       * The address to rekey to
       */
      addr: string
      /**
       * Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
       */
      flash: boolean
    }
    'arc58_canCall(uint64,address)bool': {
      /**
       * the plugin to be rekeyed to
       */
      plugin: bigint | number
      address: string
    }
    'arc58_rekeyToPlugin(uint64)void': {
      /**
       * The app to rekey to
       */
      plugin: bigint | number
    }
    'arc58_rekeyToNamedPlugin(string)void': {
      /**
       * The name of the plugin to rekey to
       */
      name: string
    }
    'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': {
      /**
       * The app to add
       */
      app: bigint | number
      /**
      * The address of that's allowed to call the app
      or the global zero address for all addresses

       */
      allowedCaller: string
      /**
       * The round when the permission expires
       */
      lastValidRound: bigint | number
      /**
       * The number of rounds that must pass before the plugin can be called again
       */
      cooldown: bigint | number
      /**
       * Whether the plugin has permissions to change the admin account
       */
      adminPrivileges: boolean
    }
    'arc58_removePlugin(uint64,address)void': {
      /**
       * The app to remove
       */
      app: bigint | number
      allowedCaller: string
    }
    'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': {
      /**
       * The plugin name
       */
      name: string
      /**
       * The plugin app
       */
      app: bigint | number
      /**
      * The address of that's allowed to call the app
      or the global zero address for all addresses

       */
      allowedCaller: string
      /**
       * The round when the permission expires
       */
      lastValidRound: bigint | number
      /**
       * The number of rounds that must pass before the plugin can be called again
       */
      cooldown: bigint | number
      /**
       * Whether the plugin has permissions to change the admin account
       */
      adminPrivileges: boolean
    }
    'arc58_removeNamedPlugin(string)void': {
      /**
       * The plugin name
       */
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,address)void': [controlledAddress: string, admin: string]
    'arc58_changeAdmin(address)void': [newAdmin: string]
    'arc58_pluginChangeAdmin(uint64,address,address)void': [plugin: bigint | number, allowedCaller: string, newAdmin: string]
    'arc58_getAdmin()address': []
    'arc58_verifyAuthAddr()void': []
    'arc58_rekeyTo(address,bool)void': [addr: string, flash: boolean]
    'arc58_canCall(uint64,address)bool': [plugin: bigint | number, address: string]
    'arc58_rekeyToPlugin(uint64)void': [plugin: bigint | number]
    'arc58_rekeyToNamedPlugin(string)void': [name: string]
    'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': [app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
    'arc58_removePlugin(uint64,address)void': [app: bigint | number, allowedCaller: string]
    'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': [name: string, app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
    'arc58_removeNamedPlugin(string)void': [name: string]
  }
}

/**
 * The return type for each method
 */
export type AbstractedAccountReturns = {
  'createApplication(address,address)void': void
  'arc58_changeAdmin(address)void': void
  'arc58_pluginChangeAdmin(uint64,address,address)void': void
  'arc58_getAdmin()address': string
  'arc58_verifyAuthAddr()void': void
  'arc58_rekeyTo(address,bool)void': void
  'arc58_canCall(uint64,address)bool': boolean
  'arc58_rekeyToPlugin(uint64)void': void
  'arc58_rekeyToNamedPlugin(string)void': void
  'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': void
  'arc58_removePlugin(uint64,address)void': void
  'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': void
  'arc58_removeNamedPlugin(string)void': void
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccountTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: AbstractedAccountArgs['obj']['createApplication(address,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['createApplication(address,address)void']
      returns: AbstractedAccountReturns['createApplication(address,address)void']
    }>
    & Record<'arc58_changeAdmin(address)void' | 'arc58_changeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']
      returns: AbstractedAccountReturns['arc58_changeAdmin(address)void']
    }>
    & Record<'arc58_pluginChangeAdmin(uint64,address,address)void' | 'arc58_pluginChangeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']
      returns: AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void']
    }>
    & Record<'arc58_getAdmin()address' | 'arc58_getAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_getAdmin()address']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_getAdmin()address']
      returns: AbstractedAccountReturns['arc58_getAdmin()address']
    }>
    & Record<'arc58_verifyAuthAddr()void' | 'arc58_verifyAuthAddr', {
      argsObj: AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']
      returns: AbstractedAccountReturns['arc58_verifyAuthAddr()void']
    }>
    & Record<'arc58_rekeyTo(address,bool)void' | 'arc58_rekeyTo', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']
      returns: AbstractedAccountReturns['arc58_rekeyTo(address,bool)void']
    }>
    & Record<'arc58_canCall(uint64,address)bool' | 'arc58_canCall', {
      argsObj: AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']
      /**
       * whether the plugin can be called via txn sender or globally
       */
      returns: AbstractedAccountReturns['arc58_canCall(uint64,address)bool']
    }>
    & Record<'arc58_rekeyToPlugin(uint64)void' | 'arc58_rekeyToPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']
      returns: AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void']
    }>
    & Record<'arc58_rekeyToNamedPlugin(string)void' | 'arc58_rekeyToNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void']
    }>
    & Record<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void' | 'arc58_addPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
      returns: AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
    }>
    & Record<'arc58_removePlugin(uint64,address)void' | 'arc58_removePlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']
      returns: AbstractedAccountReturns['arc58_removePlugin(uint64,address)void']
    }>
    & Record<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void' | 'arc58_addNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
      returns: AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
    }>
    & Record<'arc58_removeNamedPlugin(string)void' | 'arc58_removeNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_removeNamedPlugin(string)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        controlledAddress: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        plugins: Map<PluginsKey, PluginInfo>
        namedPlugins: Map<Uint8Array | string, PluginsKey>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AbstractedAccountSignatures = keyof AbstractedAccountTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AbstractedAccountNonVoidMethodSignatures = keyof AbstractedAccountTypes['methods'] extends infer T ? T extends keyof AbstractedAccountTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AbstractedAccountTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AbstractedAccountTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication(address,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AbstractedAccountCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AbstractedAccount smart contract
 */
export abstract class AbstractedAccountParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AbstractedAccountCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,address)void':
            return AbstractedAccountParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AbstractedAccount smart contract using the createApplication(address,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.controlledAddress, params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc58_changeAdmin(address)void ABI method
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_changeAdmin(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_pluginChangeAdmin(uint64,address,address)void ABI method
   *
   * Attempt to change the admin via plugin.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_pluginChangeAdmin(uint64,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.allowedCaller, params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_getAdmin()address ABI method
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_getAdmin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_verifyAuthAddr()void ABI method
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_verifyAuthAddr()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyTo(address,bool)void ABI method
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyTo(address,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addr, params.args.flash],
    }
  }
  /**
   * Constructs a no op call for the arc58_canCall(uint64,address)bool ABI method
   *
   * check whether the plugin can be used
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_canCall(uint64,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.address],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToPlugin(uint64)void ABI method
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToPlugin(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToNamedPlugin(string)void ABI method
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method
   *
   * Add an app to the list of approved plugins
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addPlugin(uint64,address,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges],
    }
  }
  /**
   * Constructs a no op call for the arc58_removePlugin(uint64,address)void ABI method
   *
   * Remove an app from the list of approved plugins
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removePlugin(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller],
    }
  }
  /**
   * Constructs a no op call for the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method
   *
   * Add a named plugin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges],
    }
  }
  /**
   * Constructs a no op call for the arc58_removeNamedPlugin(string)void ABI method
   *
   * Remove a named plugin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removeNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AbstractedAccount smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AbstractedAccountFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AbstractedAccountFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AbstractedAccountClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AbstractedAccountClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AbstractedAccountDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AbstractedAccountParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AbstractedAccountCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AbstractedAccountClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using an ABI method call using the createApplication(address,address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AbstractedAccountParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AbstractedAccountReturns['createApplication(address,address)void']) }, appClient: new AbstractedAccountClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AbstractedAccount app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AbstractedAccountNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AbstractedAccountClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AbstractedAccountClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call params: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58ChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_changeAdmin(address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58PluginChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58GetAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_getAdmin()address'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58VerifyAuthAddr: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_verifyAuthAddr()void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyTo: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call result: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58CanCall(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_canCall(uint64,address)bool'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemovePlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removePlugin(uint64,address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemoveNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AbstractedAccountClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> = {args: []}) {
    const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    return result.return as unknown as AbstractedAccountReturns['arc58_getAdmin()address']
  }

  /**
   * Makes a readonly (simulated) call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * check whether the plugin can be used
   *
   * @param params The params for the smart contract call
   * @returns The call result: whether the plugin can be called via txn sender or globally
   */
  async arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']>) {
    const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    return result.return as unknown as AbstractedAccountReturns['arc58_canCall(uint64,address)bool']
  }

  /**
   * Methods to access state for the current AbstractedAccount app
   */
  state = {
    /**
     * Methods to access global state for the current AbstractedAccount app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          controlledAddress: result.controlledAddress,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the controlledAddress key in global state
       */
      controlledAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("controlledAddress")) as string | undefined },
    },
    /**
     * Methods to access box state for the current AbstractedAccount app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the plugins map in box state
       */
      plugins: {
        /**
         * Get all current values of the plugins map in box state
         */
        getMap: async (): Promise<Map<PluginsKey, PluginInfo>> => { return (await this.appClient.state.box.getMap("plugins")) as Map<PluginsKey, PluginInfo> },
        /**
         * Get a current value of the plugins map by key from box state
         */
        value: async (key: PluginsKey): Promise<PluginInfo | undefined> => { return await this.appClient.state.box.getMapValue("plugins", key) as PluginInfo | undefined },
      },
      /**
       * Get values from the namedPlugins map in box state
       */
      namedPlugins: {
        /**
         * Get all current values of the namedPlugins map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, PluginsKey>> => { return (await this.appClient.state.box.getMap("namedPlugins")) as Map<Uint8Array, PluginsKey> },
        /**
         * Get a current value of the namedPlugins map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<PluginsKey | undefined> => { return await this.appClient.state.box.getMapValue("namedPlugins", key) as PluginsKey | undefined },
      },
    },
  }

  public newGroup(): AbstractedAccountComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc58_changeAdmin(address)void method call against the AbstractedAccount contract
       */
      arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58ChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_pluginChangeAdmin(uint64,address,address)void method call against the AbstractedAccount contract
       */
      arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58PluginChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_getAdmin()address method call against the AbstractedAccount contract
       */
      arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58GetAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_getAdmin()address', v))
        return this
      },
      /**
       * Add a arc58_verifyAuthAddr()void method call against the AbstractedAccount contract
       */
      arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58VerifyAuthAddr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyTo(address,bool)void method call against the AbstractedAccount contract
       */
      arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyTo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_canCall(uint64,address)bool method call against the AbstractedAccount contract
       */
      arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58CanCall(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_canCall(uint64,address)bool', v))
        return this
      },
      /**
       * Add a arc58_rekeyToPlugin(uint64)void method call against the AbstractedAccount contract
       */
      arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyToNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addPlugin(uint64,address,uint64,uint64,bool)void method call against the AbstractedAccount contract
       */
      arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removePlugin(uint64,address)void method call against the AbstractedAccount contract
       */
      arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemovePlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void method call against the AbstractedAccount contract
       */
      arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removeNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemoveNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AbstractedAccount contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc58_changeAdmin(address)void ABI method.
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58ChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_changeAdmin(address)void'] | undefined]>

  /**
   * Calls the arc58_pluginChangeAdmin(uint64,address,address)void ABI method.
   *
   * Attempt to change the admin via plugin.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58PluginChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'] | undefined]>

  /**
   * Calls the arc58_getAdmin()address ABI method.
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58GetAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_getAdmin()address'] | undefined]>

  /**
   * Calls the arc58_verifyAuthAddr()void ABI method.
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58VerifyAuthAddr(params?: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_verifyAuthAddr()void'] | undefined]>

  /**
   * Calls the arc58_rekeyTo(address,bool)void ABI method.
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyTo(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'] | undefined]>

  /**
   * Calls the arc58_canCall(uint64,address)bool ABI method.
   *
   * check whether the plugin can be used
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58CanCall(params?: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_canCall(uint64,address)bool'] | undefined]>

  /**
   * Calls the arc58_rekeyToPlugin(uint64)void ABI method.
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void'] | undefined]>

  /**
   * Calls the arc58_rekeyToNamedPlugin(string)void ABI method.
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'] | undefined]>

  /**
   * Calls the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method.
   *
   * Add an app to the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the arc58_removePlugin(uint64,address)void ABI method.
   *
   * Remove an app from the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemovePlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removePlugin(uint64,address)void'] | undefined]>

  /**
   * Calls the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method.
   *
   * Add a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the arc58_removeNamedPlugin(string)void ABI method.
   *
   * Remove a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

