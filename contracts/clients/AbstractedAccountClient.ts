/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AbstractedAccount","desc":"","methods":[{"name":"createApplication","desc":"Create an abstracted account application.\nThis is not part of ARC58 and implementation specific.","args":[{"name":"admin","type":"address","desc":"The admin for this app"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc58_changeAdmin","desc":"Attempt to change the admin for this app. Some implementations MAY not support this.","args":[{"name":"newAdmin","type":"address","desc":"The new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_pluginChangeAdmin","desc":"Attempt to change the admin via plugin.","args":[{"name":"plugin","type":"uint64","desc":"The app calling the plugin"},{"name":"allowedCaller","type":"address","desc":"The address that triggered the plugin"},{"name":"newAdmin","type":"address","desc":"The new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_getAdmin","desc":"Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin.","readonly":true,"args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_verifyAuthAddr","desc":"Verify the abstracted account is rekeyed to this app","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_rekeyTo","desc":"Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.","args":[{"name":"addr","type":"address","desc":"The address to rekey to"},{"name":"flash","type":"bool","desc":"Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_canCall","desc":"check whether the plugin can be used","readonly":true,"args":[{"name":"plugin","type":"uint64","desc":"the plugin to be rekeyed to"},{"name":"address","type":"address"}],"returns":{"type":"bool","desc":"whether the plugin can be called via txn sender or globally"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_rekeyToPlugin","desc":"Temporarily rekey to an approved plugin app address","args":[{"name":"plugin","type":"uint64","desc":"The app to rekey to"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_rekeyToNamedPlugin","desc":"Temporarily rekey to a named plugin app address","args":[{"name":"name","type":"string","desc":"The name of the plugin to rekey to"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_addPlugin","desc":"Add an app to the list of approved plugins","args":[{"name":"app","type":"uint64","desc":"The app to add"},{"name":"allowedCaller","type":"address","desc":"The address of that's allowed to call the app\nor the global zero address for all addresses"},{"name":"lastValidRound","type":"uint64","desc":"The round when the permission expires"},{"name":"cooldown","type":"uint64","desc":"The number of rounds that must pass before the plugin can be called again"},{"name":"adminPrivileges","type":"bool","desc":"Whether the plugin has permissions to change the admin account"},{"name":"methods","type":"byte[4][]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_removePlugin","desc":"Remove an app from the list of approved plugins","args":[{"name":"app","type":"uint64","desc":"The app to remove"},{"name":"allowedCaller","type":"address","desc":"The address of that's allowed to call the app"},{"name":"methods","type":"byte[4][]","desc":"The methods that to remove before attempting to uninstall the plugin\nor the global zero address for all addresses"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_addNamedPlugin","desc":"Add a named plugin","args":[{"name":"name","type":"string","desc":"The plugin name"},{"name":"app","type":"uint64","desc":"The plugin app"},{"name":"allowedCaller","type":"address","desc":"The address of that's allowed to call the app\nor the global zero address for all addresses"},{"name":"lastValidRound","type":"uint64","desc":"The round when the permission expires"},{"name":"cooldown","type":"uint64","desc":"The number of rounds that must pass before the plugin can be called again"},{"name":"adminPrivileges","type":"bool","desc":"Whether the plugin has permissions to change the admin account"},{"name":"methods","type":"byte[4][]","desc":"The methods that are allowed to be called on the plugin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_removeNamedPlugin","desc":"Remove a named plugin","args":[{"name":"name","type":"string","desc":"The plugin name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_addMethod","args":[{"name":"app","type":"uint64"},{"name":"allowedCaller","type":"address"},{"name":"method","type":"byte[4]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc58_removeMethod","args":[{"name":"app","type":"uint64"},{"name":"allowedCaller","type":"address"},{"name":"method","type":"byte[4]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"PluginInfo":[{"name":"lastValidRound","type":"uint64"},{"name":"cooldown","type":"uint64"},{"name":"lastCalled","type":"uint64"},{"name":"methodRestrictions","type":"uint64"},{"name":"adminPrivileges","type":"bool"}],"PluginsKey":[{"name":"application","type":"uint64"},{"name":"allowedCaller","type":"address"}],"MethodsKey":[{"name":"application","type":"uint64"},{"name":"allowedCaller","type":"address"},{"name":"method","type":"byte[4]"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"admin":{"key":"YQ==","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"plugins":{"keyType":"PluginsKey","valueType":"PluginInfo","prefix":"p"},"methods":{"keyType":"MethodsKey","valueType":"byte[0]","prefix":"m"},"namedPlugins":{"keyType":"AVMBytes","valueType":"PluginsKey","prefix":"n"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/abstracted_account.algo.ts:32","pc":[0]},{"teal":2,"source":"contracts/abstracted_account.algo.ts:32","pc":[1,2,3,4,5,6,7,8]},{"teal":3,"source":"contracts/abstracted_account.algo.ts:32","pc":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]},{"teal":15,"source":"contracts/abstracted_account.algo.ts:32","pc":[41,42]},{"teal":16,"source":"contracts/abstracted_account.algo.ts:32","pc":[43]},{"teal":17,"source":"contracts/abstracted_account.algo.ts:32","pc":[44,45]},{"teal":18,"source":"contracts/abstracted_account.algo.ts:32","pc":[46]},{"teal":19,"source":"contracts/abstracted_account.algo.ts:32","pc":[47,48]},{"teal":20,"source":"contracts/abstracted_account.algo.ts:32","pc":[49]},{"teal":21,"source":"contracts/abstracted_account.algo.ts:32","pc":[50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75]},{"teal":25,"source":"contracts/abstracted_account.algo.ts:32","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[76]},{"teal":29,"source":"contracts/abstracted_account.algo.ts:55","pc":[77,78,79]},{"teal":32,"source":"contracts/abstracted_account.algo.ts:55","pc":[80]},{"teal":36,"source":"contracts/abstracted_account.algo.ts:56","pc":[81,82]},{"teal":37,"source":"contracts/abstracted_account.algo.ts:56","pc":[83]},{"teal":38,"source":"contracts/abstracted_account.algo.ts:56","pc":[84,85]},{"teal":39,"source":"contracts/abstracted_account.algo.ts:56","pc":[86]},{"teal":40,"source":"contracts/abstracted_account.algo.ts:56","pc":[87,88]},{"teal":44,"source":"contracts/abstracted_account.algo.ts:58","pc":[89]},{"teal":45,"source":"contracts/abstracted_account.algo.ts:58","pc":[90,91]},{"teal":46,"source":"contracts/abstracted_account.algo.ts:58","pc":[92]},{"teal":47,"source":"contracts/abstracted_account.algo.ts:58","pc":[93]},{"teal":48,"source":"contracts/abstracted_account.algo.ts:58","pc":[94]},{"teal":49,"source":"contracts/abstracted_account.algo.ts:58","pc":[95]},{"teal":52,"source":"contracts/abstracted_account.algo.ts:58","errorMessage":"plugin does not exist","pc":[96]},{"teal":56,"source":"contracts/abstracted_account.algo.ts:59","pc":[97]},{"teal":57,"source":"contracts/abstracted_account.algo.ts:59","pc":[98,99]},{"teal":58,"source":"contracts/abstracted_account.algo.ts:59","pc":[100]},{"teal":59,"source":"contracts/abstracted_account.algo.ts:59","pc":[101]},{"teal":62,"source":"contracts/abstracted_account.algo.ts:59","errorMessage":"box value does not exist: this.plugins(key).value","pc":[102]},{"teal":63,"source":"contracts/abstracted_account.algo.ts:59","pc":[103,104]},{"teal":64,"source":"contracts/abstracted_account.algo.ts:59","pc":[105,106]},{"teal":65,"source":"contracts/abstracted_account.algo.ts:59","pc":[107,108,109]},{"teal":66,"source":"contracts/abstracted_account.algo.ts:59","pc":[110]},{"teal":67,"source":"contracts/abstracted_account.algo.ts:59","pc":[111,112]},{"teal":68,"source":"contracts/abstracted_account.algo.ts:59","pc":[113]},{"teal":71,"source":"contracts/abstracted_account.algo.ts:59","errorMessage":"plugin is expired","pc":[114]},{"teal":78,"source":"contracts/abstracted_account.algo.ts:61","pc":[115,116]},{"teal":79,"source":"contracts/abstracted_account.algo.ts:61","pc":[117]},{"teal":80,"source":"contracts/abstracted_account.algo.ts:61","pc":[118,119]},{"teal":81,"source":"contracts/abstracted_account.algo.ts:61","pc":[120]},{"teal":82,"source":"contracts/abstracted_account.algo.ts:61","pc":[121]},{"teal":85,"source":"contracts/abstracted_account.algo.ts:61","errorMessage":"box value does not exist: this.plugins(key).value","pc":[122]},{"teal":86,"source":"contracts/abstracted_account.algo.ts:61","pc":[123,124]},{"teal":87,"source":"contracts/abstracted_account.algo.ts:61","pc":[125,126]},{"teal":88,"source":"contracts/abstracted_account.algo.ts:61","pc":[127,128,129]},{"teal":89,"source":"contracts/abstracted_account.algo.ts:61","pc":[130]},{"teal":90,"source":"contracts/abstracted_account.algo.ts:61","pc":[131]},{"teal":91,"source":"contracts/abstracted_account.algo.ts:61","pc":[132]},{"teal":92,"source":"contracts/abstracted_account.algo.ts:61","pc":[133,134]},{"teal":93,"source":"contracts/abstracted_account.algo.ts:61","pc":[135]},{"teal":94,"source":"contracts/abstracted_account.algo.ts:61","pc":[136]},{"teal":97,"source":"contracts/abstracted_account.algo.ts:61","errorMessage":"box value does not exist: this.plugins(key).value","pc":[137]},{"teal":98,"source":"contracts/abstracted_account.algo.ts:61","pc":[138,139]},{"teal":99,"source":"contracts/abstracted_account.algo.ts:61","pc":[140,141]},{"teal":100,"source":"contracts/abstracted_account.algo.ts:61","pc":[142,143,144]},{"teal":101,"source":"contracts/abstracted_account.algo.ts:61","pc":[145]},{"teal":102,"source":"contracts/abstracted_account.algo.ts:61","pc":[146]},{"teal":105,"source":"contracts/abstracted_account.algo.ts:60","errorMessage":"plugin is on cooldown","pc":[147]},{"teal":106,"source":"contracts/abstracted_account.algo.ts:55","pc":[148]},{"teal":110,"source":"contracts/abstracted_account.algo.ts:66","pc":[149,150,151]},{"teal":113,"source":"contracts/abstracted_account.algo.ts:66","pc":[152]},{"teal":117,"source":"contracts/abstracted_account.algo.ts:67","pc":[153,154]},{"teal":118,"source":"contracts/abstracted_account.algo.ts:67","pc":[155]},{"teal":119,"source":"contracts/abstracted_account.algo.ts:67","pc":[156,157]},{"teal":120,"source":"contracts/abstracted_account.algo.ts:67","pc":[158]},{"teal":121,"source":"contracts/abstracted_account.algo.ts:67","pc":[159,160]},{"teal":129,"source":"contracts/abstracted_account.algo.ts:70","pc":[161]},{"teal":130,"source":"contracts/abstracted_account.algo.ts:70","pc":[162,163]},{"teal":131,"source":"contracts/abstracted_account.algo.ts:70","pc":[164]},{"teal":132,"source":"contracts/abstracted_account.algo.ts:70","pc":[165]},{"teal":133,"source":"contracts/abstracted_account.algo.ts:70","pc":[166]},{"teal":134,"source":"contracts/abstracted_account.algo.ts:70","pc":[167]},{"teal":135,"source":"contracts/abstracted_account.algo.ts:70","pc":[168]},{"teal":136,"source":"contracts/abstracted_account.algo.ts:70","pc":[169,170,171]},{"teal":137,"source":"contracts/abstracted_account.algo.ts:71","pc":[172]},{"teal":138,"source":"contracts/abstracted_account.algo.ts:71","pc":[173,174]},{"teal":139,"source":"contracts/abstracted_account.algo.ts:71","pc":[175]},{"teal":140,"source":"contracts/abstracted_account.algo.ts:71","pc":[176]},{"teal":143,"source":"contracts/abstracted_account.algo.ts:71","errorMessage":"box value does not exist: this.plugins(key).value","pc":[177]},{"teal":144,"source":"contracts/abstracted_account.algo.ts:71","pc":[178,179]},{"teal":145,"source":"contracts/abstracted_account.algo.ts:71","pc":[180,181]},{"teal":146,"source":"contracts/abstracted_account.algo.ts:71","pc":[182,183,184]},{"teal":147,"source":"contracts/abstracted_account.algo.ts:71","pc":[185]},{"teal":148,"source":"contracts/abstracted_account.algo.ts:71","pc":[186,187]},{"teal":149,"source":"contracts/abstracted_account.algo.ts:71","pc":[188]},{"teal":150,"source":"contracts/abstracted_account.algo.ts:70","pc":[189]},{"teal":153,"source":"contracts/abstracted_account.algo.ts:71","pc":[190]},{"teal":154,"source":"contracts/abstracted_account.algo.ts:71","pc":[191,192,193]},{"teal":155,"source":"contracts/abstracted_account.algo.ts:72","pc":[194,195]},{"teal":156,"source":"contracts/abstracted_account.algo.ts:72","pc":[196]},{"teal":157,"source":"contracts/abstracted_account.algo.ts:72","pc":[197,198]},{"teal":158,"source":"contracts/abstracted_account.algo.ts:72","pc":[199]},{"teal":159,"source":"contracts/abstracted_account.algo.ts:72","pc":[200]},{"teal":162,"source":"contracts/abstracted_account.algo.ts:72","errorMessage":"box value does not exist: this.plugins(key).value","pc":[201]},{"teal":163,"source":"contracts/abstracted_account.algo.ts:72","pc":[202,203]},{"teal":164,"source":"contracts/abstracted_account.algo.ts:72","pc":[204,205]},{"teal":165,"source":"contracts/abstracted_account.algo.ts:72","pc":[206,207,208]},{"teal":166,"source":"contracts/abstracted_account.algo.ts:72","pc":[209]},{"teal":167,"source":"contracts/abstracted_account.algo.ts:72","pc":[210]},{"teal":168,"source":"contracts/abstracted_account.algo.ts:72","pc":[211]},{"teal":169,"source":"contracts/abstracted_account.algo.ts:72","pc":[212,213]},{"teal":170,"source":"contracts/abstracted_account.algo.ts:72","pc":[214]},{"teal":171,"source":"contracts/abstracted_account.algo.ts:72","pc":[215]},{"teal":174,"source":"contracts/abstracted_account.algo.ts:72","errorMessage":"box value does not exist: this.plugins(key).value","pc":[216]},{"teal":175,"source":"contracts/abstracted_account.algo.ts:72","pc":[217,218]},{"teal":176,"source":"contracts/abstracted_account.algo.ts:72","pc":[219,220]},{"teal":177,"source":"contracts/abstracted_account.algo.ts:72","pc":[221,222,223]},{"teal":178,"source":"contracts/abstracted_account.algo.ts:72","pc":[224]},{"teal":179,"source":"contracts/abstracted_account.algo.ts:72","pc":[225]},{"teal":180,"source":"contracts/abstracted_account.algo.ts:71","pc":[226]},{"teal":184,"source":"contracts/abstracted_account.algo.ts:66","pc":[227,228]},{"teal":185,"source":"contracts/abstracted_account.algo.ts:66","pc":[229]},{"teal":189,"source":"contracts/abstracted_account.algo.ts:76","pc":[230,231,232]},{"teal":194,"source":"contracts/abstracted_account.algo.ts:77","pc":[233,234]},{"teal":195,"source":"contracts/abstracted_account.algo.ts:77","pc":[235,236]},{"teal":196,"source":"contracts/abstracted_account.algo.ts:77","pc":[237,238]},{"teal":197,"source":"contracts/abstracted_account.algo.ts:77","pc":[239]},{"teal":198,"source":"contracts/abstracted_account.algo.ts:77","pc":[240]},{"teal":199,"source":"contracts/abstracted_account.algo.ts:77","pc":[241,242,243]},{"teal":200,"source":"contracts/abstracted_account.algo.ts:77","pc":[244,245]},{"teal":201,"source":"contracts/abstracted_account.algo.ts:77","pc":[246,247]},{"teal":202,"source":"contracts/abstracted_account.algo.ts:77","pc":[248,249]},{"teal":203,"source":"contracts/abstracted_account.algo.ts:77","pc":[250]},{"teal":204,"source":"contracts/abstracted_account.algo.ts:77","pc":[251]},{"teal":207,"source":"contracts/abstracted_account.algo.ts:77","pc":[252,253,254]},{"teal":212,"source":"contracts/abstracted_account.algo.ts:78","pc":[255]},{"teal":213,"source":"contracts/abstracted_account.algo.ts:78","pc":[256]},{"teal":224,"source":"contracts/abstracted_account.algo.ts:82","pc":[257,258]},{"teal":225,"source":"contracts/abstracted_account.algo.ts:82","pc":[259,260]},{"teal":226,"source":"contracts/abstracted_account.algo.ts:82","pc":[261,262]},{"teal":227,"source":"contracts/abstracted_account.algo.ts:82","pc":[263]},{"teal":228,"source":"contracts/abstracted_account.algo.ts:82","pc":[264]},{"teal":229,"source":"contracts/abstracted_account.algo.ts:82","pc":[265,266,267]},{"teal":230,"source":"contracts/abstracted_account.algo.ts:83","pc":[268,269]},{"teal":231,"source":"contracts/abstracted_account.algo.ts:83","pc":[270,271]},{"teal":232,"source":"contracts/abstracted_account.algo.ts:83","pc":[272,273,274]},{"teal":233,"source":"contracts/abstracted_account.algo.ts:83","pc":[275]},{"teal":234,"source":"contracts/abstracted_account.algo.ts:82","pc":[276]},{"teal":237,"source":"contracts/abstracted_account.algo.ts:83","pc":[277]},{"teal":238,"source":"contracts/abstracted_account.algo.ts:83","pc":[278,279,280]},{"teal":239,"source":"contracts/abstracted_account.algo.ts:84","pc":[281,282]},{"teal":240,"source":"contracts/abstracted_account.algo.ts:84","pc":[283,284]},{"teal":241,"source":"contracts/abstracted_account.algo.ts:84","pc":[285]},{"teal":242,"source":"contracts/abstracted_account.algo.ts:84","pc":[286]},{"teal":243,"source":"contracts/abstracted_account.algo.ts:83","pc":[287]},{"teal":246,"source":"contracts/abstracted_account.algo.ts:84","pc":[288]},{"teal":247,"source":"contracts/abstracted_account.algo.ts:84","pc":[289,290,291]},{"teal":248,"source":"contracts/abstracted_account.algo.ts:85","pc":[292,293]},{"teal":249,"source":"contracts/abstracted_account.algo.ts:85","pc":[294,295]},{"teal":250,"source":"contracts/abstracted_account.algo.ts:85","pc":[296]},{"teal":251,"source":"contracts/abstracted_account.algo.ts:85","pc":[297]},{"teal":252,"source":"contracts/abstracted_account.algo.ts:84","pc":[298]},{"teal":255,"source":"contracts/abstracted_account.algo.ts:85","pc":[299]},{"teal":256,"source":"contracts/abstracted_account.algo.ts:85","pc":[300,301,302]},{"teal":257,"source":"contracts/abstracted_account.algo.ts:86","pc":[303,304]},{"teal":258,"source":"contracts/abstracted_account.algo.ts:86","pc":[305,306,307]},{"teal":259,"source":"contracts/abstracted_account.algo.ts:86","pc":[308,309]},{"teal":260,"source":"contracts/abstracted_account.algo.ts:86","pc":[310]},{"teal":261,"source":"contracts/abstracted_account.algo.ts:85","pc":[311]},{"teal":264,"source":"contracts/abstracted_account.algo.ts:76","pc":[312]},{"teal":268,"source":"contracts/abstracted_account.algo.ts:90","pc":[313,314,315]},{"teal":271,"source":"contracts/abstracted_account.algo.ts:90","pc":[316]},{"teal":272,"source":"contracts/abstracted_account.algo.ts:90","pc":[317,318]},{"teal":276,"source":"contracts/abstracted_account.algo.ts:91","pc":[319]},{"teal":277,"source":"contracts/abstracted_account.algo.ts:91","pc":[320,321]},{"teal":281,"source":"contracts/abstracted_account.algo.ts:92","pc":[322,323]},{"teal":282,"source":"contracts/abstracted_account.algo.ts:92","pc":[324]},{"teal":283,"source":"contracts/abstracted_account.algo.ts:92","pc":[325]},{"teal":284,"source":"contracts/abstracted_account.algo.ts:92","pc":[326,327]},{"teal":289,"source":"contracts/abstracted_account.algo.ts:92","pc":[328,329]},{"teal":290,"source":"contracts/abstracted_account.algo.ts:92","pc":[330,331]},{"teal":291,"source":"contracts/abstracted_account.algo.ts:92","pc":[332]},{"teal":292,"source":"contracts/abstracted_account.algo.ts:92","pc":[333,334,335]},{"teal":296,"source":"contracts/abstracted_account.algo.ts:93","pc":[336,337]},{"teal":297,"source":"contracts/abstracted_account.algo.ts:93","pc":[338,339]},{"teal":302,"source":"contracts/abstracted_account.algo.ts:95","pc":[340,341]},{"teal":303,"source":"contracts/abstracted_account.algo.ts:95","pc":[342,343,344]},{"teal":304,"source":"contracts/abstracted_account.algo.ts:95","pc":[345,346,347]},{"teal":309,"source":"contracts/abstracted_account.algo.ts:96","pc":[348]},{"teal":310,"source":"contracts/abstracted_account.algo.ts:96","pc":[349,350]},{"teal":317,"source":"contracts/abstracted_account.algo.ts:92","pc":[351,352]},{"teal":318,"source":"contracts/abstracted_account.algo.ts:92","pc":[353]},{"teal":319,"source":"contracts/abstracted_account.algo.ts:92","pc":[354]},{"teal":320,"source":"contracts/abstracted_account.algo.ts:92","pc":[355,356]},{"teal":321,"source":"contracts/abstracted_account.algo.ts:92","pc":[357,358,359]},{"teal":326,"source":"contracts/abstracted_account.algo.ts:100","pc":[360,361]},{"teal":329,"source":"contracts/abstracted_account.algo.ts:100","errorMessage":"rekey back not found","pc":[362]},{"teal":330,"source":"contracts/abstracted_account.algo.ts:90","pc":[363]},{"teal":340,"source":"contracts/abstracted_account.algo.ts:110","pc":[364,365,366]},{"teal":343,"source":"contracts/abstracted_account.algo.ts:110","pc":[367]},{"teal":344,"source":"contracts/abstracted_account.algo.ts:110","pc":[368,369]},{"teal":348,"source":"contracts/abstracted_account.algo.ts:111","pc":[370,371]},{"teal":349,"source":"contracts/abstracted_account.algo.ts:111","pc":[372]},{"teal":350,"source":"contracts/abstracted_account.algo.ts:111","pc":[373,374]},{"teal":351,"source":"contracts/abstracted_account.algo.ts:111","pc":[375]},{"teal":352,"source":"contracts/abstracted_account.algo.ts:111","pc":[376,377]},{"teal":356,"source":"contracts/abstracted_account.algo.ts:112","pc":[378,379]},{"teal":357,"source":"contracts/abstracted_account.algo.ts:112","pc":[380]},{"teal":358,"source":"contracts/abstracted_account.algo.ts:112","pc":[381,382]},{"teal":359,"source":"contracts/abstracted_account.algo.ts:112","pc":[383]},{"teal":360,"source":"contracts/abstracted_account.algo.ts:112","pc":[384,385]},{"teal":364,"source":"contracts/abstracted_account.algo.ts:114","pc":[386]},{"teal":365,"source":"contracts/abstracted_account.algo.ts:114","pc":[387,388]},{"teal":369,"source":"contracts/abstracted_account.algo.ts:115","pc":[389,390]},{"teal":370,"source":"contracts/abstracted_account.algo.ts:115","pc":[391]},{"teal":371,"source":"contracts/abstracted_account.algo.ts:115","pc":[392,393,394]},{"teal":372,"source":"contracts/abstracted_account.algo.ts:115","pc":[395]},{"teal":373,"source":"contracts/abstracted_account.algo.ts:115","pc":[396,397]},{"teal":374,"source":"contracts/abstracted_account.algo.ts:115","pc":[398]},{"teal":375,"source":"contracts/abstracted_account.algo.ts:115","pc":[399]},{"teal":378,"source":"contracts/abstracted_account.algo.ts:115","errorMessage":"box value does not exist: this.plugins(gkey).value","pc":[400]},{"teal":379,"source":"contracts/abstracted_account.algo.ts:115","pc":[401,402]},{"teal":380,"source":"contracts/abstracted_account.algo.ts:115","pc":[403,404]},{"teal":381,"source":"contracts/abstracted_account.algo.ts:115","pc":[405,406,407]},{"teal":382,"source":"contracts/abstracted_account.algo.ts:115","pc":[408]},{"teal":383,"source":"contracts/abstracted_account.algo.ts:115","pc":[409]},{"teal":384,"source":"contracts/abstracted_account.algo.ts:115","pc":[410]},{"teal":385,"source":"contracts/abstracted_account.algo.ts:115","pc":[411]},{"teal":388,"source":"contracts/abstracted_account.algo.ts:115","pc":[412,413]},{"teal":392,"source":"contracts/abstracted_account.algo.ts:116","pc":[414,415]},{"teal":393,"source":"contracts/abstracted_account.algo.ts:116","pc":[416]},{"teal":394,"source":"contracts/abstracted_account.algo.ts:116","pc":[417,418,419]},{"teal":395,"source":"contracts/abstracted_account.algo.ts:116","pc":[420]},{"teal":396,"source":"contracts/abstracted_account.algo.ts:116","pc":[421,422]},{"teal":397,"source":"contracts/abstracted_account.algo.ts:116","pc":[423]},{"teal":398,"source":"contracts/abstracted_account.algo.ts:116","pc":[424]},{"teal":401,"source":"contracts/abstracted_account.algo.ts:116","errorMessage":"box value does not exist: this.plugins(key).value","pc":[425]},{"teal":402,"source":"contracts/abstracted_account.algo.ts:116","pc":[426,427]},{"teal":403,"source":"contracts/abstracted_account.algo.ts:116","pc":[428,429]},{"teal":404,"source":"contracts/abstracted_account.algo.ts:116","pc":[430,431,432]},{"teal":405,"source":"contracts/abstracted_account.algo.ts:116","pc":[433]},{"teal":406,"source":"contracts/abstracted_account.algo.ts:116","pc":[434]},{"teal":407,"source":"contracts/abstracted_account.algo.ts:116","pc":[435]},{"teal":408,"source":"contracts/abstracted_account.algo.ts:116","pc":[436]},{"teal":411,"source":"contracts/abstracted_account.algo.ts:116","pc":[437,438]},{"teal":415,"source":"contracts/abstracted_account.algo.ts:118","pc":[439,440]},{"teal":416,"source":"contracts/abstracted_account.algo.ts:118","pc":[441]},{"teal":417,"source":"contracts/abstracted_account.algo.ts:118","pc":[442]},{"teal":418,"source":"contracts/abstracted_account.algo.ts:118","pc":[443,444]},{"teal":423,"source":"contracts/abstracted_account.algo.ts:118","pc":[445,446]},{"teal":424,"source":"contracts/abstracted_account.algo.ts:118","pc":[447,448]},{"teal":425,"source":"contracts/abstracted_account.algo.ts:118","pc":[449]},{"teal":426,"source":"contracts/abstracted_account.algo.ts:118","pc":[450,451,452]},{"teal":430,"source":"contracts/abstracted_account.algo.ts:119","pc":[453,454]},{"teal":431,"source":"contracts/abstracted_account.algo.ts:119","pc":[455,456]},{"teal":436,"source":"contracts/abstracted_account.algo.ts:121","pc":[457,458]},{"teal":437,"source":"contracts/abstracted_account.algo.ts:121","pc":[459,460,461]},{"teal":438,"source":"contracts/abstracted_account.algo.ts:121","pc":[462,463,464]},{"teal":443,"source":"contracts/abstracted_account.algo.ts:122","pc":[465]},{"teal":444,"source":"contracts/abstracted_account.algo.ts:122","pc":[466,467]},{"teal":449,"source":"contracts/abstracted_account.algo.ts:125","pc":[468,469]},{"teal":450,"source":"contracts/abstracted_account.algo.ts:125","pc":[470]},{"teal":451,"source":"contracts/abstracted_account.algo.ts:125","pc":[471]},{"teal":452,"source":"contracts/abstracted_account.algo.ts:125","pc":[472,473,474]},{"teal":453,"source":"contracts/abstracted_account.algo.ts:125","pc":[475,476]},{"teal":454,"source":"contracts/abstracted_account.algo.ts:125","pc":[477,478]},{"teal":455,"source":"contracts/abstracted_account.algo.ts:125","pc":[479,480]},{"teal":456,"source":"contracts/abstracted_account.algo.ts:125","pc":[481,482,483]},{"teal":457,"source":"contracts/abstracted_account.algo.ts:125","pc":[484]},{"teal":460,"source":"contracts/abstracted_account.algo.ts:125","pc":[485,486]},{"teal":464,"source":"contracts/abstracted_account.algo.ts:126","pc":[487,488]},{"teal":465,"source":"contracts/abstracted_account.algo.ts:126","pc":[489]},{"teal":466,"source":"contracts/abstracted_account.algo.ts:126","pc":[490,491,492]},{"teal":467,"source":"contracts/abstracted_account.algo.ts:126","pc":[493,494]},{"teal":468,"source":"contracts/abstracted_account.algo.ts:126","pc":[495]},{"teal":471,"source":"contracts/abstracted_account.algo.ts:126","pc":[496,497]},{"teal":475,"source":"contracts/abstracted_account.algo.ts:127","pc":[498,499]},{"teal":476,"source":"contracts/abstracted_account.algo.ts:127","pc":[500]},{"teal":477,"source":"contracts/abstracted_account.algo.ts:127","pc":[501]},{"teal":478,"source":"contracts/abstracted_account.algo.ts:127","pc":[502,503,504]},{"teal":479,"source":"contracts/abstracted_account.algo.ts:127","pc":[505,506]},{"teal":480,"source":"contracts/abstracted_account.algo.ts:127","pc":[507,508]},{"teal":481,"source":"contracts/abstracted_account.algo.ts:127","pc":[509,510]},{"teal":482,"source":"contracts/abstracted_account.algo.ts:127","pc":[511,512,513]},{"teal":483,"source":"contracts/abstracted_account.algo.ts:127","pc":[514]},{"teal":486,"source":"contracts/abstracted_account.algo.ts:127","pc":[515,516]},{"teal":490,"source":"contracts/abstracted_account.algo.ts:128","pc":[517,518]},{"teal":491,"source":"contracts/abstracted_account.algo.ts:128","pc":[519]},{"teal":492,"source":"contracts/abstracted_account.algo.ts:128","pc":[520,521,522]},{"teal":493,"source":"contracts/abstracted_account.algo.ts:128","pc":[523,524]},{"teal":494,"source":"contracts/abstracted_account.algo.ts:128","pc":[525]},{"teal":497,"source":"contracts/abstracted_account.algo.ts:128","pc":[526,527]},{"teal":501,"source":"contracts/abstracted_account.algo.ts:130","pc":[528,529]},{"teal":502,"source":"contracts/abstracted_account.algo.ts:130","pc":[530]},{"teal":503,"source":"contracts/abstracted_account.algo.ts:130","pc":[531,532,533]},{"teal":504,"source":"contracts/abstracted_account.algo.ts:130","pc":[534,535]},{"teal":505,"source":"contracts/abstracted_account.algo.ts:130","pc":[536]},{"teal":509,"source":"contracts/abstracted_account.algo.ts:130","errorMessage":"method not allowed","pc":[537]},{"teal":514,"source":"contracts/abstracted_account.algo.ts:118","pc":[538,539]},{"teal":515,"source":"contracts/abstracted_account.algo.ts:118","pc":[540]},{"teal":516,"source":"contracts/abstracted_account.algo.ts:118","pc":[541]},{"teal":517,"source":"contracts/abstracted_account.algo.ts:118","pc":[542,543]},{"teal":518,"source":"contracts/abstracted_account.algo.ts:118","pc":[544,545,546]},{"teal":523,"source":"contracts/abstracted_account.algo.ts:133","pc":[547,548]},{"teal":526,"source":"contracts/abstracted_account.algo.ts:133","errorMessage":"no rekey back found","pc":[549]},{"teal":527,"source":"contracts/abstracted_account.algo.ts:110","pc":[550]},{"teal":538,"source":"contracts/abstracted_account.algo.ts:144","pc":[551,552,553]},{"teal":541,"source":"contracts/abstracted_account.algo.ts:144","pc":[554]},{"teal":553,"source":"contracts/abstracted_account.algo.ts:147","pc":[555,556]},{"teal":554,"source":"contracts/abstracted_account.algo.ts:147","pc":[557,558]},{"teal":555,"source":"contracts/abstracted_account.algo.ts:147","pc":[559,560]},{"teal":556,"source":"contracts/abstracted_account.algo.ts:147","pc":[561]},{"teal":557,"source":"contracts/abstracted_account.algo.ts:147","pc":[562]},{"teal":558,"source":"contracts/abstracted_account.algo.ts:147","pc":[563,564,565]},{"teal":559,"source":"contracts/abstracted_account.algo.ts:149","pc":[566,567]},{"teal":560,"source":"contracts/abstracted_account.algo.ts:149","pc":[568,569]},{"teal":561,"source":"contracts/abstracted_account.algo.ts:149","pc":[570,571]},{"teal":562,"source":"contracts/abstracted_account.algo.ts:149","pc":[572]},{"teal":563,"source":"contracts/abstracted_account.algo.ts:149","pc":[573]},{"teal":564,"source":"contracts/abstracted_account.algo.ts:149","pc":[574,575,576]},{"teal":565,"source":"contracts/abstracted_account.algo.ts:149","pc":[577,578]},{"teal":566,"source":"contracts/abstracted_account.algo.ts:149","pc":[579,580]},{"teal":567,"source":"contracts/abstracted_account.algo.ts:149","pc":[581,582,583]},{"teal":568,"source":"contracts/abstracted_account.algo.ts:149","pc":[584]},{"teal":569,"source":"contracts/abstracted_account.algo.ts:149","pc":[585]},{"teal":572,"source":"contracts/abstracted_account.algo.ts:147","pc":[586]},{"teal":575,"source":"contracts/abstracted_account.algo.ts:149","pc":[587]},{"teal":576,"source":"contracts/abstracted_account.algo.ts:149","pc":[588,589,590]},{"teal":577,"source":"contracts/abstracted_account.algo.ts:152","pc":[591,592]},{"teal":578,"source":"contracts/abstracted_account.algo.ts:152","pc":[593,594]},{"teal":579,"source":"contracts/abstracted_account.algo.ts:152","pc":[595]},{"teal":580,"source":"contracts/abstracted_account.algo.ts:152","pc":[596]},{"teal":581,"source":"contracts/abstracted_account.algo.ts:152","pc":[597,598,599]},{"teal":582,"source":"contracts/abstracted_account.algo.ts:152","pc":[600,601]},{"teal":583,"source":"contracts/abstracted_account.algo.ts:152","pc":[602,603]},{"teal":584,"source":"contracts/abstracted_account.algo.ts:152","pc":[604,605]},{"teal":585,"source":"contracts/abstracted_account.algo.ts:152","pc":[606]},{"teal":586,"source":"contracts/abstracted_account.algo.ts:152","pc":[607]},{"teal":589,"source":"contracts/abstracted_account.algo.ts:149","pc":[608]},{"teal":592,"source":"contracts/abstracted_account.algo.ts:152","pc":[609]},{"teal":593,"source":"contracts/abstracted_account.algo.ts:152","pc":[610,611,612]},{"teal":594,"source":"contracts/abstracted_account.algo.ts:154","pc":[613,614]},{"teal":595,"source":"contracts/abstracted_account.algo.ts:154","pc":[615,616,617]},{"teal":596,"source":"contracts/abstracted_account.algo.ts:152","pc":[618]},{"teal":599,"source":"contracts/abstracted_account.algo.ts:145","pc":[619,620,621]},{"teal":604,"source":"contracts/abstracted_account.algo.ts:156","pc":[622]},{"teal":605,"source":"contracts/abstracted_account.algo.ts:156","pc":[623,624,625]},{"teal":610,"source":"contracts/abstracted_account.algo.ts:159","pc":[626,627]},{"teal":611,"source":"contracts/abstracted_account.algo.ts:159","pc":[628,629]},{"teal":612,"source":"contracts/abstracted_account.algo.ts:159","pc":[630]},{"teal":613,"source":"contracts/abstracted_account.algo.ts:159","pc":[631]},{"teal":616,"source":"contracts/abstracted_account.algo.ts:159","errorMessage":"no method signature provided","pc":[632]},{"teal":620,"source":"contracts/abstracted_account.algo.ts:160","pc":[633,634]},{"teal":621,"source":"contracts/abstracted_account.algo.ts:160","pc":[635,636,637]},{"teal":622,"source":"contracts/abstracted_account.algo.ts:160","pc":[638]},{"teal":623,"source":"contracts/abstracted_account.algo.ts:160","pc":[639]},{"teal":624,"source":"contracts/abstracted_account.algo.ts:160","pc":[640]},{"teal":627,"source":"contracts/abstracted_account.algo.ts:160","errorMessage":"invalid method signature length","pc":[641]},{"teal":635,"source":"contracts/abstracted_account.algo.ts:163","pc":[642,643]},{"teal":636,"source":"contracts/abstracted_account.algo.ts:163","pc":[644]},{"teal":637,"source":"contracts/abstracted_account.algo.ts:164","pc":[645,646]},{"teal":638,"source":"contracts/abstracted_account.algo.ts:164","pc":[647]},{"teal":639,"source":"contracts/abstracted_account.algo.ts:165","pc":[648,649]},{"teal":640,"source":"contracts/abstracted_account.algo.ts:165","pc":[650,651,652]},{"teal":641,"source":"contracts/abstracted_account.algo.ts:165","pc":[653,654,655,656,657,658]},{"teal":642,"source":"contracts/abstracted_account.algo.ts:165","pc":[659]},{"teal":643,"source":"contracts/abstracted_account.algo.ts:165","pc":[660]},{"teal":644,"source":"contracts/abstracted_account.algo.ts:165","pc":[661,662,663]},{"teal":645,"source":"contracts/abstracted_account.algo.ts:165","pc":[664]},{"teal":646,"source":"contracts/abstracted_account.algo.ts:165","pc":[665]},{"teal":647,"source":"contracts/abstracted_account.algo.ts:165","pc":[666]},{"teal":648,"source":"contracts/abstracted_account.algo.ts:165","pc":[667,668,669]},{"teal":649,"source":"contracts/abstracted_account.algo.ts:165","pc":[670]},{"teal":650,"source":"contracts/abstracted_account.algo.ts:162","pc":[671,672]},{"teal":655,"source":"contracts/abstracted_account.algo.ts:168","pc":[673]},{"teal":656,"source":"contracts/abstracted_account.algo.ts:168","pc":[674,675]},{"teal":657,"source":"contracts/abstracted_account.algo.ts:168","pc":[676]},{"teal":658,"source":"contracts/abstracted_account.algo.ts:168","pc":[677]},{"teal":659,"source":"contracts/abstracted_account.algo.ts:168","pc":[678]},{"teal":660,"source":"contracts/abstracted_account.algo.ts:168","pc":[679]},{"teal":661,"source":"contracts/abstracted_account.algo.ts:168","pc":[680]},{"teal":662,"source":"contracts/abstracted_account.algo.ts:168","pc":[681,682,683]},{"teal":667,"source":"contracts/abstracted_account.algo.ts:169","pc":[684]},{"teal":668,"source":"contracts/abstracted_account.algo.ts:169","pc":[685,686,687]},{"teal":673,"source":"contracts/abstracted_account.algo.ts:172","pc":[688]},{"teal":677,"source":"contracts/abstracted_account.algo.ts:144","pc":[689,690]},{"teal":678,"source":"contracts/abstracted_account.algo.ts:144","pc":[691]},{"teal":683,"source":"contracts/abstracted_account.algo.ts:181","pc":[692,693,694]},{"teal":684,"source":"contracts/abstracted_account.algo.ts:181","pc":[695]},{"teal":685,"source":"contracts/abstracted_account.algo.ts:181","pc":[696]},{"teal":686,"source":"contracts/abstracted_account.algo.ts:181","pc":[697]},{"teal":687,"source":"contracts/abstracted_account.algo.ts:181","pc":[698]},{"teal":690,"source":"contracts/abstracted_account.algo.ts:181","errorMessage":"argument 0 (admin) for createApplication must be a address","pc":[699]},{"teal":693,"source":"contracts/abstracted_account.algo.ts:181","pc":[700,701,702]},{"teal":694,"source":"contracts/abstracted_account.algo.ts:181","pc":[703]},{"teal":695,"source":"contracts/abstracted_account.algo.ts:181","pc":[704]},{"teal":704,"source":"contracts/abstracted_account.algo.ts:181","pc":[705,706,707]},{"teal":711,"source":"contracts/abstracted_account.algo.ts:183","pc":[708,709]},{"teal":712,"source":"contracts/abstracted_account.algo.ts:183","pc":[710,711]},{"teal":713,"source":"contracts/abstracted_account.algo.ts:183","pc":[712]},{"teal":716,"source":"contracts/abstracted_account.algo.ts:183","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"admin\"}","pc":[713]},{"teal":720,"source":"contracts/abstracted_account.algo.ts:186","pc":[714]},{"teal":721,"source":"contracts/abstracted_account.algo.ts:186","pc":[715,716]},{"teal":722,"source":"contracts/abstracted_account.algo.ts:186","pc":[717]},{"teal":723,"source":"contracts/abstracted_account.algo.ts:181","pc":[718]},{"teal":728,"source":"contracts/abstracted_account.algo.ts:194","pc":[719,720,721]},{"teal":729,"source":"contracts/abstracted_account.algo.ts:194","pc":[722]},{"teal":730,"source":"contracts/abstracted_account.algo.ts:194","pc":[723]},{"teal":731,"source":"contracts/abstracted_account.algo.ts:194","pc":[724]},{"teal":732,"source":"contracts/abstracted_account.algo.ts:194","pc":[725]},{"teal":735,"source":"contracts/abstracted_account.algo.ts:194","errorMessage":"argument 0 (newAdmin) for arc58_changeAdmin must be a address","pc":[726]},{"teal":738,"source":"contracts/abstracted_account.algo.ts:194","pc":[727,728,729]},{"teal":739,"source":"contracts/abstracted_account.algo.ts:194","pc":[730]},{"teal":740,"source":"contracts/abstracted_account.algo.ts:194","pc":[731]},{"teal":748,"source":"contracts/abstracted_account.algo.ts:194","pc":[732,733,734]},{"teal":753,"source":"contracts/abstracted_account.algo.ts:195","pc":[735,736]},{"teal":754,"source":"contracts/abstracted_account.algo.ts:195","pc":[737]},{"teal":755,"source":"contracts/abstracted_account.algo.ts:195","pc":[738]},{"teal":756,"source":"contracts/abstracted_account.algo.ts:195","pc":[739]},{"teal":759,"source":"contracts/abstracted_account.algo.ts:195","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[740]},{"teal":763,"source":"contracts/abstracted_account.algo.ts:196","pc":[741]},{"teal":764,"source":"contracts/abstracted_account.algo.ts:196","pc":[742,743]},{"teal":765,"source":"contracts/abstracted_account.algo.ts:196","pc":[744]},{"teal":766,"source":"contracts/abstracted_account.algo.ts:194","pc":[745]},{"teal":771,"source":"contracts/abstracted_account.algo.ts:207","pc":[746,747,748]},{"teal":772,"source":"contracts/abstracted_account.algo.ts:207","pc":[749]},{"teal":773,"source":"contracts/abstracted_account.algo.ts:207","pc":[750]},{"teal":774,"source":"contracts/abstracted_account.algo.ts:207","pc":[751]},{"teal":775,"source":"contracts/abstracted_account.algo.ts:207","pc":[752]},{"teal":778,"source":"contracts/abstracted_account.algo.ts:207","errorMessage":"argument 0 (newAdmin) for arc58_pluginChangeAdmin must be a address","pc":[753]},{"teal":781,"source":"contracts/abstracted_account.algo.ts:207","pc":[754,755,756]},{"teal":782,"source":"contracts/abstracted_account.algo.ts:207","pc":[757]},{"teal":783,"source":"contracts/abstracted_account.algo.ts:207","pc":[758]},{"teal":784,"source":"contracts/abstracted_account.algo.ts:207","pc":[759]},{"teal":785,"source":"contracts/abstracted_account.algo.ts:207","pc":[760]},{"teal":788,"source":"contracts/abstracted_account.algo.ts:207","errorMessage":"argument 1 (allowedCaller) for arc58_pluginChangeAdmin must be a address","pc":[761]},{"teal":791,"source":"contracts/abstracted_account.algo.ts:207","pc":[762,763,764]},{"teal":792,"source":"contracts/abstracted_account.algo.ts:207","pc":[765]},{"teal":795,"source":"contracts/abstracted_account.algo.ts:207","pc":[766,767,768]},{"teal":796,"source":"contracts/abstracted_account.algo.ts:207","pc":[769]},{"teal":797,"source":"contracts/abstracted_account.algo.ts:207","pc":[770]},{"teal":807,"source":"contracts/abstracted_account.algo.ts:207","pc":[771,772,773]},{"teal":810,"source":"contracts/abstracted_account.algo.ts:207","pc":[774]},{"teal":815,"source":"contracts/abstracted_account.algo.ts:208","pc":[775,776]},{"teal":816,"source":"contracts/abstracted_account.algo.ts:208","pc":[777,778]},{"teal":817,"source":"contracts/abstracted_account.algo.ts:208","pc":[779,780]},{"teal":818,"source":"contracts/abstracted_account.algo.ts:208","pc":[781]},{"teal":819,"source":"contracts/abstracted_account.algo.ts:208","pc":[782]},{"teal":822,"source":"contracts/abstracted_account.algo.ts:208","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"plugin.address\"}","pc":[783]},{"teal":826,"source":"contracts/abstracted_account.algo.ts:209","pc":[784,785]},{"teal":827,"source":"contracts/abstracted_account.algo.ts:209","pc":[786,787]},{"teal":828,"source":"contracts/abstracted_account.algo.ts:209","pc":[788]},{"teal":829,"source":"contracts/abstracted_account.algo.ts:209","pc":[789,790]},{"teal":830,"source":"contracts/abstracted_account.algo.ts:209","pc":[791,792]},{"teal":831,"source":"contracts/abstracted_account.algo.ts:209","pc":[793]},{"teal":832,"source":"contracts/abstracted_account.algo.ts:209","pc":[794]},{"teal":835,"source":"contracts/abstracted_account.algo.ts:209","errorMessage":"This plugin is not in control of the account","pc":[795]},{"teal":839,"source":"contracts/abstracted_account.algo.ts:211","pc":[796,797]},{"teal":840,"source":"contracts/abstracted_account.algo.ts:211","pc":[798]},{"teal":841,"source":"contracts/abstracted_account.algo.ts:211","pc":[799,800]},{"teal":842,"source":"contracts/abstracted_account.algo.ts:211","pc":[801]},{"teal":843,"source":"contracts/abstracted_account.algo.ts:211","pc":[802,803]},{"teal":850,"source":"contracts/abstracted_account.algo.ts:213","pc":[804]},{"teal":851,"source":"contracts/abstracted_account.algo.ts:213","pc":[805,806]},{"teal":852,"source":"contracts/abstracted_account.algo.ts:213","pc":[807]},{"teal":853,"source":"contracts/abstracted_account.algo.ts:213","pc":[808]},{"teal":854,"source":"contracts/abstracted_account.algo.ts:213","pc":[809]},{"teal":855,"source":"contracts/abstracted_account.algo.ts:213","pc":[810]},{"teal":856,"source":"contracts/abstracted_account.algo.ts:213","pc":[811]},{"teal":857,"source":"contracts/abstracted_account.algo.ts:213","pc":[812,813,814]},{"teal":858,"source":"contracts/abstracted_account.algo.ts:213","pc":[815]},{"teal":859,"source":"contracts/abstracted_account.algo.ts:213","pc":[816,817]},{"teal":860,"source":"contracts/abstracted_account.algo.ts:213","pc":[818]},{"teal":861,"source":"contracts/abstracted_account.algo.ts:213","pc":[819]},{"teal":864,"source":"contracts/abstracted_account.algo.ts:213","errorMessage":"box value does not exist: this.plugins(key).value","pc":[820]},{"teal":865,"source":"contracts/abstracted_account.algo.ts:213","pc":[821,822]},{"teal":866,"source":"contracts/abstracted_account.algo.ts:213","pc":[823,824]},{"teal":867,"source":"contracts/abstracted_account.algo.ts:213","pc":[825,826,827]},{"teal":868,"source":"contracts/abstracted_account.algo.ts:213","pc":[828]},{"teal":869,"source":"contracts/abstracted_account.algo.ts:213","pc":[829]},{"teal":873,"source":"contracts/abstracted_account.algo.ts:212","errorMessage":"This plugin does not have admin privileges","pc":[830]},{"teal":877,"source":"contracts/abstracted_account.algo.ts:217","pc":[831]},{"teal":878,"source":"contracts/abstracted_account.algo.ts:217","pc":[832,833]},{"teal":879,"source":"contracts/abstracted_account.algo.ts:217","pc":[834]},{"teal":880,"source":"contracts/abstracted_account.algo.ts:207","pc":[835]},{"teal":885,"source":"contracts/abstracted_account.algo.ts:224","pc":[836,837]},{"teal":888,"source":"contracts/abstracted_account.algo.ts:224","pc":[838,839,840]},{"teal":889,"source":"contracts/abstracted_account.algo.ts:224","pc":[841]},{"teal":890,"source":"contracts/abstracted_account.algo.ts:224","pc":[842]},{"teal":891,"source":"contracts/abstracted_account.algo.ts:224","pc":[843]},{"teal":892,"source":"contracts/abstracted_account.algo.ts:224","pc":[844]},{"teal":899,"source":"contracts/abstracted_account.algo.ts:224","pc":[845,846,847]},{"teal":903,"source":"contracts/abstracted_account.algo.ts:226","pc":[848]},{"teal":904,"source":"contracts/abstracted_account.algo.ts:226","pc":[849]},{"teal":905,"source":"contracts/abstracted_account.algo.ts:224","pc":[850]},{"teal":910,"source":"contracts/abstracted_account.algo.ts:232","pc":[851,852,853]},{"teal":911,"source":"contracts/abstracted_account.algo.ts:232","pc":[854]},{"teal":912,"source":"contracts/abstracted_account.algo.ts:232","pc":[855]},{"teal":918,"source":"contracts/abstracted_account.algo.ts:232","pc":[856,857,858]},{"teal":922,"source":"contracts/abstracted_account.algo.ts:233","pc":[859,860]},{"teal":923,"source":"contracts/abstracted_account.algo.ts:233","pc":[861,862]},{"teal":924,"source":"contracts/abstracted_account.algo.ts:233","pc":[863]},{"teal":925,"source":"contracts/abstracted_account.algo.ts:233","pc":[864,865]},{"teal":926,"source":"contracts/abstracted_account.algo.ts:233","pc":[866]},{"teal":927,"source":"contracts/abstracted_account.algo.ts:233","pc":[867]},{"teal":928,"source":"contracts/abstracted_account.algo.ts:232","pc":[868]},{"teal":933,"source":"contracts/abstracted_account.algo.ts:242","pc":[869,870,871]},{"teal":934,"source":"contracts/abstracted_account.algo.ts:242","pc":[872]},{"teal":935,"source":"contracts/abstracted_account.algo.ts:242","pc":[873]},{"teal":936,"source":"contracts/abstracted_account.algo.ts:242","pc":[874]},{"teal":937,"source":"contracts/abstracted_account.algo.ts:242","pc":[875]},{"teal":940,"source":"contracts/abstracted_account.algo.ts:242","errorMessage":"argument 0 (flash) for arc58_rekeyTo must be a bool","pc":[876]},{"teal":941,"source":"contracts/abstracted_account.algo.ts:242","pc":[877]},{"teal":942,"source":"contracts/abstracted_account.algo.ts:242","pc":[878]},{"teal":945,"source":"contracts/abstracted_account.algo.ts:242","pc":[879,880,881]},{"teal":946,"source":"contracts/abstracted_account.algo.ts:242","pc":[882]},{"teal":947,"source":"contracts/abstracted_account.algo.ts:242","pc":[883]},{"teal":948,"source":"contracts/abstracted_account.algo.ts:242","pc":[884]},{"teal":949,"source":"contracts/abstracted_account.algo.ts:242","pc":[885]},{"teal":952,"source":"contracts/abstracted_account.algo.ts:242","errorMessage":"argument 1 (addr) for arc58_rekeyTo must be a address","pc":[886]},{"teal":955,"source":"contracts/abstracted_account.algo.ts:242","pc":[887,888,889]},{"teal":956,"source":"contracts/abstracted_account.algo.ts:242","pc":[890]},{"teal":957,"source":"contracts/abstracted_account.algo.ts:242","pc":[891]},{"teal":966,"source":"contracts/abstracted_account.algo.ts:242","pc":[892,893,894]},{"teal":971,"source":"contracts/abstracted_account.algo.ts:243","pc":[895,896]},{"teal":972,"source":"contracts/abstracted_account.algo.ts:243","pc":[897]},{"teal":973,"source":"contracts/abstracted_account.algo.ts:243","pc":[898]},{"teal":974,"source":"contracts/abstracted_account.algo.ts:243","pc":[899]},{"teal":977,"source":"contracts/abstracted_account.algo.ts:243","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[900]},{"teal":985,"source":"contracts/abstracted_account.algo.ts:245","pc":[901]},{"teal":986,"source":"contracts/abstracted_account.algo.ts:245","pc":[902]},{"teal":987,"source":"contracts/abstracted_account.algo.ts:245","pc":[903,904]},{"teal":991,"source":"contracts/abstracted_account.algo.ts:246","pc":[905,906]},{"teal":992,"source":"contracts/abstracted_account.algo.ts:246","pc":[907,908]},{"teal":996,"source":"contracts/abstracted_account.algo.ts:247","pc":[909,910]},{"teal":997,"source":"contracts/abstracted_account.algo.ts:247","pc":[911,912]},{"teal":1001,"source":"contracts/abstracted_account.algo.ts:248","pc":[913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941]},{"teal":1002,"source":"contracts/abstracted_account.algo.ts:248","pc":[942,943]},{"teal":1005,"source":"contracts/abstracted_account.algo.ts:245","pc":[944]},{"teal":1006,"source":"contracts/abstracted_account.algo.ts:245","pc":[945,946]},{"teal":1009,"source":"contracts/abstracted_account.algo.ts:245","pc":[947]},{"teal":1014,"source":"contracts/abstracted_account.algo.ts:251","pc":[948,949]},{"teal":1015,"source":"contracts/abstracted_account.algo.ts:251","pc":[950,951,952]},{"teal":1020,"source":"contracts/abstracted_account.algo.ts:251","pc":[953,954,955]},{"teal":1023,"source":"contracts/abstracted_account.algo.ts:242","pc":[956]},{"teal":1028,"source":"contracts/abstracted_account.algo.ts:260","pc":[957,958]},{"teal":1031,"source":"contracts/abstracted_account.algo.ts:261","pc":[959,960,961]},{"teal":1032,"source":"contracts/abstracted_account.algo.ts:261","pc":[962]},{"teal":1033,"source":"contracts/abstracted_account.algo.ts:261","pc":[963]},{"teal":1034,"source":"contracts/abstracted_account.algo.ts:261","pc":[964]},{"teal":1035,"source":"contracts/abstracted_account.algo.ts:261","pc":[965]},{"teal":1038,"source":"contracts/abstracted_account.algo.ts:261","errorMessage":"argument 0 (address) for arc58_canCall must be a address","pc":[966]},{"teal":1041,"source":"contracts/abstracted_account.algo.ts:261","pc":[967,968,969]},{"teal":1042,"source":"contracts/abstracted_account.algo.ts:261","pc":[970]},{"teal":1045,"source":"contracts/abstracted_account.algo.ts:260","pc":[971,972,973]},{"teal":1046,"source":"contracts/abstracted_account.algo.ts:260","pc":[974,975]},{"teal":1047,"source":"contracts/abstracted_account.algo.ts:260","pc":[976]},{"teal":1048,"source":"contracts/abstracted_account.algo.ts:260","pc":[977,978]},{"teal":1049,"source":"contracts/abstracted_account.algo.ts:260","pc":[979]},{"teal":1050,"source":"contracts/abstracted_account.algo.ts:260","pc":[980]},{"teal":1051,"source":"contracts/abstracted_account.algo.ts:260","pc":[981]},{"teal":1052,"source":"contracts/abstracted_account.algo.ts:260","pc":[982]},{"teal":1053,"source":"contracts/abstracted_account.algo.ts:260","pc":[983]},{"teal":1062,"source":"contracts/abstracted_account.algo.ts:260","pc":[984,985,986]},{"teal":1065,"source":"contracts/abstracted_account.algo.ts:260","pc":[987]},{"teal":1069,"source":"contracts/abstracted_account.algo.ts:262","pc":[988,989]},{"teal":1070,"source":"contracts/abstracted_account.algo.ts:262","pc":[990,991]},{"teal":1071,"source":"contracts/abstracted_account.algo.ts:262","pc":[992,993,994]},{"teal":1072,"source":"contracts/abstracted_account.algo.ts:262","pc":[995,996]},{"teal":1077,"source":"contracts/abstracted_account.algo.ts:263","pc":[997,998]},{"teal":1078,"source":"contracts/abstracted_account.algo.ts:263","pc":[999,1000,1001]},{"teal":1083,"source":"contracts/abstracted_account.algo.ts:263","pc":[1002]},{"teal":1084,"source":"contracts/abstracted_account.algo.ts:263","pc":[1003,1004,1005]},{"teal":1089,"source":"contracts/abstracted_account.algo.ts:265","pc":[1006,1007]},{"teal":1090,"source":"contracts/abstracted_account.algo.ts:265","pc":[1008,1009]},{"teal":1091,"source":"contracts/abstracted_account.algo.ts:265","pc":[1010,1011,1012]},{"teal":1095,"source":"contracts/abstracted_account.algo.ts:260","pc":[1013,1014]},{"teal":1096,"source":"contracts/abstracted_account.algo.ts:260","pc":[1015]},{"teal":1101,"source":"contracts/abstracted_account.algo.ts:273","pc":[1016,1017,1018]},{"teal":1102,"source":"contracts/abstracted_account.algo.ts:273","pc":[1019]},{"teal":1105,"source":"contracts/abstracted_account.algo.ts:273","pc":[1020,1021,1022]},{"teal":1106,"source":"contracts/abstracted_account.algo.ts:273","pc":[1023]},{"teal":1107,"source":"contracts/abstracted_account.algo.ts:273","pc":[1024]},{"teal":1115,"source":"contracts/abstracted_account.algo.ts:273","pc":[1025,1026,1027]},{"teal":1118,"source":"contracts/abstracted_account.algo.ts:273","pc":[1028]},{"teal":1119,"source":"contracts/abstracted_account.algo.ts:273","pc":[1029,1030]},{"teal":1123,"source":"contracts/abstracted_account.algo.ts:274","pc":[1031]},{"teal":1124,"source":"contracts/abstracted_account.algo.ts:274","pc":[1032,1033]},{"teal":1125,"source":"contracts/abstracted_account.algo.ts:274","pc":[1034]},{"teal":1126,"source":"contracts/abstracted_account.algo.ts:274","pc":[1035,1036]},{"teal":1127,"source":"contracts/abstracted_account.algo.ts:274","pc":[1037]},{"teal":1128,"source":"contracts/abstracted_account.algo.ts:274","pc":[1038]},{"teal":1129,"source":"contracts/abstracted_account.algo.ts:274","pc":[1039]},{"teal":1130,"source":"contracts/abstracted_account.algo.ts:274","pc":[1040]},{"teal":1131,"source":"contracts/abstracted_account.algo.ts:274","pc":[1041]},{"teal":1132,"source":"contracts/abstracted_account.algo.ts:274","pc":[1042,1043]},{"teal":1136,"source":"contracts/abstracted_account.algo.ts:275","pc":[1044]},{"teal":1137,"source":"contracts/abstracted_account.algo.ts:275","pc":[1045,1046]},{"teal":1138,"source":"contracts/abstracted_account.algo.ts:275","pc":[1047]},{"teal":1139,"source":"contracts/abstracted_account.algo.ts:275","pc":[1048,1049]},{"teal":1140,"source":"contracts/abstracted_account.algo.ts:275","pc":[1050]},{"teal":1141,"source":"contracts/abstracted_account.algo.ts:275","pc":[1051]},{"teal":1142,"source":"contracts/abstracted_account.algo.ts:275","pc":[1052]},{"teal":1143,"source":"contracts/abstracted_account.algo.ts:275","pc":[1053]},{"teal":1144,"source":"contracts/abstracted_account.algo.ts:275","pc":[1054]},{"teal":1145,"source":"contracts/abstracted_account.algo.ts:275","pc":[1055,1056]},{"teal":1149,"source":"contracts/abstracted_account.algo.ts:277","pc":[1057]},{"teal":1150,"source":"contracts/abstracted_account.algo.ts:277","pc":[1058,1059]},{"teal":1154,"source":"contracts/abstracted_account.algo.ts:278","pc":[1060]},{"teal":1155,"source":"contracts/abstracted_account.algo.ts:278","pc":[1061,1062]},{"teal":1160,"source":"contracts/abstracted_account.algo.ts:280","pc":[1063,1064]},{"teal":1161,"source":"contracts/abstracted_account.algo.ts:280","pc":[1065,1066,1067]},{"teal":1166,"source":"contracts/abstracted_account.algo.ts:281","pc":[1068,1069]},{"teal":1167,"source":"contracts/abstracted_account.algo.ts:281","pc":[1070,1071]},{"teal":1168,"source":"contracts/abstracted_account.algo.ts:281","pc":[1072,1073,1074]},{"teal":1169,"source":"contracts/abstracted_account.algo.ts:281","pc":[1075,1076]},{"teal":1175,"source":"contracts/abstracted_account.algo.ts:284","pc":[1077,1078]},{"teal":1176,"source":"contracts/abstracted_account.algo.ts:284","pc":[1079,1080,1081]},{"teal":1181,"source":"contracts/abstracted_account.algo.ts:285","pc":[1082,1083]},{"teal":1182,"source":"contracts/abstracted_account.algo.ts:285","pc":[1084,1085]},{"teal":1183,"source":"contracts/abstracted_account.algo.ts:285","pc":[1086,1087,1088]},{"teal":1184,"source":"contracts/abstracted_account.algo.ts:285","pc":[1089,1090]},{"teal":1191,"source":"contracts/abstracted_account.algo.ts:291","pc":[1091,1092]},{"teal":1192,"source":"contracts/abstracted_account.algo.ts:291","pc":[1093]},{"teal":1193,"source":"contracts/abstracted_account.algo.ts:291","pc":[1094]},{"teal":1194,"source":"contracts/abstracted_account.algo.ts:291","pc":[1095,1096,1097]},{"teal":1195,"source":"contracts/abstracted_account.algo.ts:291","pc":[1098,1099]},{"teal":1196,"source":"contracts/abstracted_account.algo.ts:291","pc":[1100]},{"teal":1197,"source":"contracts/abstracted_account.algo.ts:291","pc":[1101]},{"teal":1200,"source":"contracts/abstracted_account.algo.ts:292","pc":[1102]},{"teal":1201,"source":"contracts/abstracted_account.algo.ts:292","pc":[1103,1104,1105]},{"teal":1202,"source":"contracts/abstracted_account.algo.ts:292","pc":[1106,1107]},{"teal":1203,"source":"contracts/abstracted_account.algo.ts:292","pc":[1108]},{"teal":1204,"source":"contracts/abstracted_account.algo.ts:292","pc":[1109,1110,1111]},{"teal":1205,"source":"contracts/abstracted_account.algo.ts:292","pc":[1112,1113]},{"teal":1206,"source":"contracts/abstracted_account.algo.ts:292","pc":[1114]},{"teal":1207,"source":"contracts/abstracted_account.algo.ts:292","pc":[1115]},{"teal":1210,"source":"contracts/abstracted_account.algo.ts:292","pc":[1116]},{"teal":1211,"source":"contracts/abstracted_account.algo.ts:292","pc":[1117,1118,1119]},{"teal":1212,"source":"contracts/abstracted_account.algo.ts:292","pc":[1120,1121]},{"teal":1213,"source":"contracts/abstracted_account.algo.ts:292","pc":[1122]},{"teal":1214,"source":"contracts/abstracted_account.algo.ts:292","pc":[1123]},{"teal":1217,"source":"contracts/abstracted_account.algo.ts:292","pc":[1124]},{"teal":1220,"source":"contracts/abstracted_account.algo.ts:290","pc":[1125,1126,1127]},{"teal":1225,"source":"contracts/abstracted_account.algo.ts:294","pc":[1128,1129]},{"teal":1226,"source":"contracts/abstracted_account.algo.ts:294","pc":[1130,1131]},{"teal":1227,"source":"contracts/abstracted_account.algo.ts:294","pc":[1132,1133,1134]},{"teal":1228,"source":"contracts/abstracted_account.algo.ts:290","pc":[1135,1136,1137]},{"teal":1233,"source":"contracts/abstracted_account.algo.ts:295","pc":[1138,1139]},{"teal":1234,"source":"contracts/abstracted_account.algo.ts:295","pc":[1140]},{"teal":1235,"source":"contracts/abstracted_account.algo.ts:295","pc":[1141,1142,1143]},{"teal":1236,"source":"contracts/abstracted_account.algo.ts:295","pc":[1144,1145]},{"teal":1237,"source":"contracts/abstracted_account.algo.ts:295","pc":[1146]},{"teal":1238,"source":"contracts/abstracted_account.algo.ts:295","pc":[1147]},{"teal":1241,"source":"contracts/abstracted_account.algo.ts:295","pc":[1148]},{"teal":1242,"source":"contracts/abstracted_account.algo.ts:295","pc":[1149,1150,1151]},{"teal":1243,"source":"contracts/abstracted_account.algo.ts:295","pc":[1152,1153]},{"teal":1244,"source":"contracts/abstracted_account.algo.ts:295","pc":[1154]},{"teal":1245,"source":"contracts/abstracted_account.algo.ts:295","pc":[1155]},{"teal":1248,"source":"contracts/abstracted_account.algo.ts:295","pc":[1156,1157,1158]},{"teal":1253,"source":"contracts/abstracted_account.algo.ts:296","pc":[1159,1160]},{"teal":1254,"source":"contracts/abstracted_account.algo.ts:296","pc":[1161,1162]},{"teal":1255,"source":"contracts/abstracted_account.algo.ts:296","pc":[1163,1164,1165]},{"teal":1260,"source":"contracts/abstracted_account.algo.ts:299","pc":[1166,1167]},{"teal":1261,"source":"contracts/abstracted_account.algo.ts:299","pc":[1168,1169]},{"teal":1262,"source":"contracts/abstracted_account.algo.ts:299","pc":[1170,1171]},{"teal":1263,"source":"contracts/abstracted_account.algo.ts:299","pc":[1172,1173,1174]},{"teal":1271,"source":"contracts/abstracted_account.algo.ts:301","pc":[1175]},{"teal":1272,"source":"contracts/abstracted_account.algo.ts:301","pc":[1176]},{"teal":1273,"source":"contracts/abstracted_account.algo.ts:301","pc":[1177,1178]},{"teal":1277,"source":"contracts/abstracted_account.algo.ts:302","pc":[1179,1180]},{"teal":1278,"source":"contracts/abstracted_account.algo.ts:302","pc":[1181,1182]},{"teal":1282,"source":"contracts/abstracted_account.algo.ts:303","pc":[1183,1184]},{"teal":1283,"source":"contracts/abstracted_account.algo.ts:303","pc":[1185,1186]},{"teal":1284,"source":"contracts/abstracted_account.algo.ts:303","pc":[1187]},{"teal":1285,"source":"contracts/abstracted_account.algo.ts:303","pc":[1188,1189]},{"teal":1289,"source":"contracts/abstracted_account.algo.ts:304","pc":[1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213]},{"teal":1290,"source":"contracts/abstracted_account.algo.ts:304","pc":[1214,1215]},{"teal":1293,"source":"contracts/abstracted_account.algo.ts:301","pc":[1216]},{"teal":1294,"source":"contracts/abstracted_account.algo.ts:301","pc":[1217,1218]},{"teal":1297,"source":"contracts/abstracted_account.algo.ts:301","pc":[1219]},{"teal":1304,"source":"contracts/abstracted_account.algo.ts:307","pc":[1220]},{"teal":1305,"source":"contracts/abstracted_account.algo.ts:308","pc":[1221,1222]},{"teal":1306,"source":"contracts/abstracted_account.algo.ts:308","pc":[1223]},{"teal":1307,"source":"contracts/abstracted_account.algo.ts:309","pc":[1224,1225]},{"teal":1308,"source":"contracts/abstracted_account.algo.ts:309","pc":[1226,1227,1228]},{"teal":1309,"source":"contracts/abstracted_account.algo.ts:309","pc":[1229,1230]},{"teal":1310,"source":"contracts/abstracted_account.algo.ts:309","pc":[1231,1232,1233]},{"teal":1313,"source":"contracts/abstracted_account.algo.ts:309","pc":[1234,1235]},{"teal":1316,"source":"contracts/abstracted_account.algo.ts:309","pc":[1236]},{"teal":1317,"source":"contracts/abstracted_account.algo.ts:307","pc":[1237]},{"teal":1318,"source":"contracts/abstracted_account.algo.ts:307","pc":[1238]},{"teal":1321,"source":"contracts/abstracted_account.algo.ts:307","errorMessage":"box value does not exist: this.plugins({ application: plugin, allowedCaller: globalAllowed ? Address.zeroAddress : this.txn.sender, }).value","pc":[1239]},{"teal":1322,"source":"contracts/abstracted_account.algo.ts:307","pc":[1240,1241]},{"teal":1323,"source":"contracts/abstracted_account.algo.ts:307","pc":[1242,1243]},{"teal":1324,"source":"contracts/abstracted_account.algo.ts:307","pc":[1244,1245]},{"teal":1325,"source":"contracts/abstracted_account.algo.ts:310","pc":[1246,1247]},{"teal":1326,"source":"contracts/abstracted_account.algo.ts:310","pc":[1248]},{"teal":1327,"source":"contracts/abstracted_account.algo.ts:307","pc":[1249]},{"teal":1328,"source":"contracts/abstracted_account.algo.ts:308","pc":[1250,1251]},{"teal":1329,"source":"contracts/abstracted_account.algo.ts:308","pc":[1252]},{"teal":1330,"source":"contracts/abstracted_account.algo.ts:309","pc":[1253,1254]},{"teal":1331,"source":"contracts/abstracted_account.algo.ts:309","pc":[1255,1256,1257]},{"teal":1332,"source":"contracts/abstracted_account.algo.ts:309","pc":[1258,1259]},{"teal":1333,"source":"contracts/abstracted_account.algo.ts:309","pc":[1260,1261,1262]},{"teal":1336,"source":"contracts/abstracted_account.algo.ts:309","pc":[1263,1264]},{"teal":1339,"source":"contracts/abstracted_account.algo.ts:309","pc":[1265]},{"teal":1340,"source":"contracts/abstracted_account.algo.ts:307","pc":[1266]},{"teal":1341,"source":"contracts/abstracted_account.algo.ts:307","pc":[1267,1268]},{"teal":1342,"source":"contracts/abstracted_account.algo.ts:307","pc":[1269]},{"teal":1343,"source":"contracts/abstracted_account.algo.ts:273","pc":[1270]},{"teal":1348,"source":"contracts/abstracted_account.algo.ts:318","pc":[1271,1272,1273]},{"teal":1349,"source":"contracts/abstracted_account.algo.ts:318","pc":[1274,1275,1276]},{"teal":1352,"source":"contracts/abstracted_account.algo.ts:318","pc":[1277,1278,1279]},{"teal":1353,"source":"contracts/abstracted_account.algo.ts:318","pc":[1280]},{"teal":1354,"source":"contracts/abstracted_account.algo.ts:318","pc":[1281]},{"teal":1362,"source":"contracts/abstracted_account.algo.ts:318","pc":[1282,1283,1284]},{"teal":1366,"source":"contracts/abstracted_account.algo.ts:319","pc":[1285]},{"teal":1367,"source":"contracts/abstracted_account.algo.ts:319","pc":[1286,1287]},{"teal":1368,"source":"contracts/abstracted_account.algo.ts:319","pc":[1288,1289]},{"teal":1369,"source":"contracts/abstracted_account.algo.ts:319","pc":[1290,1291]},{"teal":1370,"source":"contracts/abstracted_account.algo.ts:319","pc":[1292]},{"teal":1371,"source":"contracts/abstracted_account.algo.ts:319","pc":[1293,1294]},{"teal":1372,"source":"contracts/abstracted_account.algo.ts:319","pc":[1295]},{"teal":1373,"source":"contracts/abstracted_account.algo.ts:319","pc":[1296]},{"teal":1374,"source":"contracts/abstracted_account.algo.ts:319","pc":[1297,1298,1299]},{"teal":1375,"source":"contracts/abstracted_account.algo.ts:318","pc":[1300]},{"teal":1380,"source":"contracts/abstracted_account.algo.ts:338","pc":[1301,1302,1303]},{"teal":1381,"source":"contracts/abstracted_account.algo.ts:338","pc":[1304,1305,1306]},{"teal":1384,"source":"contracts/abstracted_account.algo.ts:337","pc":[1307,1308,1309]},{"teal":1385,"source":"contracts/abstracted_account.algo.ts:337","pc":[1310]},{"teal":1386,"source":"contracts/abstracted_account.algo.ts:337","pc":[1311]},{"teal":1387,"source":"contracts/abstracted_account.algo.ts:337","pc":[1312]},{"teal":1388,"source":"contracts/abstracted_account.algo.ts:337","pc":[1313]},{"teal":1391,"source":"contracts/abstracted_account.algo.ts:337","errorMessage":"argument 1 (adminPrivileges) for arc58_addPlugin must be a bool","pc":[1314]},{"teal":1392,"source":"contracts/abstracted_account.algo.ts:337","pc":[1315]},{"teal":1393,"source":"contracts/abstracted_account.algo.ts:337","pc":[1316]},{"teal":1396,"source":"contracts/abstracted_account.algo.ts:336","pc":[1317,1318,1319]},{"teal":1397,"source":"contracts/abstracted_account.algo.ts:336","pc":[1320]},{"teal":1400,"source":"contracts/abstracted_account.algo.ts:335","pc":[1321,1322,1323]},{"teal":1401,"source":"contracts/abstracted_account.algo.ts:335","pc":[1324]},{"teal":1404,"source":"contracts/abstracted_account.algo.ts:334","pc":[1325,1326,1327]},{"teal":1405,"source":"contracts/abstracted_account.algo.ts:334","pc":[1328]},{"teal":1406,"source":"contracts/abstracted_account.algo.ts:334","pc":[1329]},{"teal":1407,"source":"contracts/abstracted_account.algo.ts:334","pc":[1330]},{"teal":1408,"source":"contracts/abstracted_account.algo.ts:334","pc":[1331]},{"teal":1411,"source":"contracts/abstracted_account.algo.ts:334","errorMessage":"argument 4 (allowedCaller) for arc58_addPlugin must be a address","pc":[1332]},{"teal":1414,"source":"contracts/abstracted_account.algo.ts:333","pc":[1333,1334,1335]},{"teal":1415,"source":"contracts/abstracted_account.algo.ts:333","pc":[1336]},{"teal":1418,"source":"contracts/abstracted_account.algo.ts:332","pc":[1337,1338,1339]},{"teal":1419,"source":"contracts/abstracted_account.algo.ts:332","pc":[1340]},{"teal":1420,"source":"contracts/abstracted_account.algo.ts:332","pc":[1341]},{"teal":1433,"source":"contracts/abstracted_account.algo.ts:332","pc":[1342,1343,1344]},{"teal":1436,"source":"contracts/abstracted_account.algo.ts:332","pc":[1345]},{"teal":1437,"source":"contracts/abstracted_account.algo.ts:332","pc":[1346]},{"teal":1442,"source":"contracts/abstracted_account.algo.ts:340","pc":[1347,1348]},{"teal":1443,"source":"contracts/abstracted_account.algo.ts:340","pc":[1349]},{"teal":1444,"source":"contracts/abstracted_account.algo.ts:340","pc":[1350]},{"teal":1445,"source":"contracts/abstracted_account.algo.ts:340","pc":[1351]},{"teal":1448,"source":"contracts/abstracted_account.algo.ts:340","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1352]},{"teal":1452,"source":"contracts/abstracted_account.algo.ts:341","pc":[1353,1354]},{"teal":1453,"source":"contracts/abstracted_account.algo.ts:341","pc":[1355]},{"teal":1454,"source":"contracts/abstracted_account.algo.ts:341","pc":[1356,1357]},{"teal":1455,"source":"contracts/abstracted_account.algo.ts:341","pc":[1358]},{"teal":1456,"source":"contracts/abstracted_account.algo.ts:341","pc":[1359,1360]},{"teal":1466,"source":"contracts/abstracted_account.algo.ts:343","pc":[1361]},{"teal":1467,"source":"contracts/abstracted_account.algo.ts:343","pc":[1362,1363]},{"teal":1468,"source":"contracts/abstracted_account.algo.ts:343","pc":[1364]},{"teal":1469,"source":"contracts/abstracted_account.algo.ts:344","pc":[1365,1366]},{"teal":1470,"source":"contracts/abstracted_account.algo.ts:344","pc":[1367]},{"teal":1471,"source":"contracts/abstracted_account.algo.ts:345","pc":[1368,1369]},{"teal":1472,"source":"contracts/abstracted_account.algo.ts:345","pc":[1370]},{"teal":1473,"source":"contracts/abstracted_account.algo.ts:345","pc":[1371]},{"teal":1474,"source":"contracts/abstracted_account.algo.ts:346","pc":[1372,1373]},{"teal":1475,"source":"contracts/abstracted_account.algo.ts:346","pc":[1374]},{"teal":1476,"source":"contracts/abstracted_account.algo.ts:347","pc":[1375,1376]},{"teal":1477,"source":"contracts/abstracted_account.algo.ts:347","pc":[1377]},{"teal":1478,"source":"contracts/abstracted_account.algo.ts:347","pc":[1378]},{"teal":1479,"source":"contracts/abstracted_account.algo.ts:347","pc":[1379]},{"teal":1480,"source":"contracts/abstracted_account.algo.ts:347","pc":[1380]},{"teal":1481,"source":"contracts/abstracted_account.algo.ts:347","pc":[1381]},{"teal":1482,"source":"contracts/abstracted_account.algo.ts:348","pc":[1382,1383]},{"teal":1483,"source":"contracts/abstracted_account.algo.ts:348","pc":[1384]},{"teal":1484,"source":"contracts/abstracted_account.algo.ts:348","pc":[1385,1386]},{"teal":1485,"source":"contracts/abstracted_account.algo.ts:348","pc":[1387]},{"teal":1486,"source":"contracts/abstracted_account.algo.ts:343","pc":[1388]},{"teal":1487,"source":"contracts/abstracted_account.algo.ts:343","pc":[1389]},{"teal":1491,"source":"contracts/abstracted_account.algo.ts:351","pc":[1390]},{"teal":1492,"source":"contracts/abstracted_account.algo.ts:351","pc":[1391,1392]},{"teal":1497,"source":"contracts/abstracted_account.algo.ts:351","pc":[1393,1394]},{"teal":1498,"source":"contracts/abstracted_account.algo.ts:351","pc":[1395,1396]},{"teal":1499,"source":"contracts/abstracted_account.algo.ts:351","pc":[1397]},{"teal":1500,"source":"contracts/abstracted_account.algo.ts:351","pc":[1398]},{"teal":1501,"source":"contracts/abstracted_account.algo.ts:351","pc":[1399]},{"teal":1502,"source":"contracts/abstracted_account.algo.ts:351","pc":[1400]},{"teal":1503,"source":"contracts/abstracted_account.algo.ts:351","pc":[1401,1402,1403]},{"teal":1507,"source":"contracts/abstracted_account.algo.ts:352","pc":[1404]},{"teal":1508,"source":"contracts/abstracted_account.algo.ts:352","pc":[1405,1406]},{"teal":1509,"source":"contracts/abstracted_account.algo.ts:352","pc":[1407]},{"teal":1510,"source":"contracts/abstracted_account.algo.ts:352","pc":[1408,1409]},{"teal":1511,"source":"contracts/abstracted_account.algo.ts:352","pc":[1410]},{"teal":1512,"source":"contracts/abstracted_account.algo.ts:352","pc":[1411,1412]},{"teal":1513,"source":"contracts/abstracted_account.algo.ts:352","pc":[1413,1414]},{"teal":1514,"source":"contracts/abstracted_account.algo.ts:352","pc":[1415]},{"teal":1515,"source":"contracts/abstracted_account.algo.ts:352","pc":[1416,1417]},{"teal":1516,"source":"contracts/abstracted_account.algo.ts:352","pc":[1418]},{"teal":1517,"source":"contracts/abstracted_account.algo.ts:352","pc":[1419]},{"teal":1518,"source":"contracts/abstracted_account.algo.ts:352","pc":[1420]},{"teal":1519,"source":"contracts/abstracted_account.algo.ts:352","pc":[1421,1422]},{"teal":1520,"source":"contracts/abstracted_account.algo.ts:352","pc":[1423]},{"teal":1521,"source":"contracts/abstracted_account.algo.ts:352","pc":[1424]},{"teal":1522,"source":"contracts/abstracted_account.algo.ts:352","pc":[1425]},{"teal":1523,"source":"contracts/abstracted_account.algo.ts:352","pc":[1426]},{"teal":1524,"source":"contracts/abstracted_account.algo.ts:352","pc":[1427]},{"teal":1525,"source":"contracts/abstracted_account.algo.ts:352","pc":[1428]},{"teal":1526,"source":"contracts/abstracted_account.algo.ts:352","pc":[1429]},{"teal":1527,"source":"contracts/abstracted_account.algo.ts:352","pc":[1430]},{"teal":1532,"source":"contracts/abstracted_account.algo.ts:351","pc":[1431,1432]},{"teal":1533,"source":"contracts/abstracted_account.algo.ts:351","pc":[1433]},{"teal":1534,"source":"contracts/abstracted_account.algo.ts:351","pc":[1434]},{"teal":1535,"source":"contracts/abstracted_account.algo.ts:351","pc":[1435,1436]},{"teal":1536,"source":"contracts/abstracted_account.algo.ts:351","pc":[1437,1438,1439]},{"teal":1539,"source":"contracts/abstracted_account.algo.ts:332","pc":[1440]},{"teal":1544,"source":"contracts/abstracted_account.algo.ts:364","pc":[1441,1442,1443]},{"teal":1545,"source":"contracts/abstracted_account.algo.ts:364","pc":[1444,1445,1446]},{"teal":1548,"source":"contracts/abstracted_account.algo.ts:364","pc":[1447,1448,1449]},{"teal":1549,"source":"contracts/abstracted_account.algo.ts:364","pc":[1450]},{"teal":1550,"source":"contracts/abstracted_account.algo.ts:364","pc":[1451]},{"teal":1551,"source":"contracts/abstracted_account.algo.ts:364","pc":[1452]},{"teal":1552,"source":"contracts/abstracted_account.algo.ts:364","pc":[1453]},{"teal":1555,"source":"contracts/abstracted_account.algo.ts:364","errorMessage":"argument 1 (allowedCaller) for arc58_removePlugin must be a address","pc":[1454]},{"teal":1558,"source":"contracts/abstracted_account.algo.ts:364","pc":[1455,1456,1457]},{"teal":1559,"source":"contracts/abstracted_account.algo.ts:364","pc":[1458]},{"teal":1562,"source":"contracts/abstracted_account.algo.ts:364","pc":[1459,1460,1461]},{"teal":1563,"source":"contracts/abstracted_account.algo.ts:364","pc":[1462]},{"teal":1564,"source":"contracts/abstracted_account.algo.ts:364","pc":[1463]},{"teal":1575,"source":"contracts/abstracted_account.algo.ts:364","pc":[1464,1465,1466]},{"teal":1578,"source":"contracts/abstracted_account.algo.ts:364","pc":[1467]},{"teal":1579,"source":"contracts/abstracted_account.algo.ts:364","pc":[1468,1469]},{"teal":1584,"source":"contracts/abstracted_account.algo.ts:365","pc":[1470,1471]},{"teal":1585,"source":"contracts/abstracted_account.algo.ts:365","pc":[1472]},{"teal":1586,"source":"contracts/abstracted_account.algo.ts:365","pc":[1473]},{"teal":1587,"source":"contracts/abstracted_account.algo.ts:365","pc":[1474]},{"teal":1590,"source":"contracts/abstracted_account.algo.ts:365","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1475]},{"teal":1594,"source":"contracts/abstracted_account.algo.ts:367","pc":[1476,1477]},{"teal":1595,"source":"contracts/abstracted_account.algo.ts:367","pc":[1478]},{"teal":1596,"source":"contracts/abstracted_account.algo.ts:367","pc":[1479,1480]},{"teal":1597,"source":"contracts/abstracted_account.algo.ts:367","pc":[1481]},{"teal":1598,"source":"contracts/abstracted_account.algo.ts:367","pc":[1482,1483]},{"teal":1602,"source":"contracts/abstracted_account.algo.ts:369","pc":[1484]},{"teal":1603,"source":"contracts/abstracted_account.algo.ts:369","pc":[1485,1486]},{"teal":1604,"source":"contracts/abstracted_account.algo.ts:369","pc":[1487]},{"teal":1605,"source":"contracts/abstracted_account.algo.ts:369","pc":[1488]},{"teal":1606,"source":"contracts/abstracted_account.algo.ts:369","pc":[1489]},{"teal":1607,"source":"contracts/abstracted_account.algo.ts:369","pc":[1490]},{"teal":1610,"source":"contracts/abstracted_account.algo.ts:369","errorMessage":"plugin does not exist","pc":[1491]},{"teal":1614,"source":"contracts/abstracted_account.algo.ts:371","pc":[1492]},{"teal":1615,"source":"contracts/abstracted_account.algo.ts:371","pc":[1493,1494]},{"teal":1616,"source":"contracts/abstracted_account.algo.ts:371","pc":[1495]},{"teal":1617,"source":"contracts/abstracted_account.algo.ts:371","pc":[1496]},{"teal":1620,"source":"contracts/abstracted_account.algo.ts:371","errorMessage":"box value does not exist: this.plugins(key).value","pc":[1497]},{"teal":1621,"source":"contracts/abstracted_account.algo.ts:371","pc":[1498,1499]},{"teal":1622,"source":"contracts/abstracted_account.algo.ts:371","pc":[1500,1501]},{"teal":1623,"source":"contracts/abstracted_account.algo.ts:371","pc":[1502,1503,1504]},{"teal":1624,"source":"contracts/abstracted_account.algo.ts:371","pc":[1505]},{"teal":1625,"source":"contracts/abstracted_account.algo.ts:371","pc":[1506,1507]},{"teal":1629,"source":"contracts/abstracted_account.algo.ts:372","pc":[1508]},{"teal":1630,"source":"contracts/abstracted_account.algo.ts:372","pc":[1509,1510]},{"teal":1635,"source":"contracts/abstracted_account.algo.ts:372","pc":[1511,1512]},{"teal":1636,"source":"contracts/abstracted_account.algo.ts:372","pc":[1513,1514]},{"teal":1637,"source":"contracts/abstracted_account.algo.ts:372","pc":[1515]},{"teal":1638,"source":"contracts/abstracted_account.algo.ts:372","pc":[1516]},{"teal":1639,"source":"contracts/abstracted_account.algo.ts:372","pc":[1517]},{"teal":1640,"source":"contracts/abstracted_account.algo.ts:372","pc":[1518]},{"teal":1641,"source":"contracts/abstracted_account.algo.ts:372","pc":[1519,1520,1521]},{"teal":1645,"source":"contracts/abstracted_account.algo.ts:373","pc":[1522,1523]},{"teal":1646,"source":"contracts/abstracted_account.algo.ts:373","pc":[1524]},{"teal":1647,"source":"contracts/abstracted_account.algo.ts:373","pc":[1525,1526]},{"teal":1648,"source":"contracts/abstracted_account.algo.ts:373","pc":[1527]},{"teal":1649,"source":"contracts/abstracted_account.algo.ts:373","pc":[1528,1529]},{"teal":1650,"source":"contracts/abstracted_account.algo.ts:373","pc":[1530,1531]},{"teal":1651,"source":"contracts/abstracted_account.algo.ts:373","pc":[1532]},{"teal":1652,"source":"contracts/abstracted_account.algo.ts:373","pc":[1533,1534]},{"teal":1653,"source":"contracts/abstracted_account.algo.ts:373","pc":[1535]},{"teal":1654,"source":"contracts/abstracted_account.algo.ts:373","pc":[1536]},{"teal":1655,"source":"contracts/abstracted_account.algo.ts:373","pc":[1537]},{"teal":1656,"source":"contracts/abstracted_account.algo.ts:373","pc":[1538,1539]},{"teal":1657,"source":"contracts/abstracted_account.algo.ts:373","pc":[1540]},{"teal":1658,"source":"contracts/abstracted_account.algo.ts:373","pc":[1541]},{"teal":1659,"source":"contracts/abstracted_account.algo.ts:373","pc":[1542]},{"teal":1660,"source":"contracts/abstracted_account.algo.ts:373","pc":[1543]},{"teal":1661,"source":"contracts/abstracted_account.algo.ts:373","pc":[1544,1545]},{"teal":1665,"source":"contracts/abstracted_account.algo.ts:374","pc":[1546]},{"teal":1666,"source":"contracts/abstracted_account.algo.ts:374","pc":[1547,1548]},{"teal":1667,"source":"contracts/abstracted_account.algo.ts:374","pc":[1549]},{"teal":1668,"source":"contracts/abstracted_account.algo.ts:374","pc":[1550]},{"teal":1669,"source":"contracts/abstracted_account.algo.ts:374","pc":[1551]},{"teal":1670,"source":"contracts/abstracted_account.algo.ts:374","pc":[1552]},{"teal":1673,"source":"contracts/abstracted_account.algo.ts:374","errorMessage":"method does not exist","pc":[1553]},{"teal":1677,"source":"contracts/abstracted_account.algo.ts:375","pc":[1554,1555]},{"teal":1678,"source":"contracts/abstracted_account.algo.ts:375","pc":[1556]},{"teal":1679,"source":"contracts/abstracted_account.algo.ts:375","pc":[1557]},{"teal":1680,"source":"contracts/abstracted_account.algo.ts:375","pc":[1558,1559]},{"teal":1684,"source":"contracts/abstracted_account.algo.ts:376","pc":[1560]},{"teal":1685,"source":"contracts/abstracted_account.algo.ts:376","pc":[1561,1562]},{"teal":1686,"source":"contracts/abstracted_account.algo.ts:376","pc":[1563]},{"teal":1687,"source":"contracts/abstracted_account.algo.ts:376","pc":[1564]},{"teal":1692,"source":"contracts/abstracted_account.algo.ts:372","pc":[1565,1566]},{"teal":1693,"source":"contracts/abstracted_account.algo.ts:372","pc":[1567]},{"teal":1694,"source":"contracts/abstracted_account.algo.ts:372","pc":[1568]},{"teal":1695,"source":"contracts/abstracted_account.algo.ts:372","pc":[1569,1570]},{"teal":1696,"source":"contracts/abstracted_account.algo.ts:372","pc":[1571,1572,1573]},{"teal":1701,"source":"contracts/abstracted_account.algo.ts:379","pc":[1574,1575]},{"teal":1702,"source":"contracts/abstracted_account.algo.ts:379","pc":[1576]},{"teal":1703,"source":"contracts/abstracted_account.algo.ts:379","pc":[1577]},{"teal":1706,"source":"contracts/abstracted_account.algo.ts:379","errorMessage":"plugin has method restrictions","pc":[1578]},{"teal":1710,"source":"contracts/abstracted_account.algo.ts:381","pc":[1579]},{"teal":1711,"source":"contracts/abstracted_account.algo.ts:381","pc":[1580,1581]},{"teal":1712,"source":"contracts/abstracted_account.algo.ts:381","pc":[1582]},{"teal":1713,"source":"contracts/abstracted_account.algo.ts:381","pc":[1583]},{"teal":1714,"source":"contracts/abstracted_account.algo.ts:364","pc":[1584]},{"teal":1719,"source":"contracts/abstracted_account.algo.ts:403","pc":[1585,1586,1587]},{"teal":1720,"source":"contracts/abstracted_account.algo.ts:403","pc":[1588,1589,1590]},{"teal":1723,"source":"contracts/abstracted_account.algo.ts:402","pc":[1591,1592,1593]},{"teal":1724,"source":"contracts/abstracted_account.algo.ts:402","pc":[1594]},{"teal":1725,"source":"contracts/abstracted_account.algo.ts:402","pc":[1595]},{"teal":1726,"source":"contracts/abstracted_account.algo.ts:402","pc":[1596]},{"teal":1727,"source":"contracts/abstracted_account.algo.ts:402","pc":[1597]},{"teal":1730,"source":"contracts/abstracted_account.algo.ts:402","errorMessage":"argument 1 (adminPrivileges) for arc58_addNamedPlugin must be a bool","pc":[1598]},{"teal":1731,"source":"contracts/abstracted_account.algo.ts:402","pc":[1599]},{"teal":1732,"source":"contracts/abstracted_account.algo.ts:402","pc":[1600]},{"teal":1735,"source":"contracts/abstracted_account.algo.ts:401","pc":[1601,1602,1603]},{"teal":1736,"source":"contracts/abstracted_account.algo.ts:401","pc":[1604]},{"teal":1739,"source":"contracts/abstracted_account.algo.ts:400","pc":[1605,1606,1607]},{"teal":1740,"source":"contracts/abstracted_account.algo.ts:400","pc":[1608]},{"teal":1743,"source":"contracts/abstracted_account.algo.ts:399","pc":[1609,1610,1611]},{"teal":1744,"source":"contracts/abstracted_account.algo.ts:399","pc":[1612]},{"teal":1745,"source":"contracts/abstracted_account.algo.ts:399","pc":[1613]},{"teal":1746,"source":"contracts/abstracted_account.algo.ts:399","pc":[1614]},{"teal":1747,"source":"contracts/abstracted_account.algo.ts:399","pc":[1615]},{"teal":1750,"source":"contracts/abstracted_account.algo.ts:399","errorMessage":"argument 4 (allowedCaller) for arc58_addNamedPlugin must be a address","pc":[1616]},{"teal":1753,"source":"contracts/abstracted_account.algo.ts:398","pc":[1617,1618,1619]},{"teal":1754,"source":"contracts/abstracted_account.algo.ts:398","pc":[1620]},{"teal":1757,"source":"contracts/abstracted_account.algo.ts:397","pc":[1621,1622,1623]},{"teal":1758,"source":"contracts/abstracted_account.algo.ts:397","pc":[1624,1625,1626]},{"teal":1761,"source":"contracts/abstracted_account.algo.ts:396","pc":[1627,1628,1629]},{"teal":1762,"source":"contracts/abstracted_account.algo.ts:396","pc":[1630]},{"teal":1763,"source":"contracts/abstracted_account.algo.ts:396","pc":[1631]},{"teal":1778,"source":"contracts/abstracted_account.algo.ts:396","pc":[1632,1633,1634]},{"teal":1781,"source":"contracts/abstracted_account.algo.ts:396","pc":[1635]},{"teal":1782,"source":"contracts/abstracted_account.algo.ts:396","pc":[1636,1637]},{"teal":1787,"source":"contracts/abstracted_account.algo.ts:405","pc":[1638,1639]},{"teal":1788,"source":"contracts/abstracted_account.algo.ts:405","pc":[1640]},{"teal":1789,"source":"contracts/abstracted_account.algo.ts:405","pc":[1641]},{"teal":1790,"source":"contracts/abstracted_account.algo.ts:405","pc":[1642]},{"teal":1793,"source":"contracts/abstracted_account.algo.ts:405","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1643]},{"teal":1797,"source":"contracts/abstracted_account.algo.ts:406","pc":[1644,1645]},{"teal":1798,"source":"contracts/abstracted_account.algo.ts:406","pc":[1646,1647]},{"teal":1799,"source":"contracts/abstracted_account.algo.ts:406","pc":[1648]},{"teal":1800,"source":"contracts/abstracted_account.algo.ts:406","pc":[1649]},{"teal":1801,"source":"contracts/abstracted_account.algo.ts:406","pc":[1650]},{"teal":1802,"source":"contracts/abstracted_account.algo.ts:406","pc":[1651]},{"teal":1803,"source":"contracts/abstracted_account.algo.ts:406","pc":[1652]},{"teal":1804,"source":"contracts/abstracted_account.algo.ts:406","pc":[1653]},{"teal":1808,"source":"contracts/abstracted_account.algo.ts:408","pc":[1654,1655]},{"teal":1809,"source":"contracts/abstracted_account.algo.ts:408","pc":[1656]},{"teal":1810,"source":"contracts/abstracted_account.algo.ts:408","pc":[1657,1658]},{"teal":1811,"source":"contracts/abstracted_account.algo.ts:408","pc":[1659]},{"teal":1812,"source":"contracts/abstracted_account.algo.ts:408","pc":[1660,1661]},{"teal":1816,"source":"contracts/abstracted_account.algo.ts:409","pc":[1662,1663]},{"teal":1817,"source":"contracts/abstracted_account.algo.ts:409","pc":[1664,1665]},{"teal":1818,"source":"contracts/abstracted_account.algo.ts:409","pc":[1666]},{"teal":1819,"source":"contracts/abstracted_account.algo.ts:409","pc":[1667,1668]},{"teal":1820,"source":"contracts/abstracted_account.algo.ts:409","pc":[1669]},{"teal":1830,"source":"contracts/abstracted_account.algo.ts:412","pc":[1670,1671]},{"teal":1831,"source":"contracts/abstracted_account.algo.ts:412","pc":[1672]},{"teal":1832,"source":"contracts/abstracted_account.algo.ts:413","pc":[1673,1674]},{"teal":1833,"source":"contracts/abstracted_account.algo.ts:413","pc":[1675]},{"teal":1834,"source":"contracts/abstracted_account.algo.ts:413","pc":[1676]},{"teal":1835,"source":"contracts/abstracted_account.algo.ts:414","pc":[1677,1678]},{"teal":1836,"source":"contracts/abstracted_account.algo.ts:414","pc":[1679]},{"teal":1837,"source":"contracts/abstracted_account.algo.ts:415","pc":[1680,1681]},{"teal":1838,"source":"contracts/abstracted_account.algo.ts:415","pc":[1682]},{"teal":1839,"source":"contracts/abstracted_account.algo.ts:415","pc":[1683]},{"teal":1840,"source":"contracts/abstracted_account.algo.ts:415","pc":[1684]},{"teal":1841,"source":"contracts/abstracted_account.algo.ts:415","pc":[1685]},{"teal":1842,"source":"contracts/abstracted_account.algo.ts:415","pc":[1686]},{"teal":1843,"source":"contracts/abstracted_account.algo.ts:416","pc":[1687,1688]},{"teal":1844,"source":"contracts/abstracted_account.algo.ts:416","pc":[1689]},{"teal":1845,"source":"contracts/abstracted_account.algo.ts:416","pc":[1690,1691]},{"teal":1846,"source":"contracts/abstracted_account.algo.ts:416","pc":[1692]},{"teal":1847,"source":"contracts/abstracted_account.algo.ts:411","pc":[1693]},{"teal":1848,"source":"contracts/abstracted_account.algo.ts:411","pc":[1694,1695]},{"teal":1852,"source":"contracts/abstracted_account.algo.ts:419","pc":[1696]},{"teal":1853,"source":"contracts/abstracted_account.algo.ts:419","pc":[1697,1698]},{"teal":1854,"source":"contracts/abstracted_account.algo.ts:419","pc":[1699]},{"teal":1855,"source":"contracts/abstracted_account.algo.ts:419","pc":[1700,1701]},{"teal":1856,"source":"contracts/abstracted_account.algo.ts:419","pc":[1702]},{"teal":1860,"source":"contracts/abstracted_account.algo.ts:421","pc":[1703]},{"teal":1861,"source":"contracts/abstracted_account.algo.ts:421","pc":[1704,1705]},{"teal":1866,"source":"contracts/abstracted_account.algo.ts:421","pc":[1706,1707]},{"teal":1867,"source":"contracts/abstracted_account.algo.ts:421","pc":[1708,1709]},{"teal":1868,"source":"contracts/abstracted_account.algo.ts:421","pc":[1710]},{"teal":1869,"source":"contracts/abstracted_account.algo.ts:421","pc":[1711]},{"teal":1870,"source":"contracts/abstracted_account.algo.ts:421","pc":[1712]},{"teal":1871,"source":"contracts/abstracted_account.algo.ts:421","pc":[1713]},{"teal":1872,"source":"contracts/abstracted_account.algo.ts:421","pc":[1714,1715,1716]},{"teal":1876,"source":"contracts/abstracted_account.algo.ts:422","pc":[1717]},{"teal":1877,"source":"contracts/abstracted_account.algo.ts:422","pc":[1718,1719]},{"teal":1878,"source":"contracts/abstracted_account.algo.ts:422","pc":[1720]},{"teal":1879,"source":"contracts/abstracted_account.algo.ts:422","pc":[1721,1722]},{"teal":1880,"source":"contracts/abstracted_account.algo.ts:422","pc":[1723]},{"teal":1881,"source":"contracts/abstracted_account.algo.ts:422","pc":[1724,1725]},{"teal":1882,"source":"contracts/abstracted_account.algo.ts:422","pc":[1726,1727]},{"teal":1883,"source":"contracts/abstracted_account.algo.ts:422","pc":[1728]},{"teal":1884,"source":"contracts/abstracted_account.algo.ts:422","pc":[1729,1730]},{"teal":1885,"source":"contracts/abstracted_account.algo.ts:422","pc":[1731]},{"teal":1886,"source":"contracts/abstracted_account.algo.ts:422","pc":[1732]},{"teal":1887,"source":"contracts/abstracted_account.algo.ts:422","pc":[1733]},{"teal":1888,"source":"contracts/abstracted_account.algo.ts:422","pc":[1734,1735]},{"teal":1889,"source":"contracts/abstracted_account.algo.ts:422","pc":[1736]},{"teal":1890,"source":"contracts/abstracted_account.algo.ts:422","pc":[1737]},{"teal":1891,"source":"contracts/abstracted_account.algo.ts:422","pc":[1738]},{"teal":1892,"source":"contracts/abstracted_account.algo.ts:422","pc":[1739]},{"teal":1893,"source":"contracts/abstracted_account.algo.ts:422","pc":[1740]},{"teal":1894,"source":"contracts/abstracted_account.algo.ts:422","pc":[1741]},{"teal":1895,"source":"contracts/abstracted_account.algo.ts:422","pc":[1742]},{"teal":1896,"source":"contracts/abstracted_account.algo.ts:422","pc":[1743]},{"teal":1901,"source":"contracts/abstracted_account.algo.ts:421","pc":[1744,1745]},{"teal":1902,"source":"contracts/abstracted_account.algo.ts:421","pc":[1746]},{"teal":1903,"source":"contracts/abstracted_account.algo.ts:421","pc":[1747]},{"teal":1904,"source":"contracts/abstracted_account.algo.ts:421","pc":[1748,1749]},{"teal":1905,"source":"contracts/abstracted_account.algo.ts:421","pc":[1750,1751,1752]},{"teal":1908,"source":"contracts/abstracted_account.algo.ts:396","pc":[1753]},{"teal":1913,"source":"contracts/abstracted_account.algo.ts:431","pc":[1754,1755,1756]},{"teal":1914,"source":"contracts/abstracted_account.algo.ts:431","pc":[1757,1758,1759]},{"teal":1917,"source":"contracts/abstracted_account.algo.ts:431","pc":[1760,1761,1762]},{"teal":1918,"source":"contracts/abstracted_account.algo.ts:431","pc":[1763]},{"teal":1919,"source":"contracts/abstracted_account.algo.ts:431","pc":[1764]},{"teal":1927,"source":"contracts/abstracted_account.algo.ts:431","pc":[1765,1766,1767]},{"teal":1930,"source":"contracts/abstracted_account.algo.ts:431","pc":[1768]},{"teal":1935,"source":"contracts/abstracted_account.algo.ts:432","pc":[1769,1770]},{"teal":1936,"source":"contracts/abstracted_account.algo.ts:432","pc":[1771]},{"teal":1937,"source":"contracts/abstracted_account.algo.ts:432","pc":[1772]},{"teal":1938,"source":"contracts/abstracted_account.algo.ts:432","pc":[1773]},{"teal":1941,"source":"contracts/abstracted_account.algo.ts:432","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1774]},{"teal":1945,"source":"contracts/abstracted_account.algo.ts:434","pc":[1775,1776]},{"teal":1946,"source":"contracts/abstracted_account.algo.ts:434","pc":[1777,1778]},{"teal":1947,"source":"contracts/abstracted_account.algo.ts:434","pc":[1779]},{"teal":1948,"source":"contracts/abstracted_account.algo.ts:434","pc":[1780]},{"teal":1949,"source":"contracts/abstracted_account.algo.ts:434","pc":[1781]},{"teal":1950,"source":"contracts/abstracted_account.algo.ts:434","pc":[1782]},{"teal":1953,"source":"contracts/abstracted_account.algo.ts:434","errorMessage":"plugin does not exist","pc":[1783]},{"teal":1957,"source":"contracts/abstracted_account.algo.ts:435","pc":[1784,1785]},{"teal":1958,"source":"contracts/abstracted_account.algo.ts:435","pc":[1786,1787]},{"teal":1959,"source":"contracts/abstracted_account.algo.ts:435","pc":[1788]},{"teal":1960,"source":"contracts/abstracted_account.algo.ts:435","pc":[1789,1790]},{"teal":1964,"source":"contracts/abstracted_account.algo.ts:436","pc":[1791]},{"teal":1965,"source":"contracts/abstracted_account.algo.ts:435","pc":[1792,1793]},{"teal":1966,"source":"contracts/abstracted_account.algo.ts:435","pc":[1794]},{"teal":1969,"source":"contracts/abstracted_account.algo.ts:435","errorMessage":"box value does not exist: this.namedPlugins(name).value","pc":[1795]},{"teal":1970,"source":"contracts/abstracted_account.algo.ts:436","pc":[1796]},{"teal":1971,"source":"contracts/abstracted_account.algo.ts:436","pc":[1797]},{"teal":1972,"source":"contracts/abstracted_account.algo.ts:436","pc":[1798]},{"teal":1973,"source":"contracts/abstracted_account.algo.ts:436","pc":[1799]},{"teal":1976,"source":"contracts/abstracted_account.algo.ts:436","errorMessage":"plugin does not exist","pc":[1800]},{"teal":1980,"source":"contracts/abstracted_account.algo.ts:437","pc":[1801]},{"teal":1981,"source":"contracts/abstracted_account.algo.ts:435","pc":[1802,1803]},{"teal":1982,"source":"contracts/abstracted_account.algo.ts:435","pc":[1804]},{"teal":1985,"source":"contracts/abstracted_account.algo.ts:435","errorMessage":"box value does not exist: this.namedPlugins(name).value","pc":[1805]},{"teal":1986,"source":"contracts/abstracted_account.algo.ts:437","pc":[1806]},{"teal":1987,"source":"contracts/abstracted_account.algo.ts:437","pc":[1807]},{"teal":1990,"source":"contracts/abstracted_account.algo.ts:437","errorMessage":"box value does not exist: this.plugins(app).value","pc":[1808]},{"teal":1991,"source":"contracts/abstracted_account.algo.ts:437","pc":[1809,1810]},{"teal":1992,"source":"contracts/abstracted_account.algo.ts:437","pc":[1811,1812]},{"teal":1993,"source":"contracts/abstracted_account.algo.ts:437","pc":[1813,1814,1815]},{"teal":1994,"source":"contracts/abstracted_account.algo.ts:437","pc":[1816]},{"teal":1995,"source":"contracts/abstracted_account.algo.ts:437","pc":[1817]},{"teal":1996,"source":"contracts/abstracted_account.algo.ts:437","pc":[1818]},{"teal":1999,"source":"contracts/abstracted_account.algo.ts:437","errorMessage":"plugin has method restrictions","pc":[1819]},{"teal":2003,"source":"contracts/abstracted_account.algo.ts:439","pc":[1820,1821]},{"teal":2004,"source":"contracts/abstracted_account.algo.ts:439","pc":[1822,1823]},{"teal":2005,"source":"contracts/abstracted_account.algo.ts:439","pc":[1824]},{"teal":2006,"source":"contracts/abstracted_account.algo.ts:439","pc":[1825]},{"teal":2010,"source":"contracts/abstracted_account.algo.ts:440","pc":[1826]},{"teal":2011,"source":"contracts/abstracted_account.algo.ts:435","pc":[1827,1828]},{"teal":2012,"source":"contracts/abstracted_account.algo.ts:435","pc":[1829]},{"teal":2015,"source":"contracts/abstracted_account.algo.ts:435","errorMessage":"box value does not exist: this.namedPlugins(name).value","pc":[1830]},{"teal":2016,"source":"contracts/abstracted_account.algo.ts:440","pc":[1831]},{"teal":2017,"source":"contracts/abstracted_account.algo.ts:440","pc":[1832]},{"teal":2018,"source":"contracts/abstracted_account.algo.ts:431","pc":[1833]},{"teal":2023,"source":"contracts/abstracted_account.algo.ts:443","pc":[1834,1835,1836]},{"teal":2024,"source":"contracts/abstracted_account.algo.ts:443","pc":[1837]},{"teal":2025,"source":"contracts/abstracted_account.algo.ts:443","pc":[1838]},{"teal":2026,"source":"contracts/abstracted_account.algo.ts:443","pc":[1839]},{"teal":2027,"source":"contracts/abstracted_account.algo.ts:443","pc":[1840]},{"teal":2030,"source":"contracts/abstracted_account.algo.ts:443","errorMessage":"argument 0 (method) for arc58_addMethod must be a byte[4]","pc":[1841]},{"teal":2033,"source":"contracts/abstracted_account.algo.ts:443","pc":[1842,1843,1844]},{"teal":2034,"source":"contracts/abstracted_account.algo.ts:443","pc":[1845]},{"teal":2035,"source":"contracts/abstracted_account.algo.ts:443","pc":[1846]},{"teal":2036,"source":"contracts/abstracted_account.algo.ts:443","pc":[1847]},{"teal":2037,"source":"contracts/abstracted_account.algo.ts:443","pc":[1848]},{"teal":2040,"source":"contracts/abstracted_account.algo.ts:443","errorMessage":"argument 1 (allowedCaller) for arc58_addMethod must be a address","pc":[1849]},{"teal":2043,"source":"contracts/abstracted_account.algo.ts:443","pc":[1850,1851,1852]},{"teal":2044,"source":"contracts/abstracted_account.algo.ts:443","pc":[1853]},{"teal":2047,"source":"contracts/abstracted_account.algo.ts:443","pc":[1854,1855,1856]},{"teal":2048,"source":"contracts/abstracted_account.algo.ts:443","pc":[1857]},{"teal":2049,"source":"contracts/abstracted_account.algo.ts:443","pc":[1858]},{"teal":2053,"source":"contracts/abstracted_account.algo.ts:443","pc":[1859,1860,1861]},{"teal":2056,"source":"contracts/abstracted_account.algo.ts:443","pc":[1862]},{"teal":2057,"source":"contracts/abstracted_account.algo.ts:443","pc":[1863]},{"teal":2062,"source":"contracts/abstracted_account.algo.ts:444","pc":[1864,1865]},{"teal":2063,"source":"contracts/abstracted_account.algo.ts:444","pc":[1866]},{"teal":2064,"source":"contracts/abstracted_account.algo.ts:444","pc":[1867]},{"teal":2065,"source":"contracts/abstracted_account.algo.ts:444","pc":[1868]},{"teal":2068,"source":"contracts/abstracted_account.algo.ts:444","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1869]},{"teal":2072,"source":"contracts/abstracted_account.algo.ts:446","pc":[1870,1871]},{"teal":2073,"source":"contracts/abstracted_account.algo.ts:446","pc":[1872]},{"teal":2074,"source":"contracts/abstracted_account.algo.ts:446","pc":[1873,1874]},{"teal":2075,"source":"contracts/abstracted_account.algo.ts:446","pc":[1875]},{"teal":2076,"source":"contracts/abstracted_account.algo.ts:446","pc":[1876,1877]},{"teal":2080,"source":"contracts/abstracted_account.algo.ts:447","pc":[1878,1879]},{"teal":2081,"source":"contracts/abstracted_account.algo.ts:447","pc":[1880]},{"teal":2082,"source":"contracts/abstracted_account.algo.ts:447","pc":[1881,1882]},{"teal":2083,"source":"contracts/abstracted_account.algo.ts:447","pc":[1883]},{"teal":2084,"source":"contracts/abstracted_account.algo.ts:447","pc":[1884,1885]},{"teal":2085,"source":"contracts/abstracted_account.algo.ts:447","pc":[1886]},{"teal":2086,"source":"contracts/abstracted_account.algo.ts:447","pc":[1887,1888]},{"teal":2090,"source":"contracts/abstracted_account.algo.ts:449","pc":[1889]},{"teal":2091,"source":"contracts/abstracted_account.algo.ts:449","pc":[1890,1891]},{"teal":2092,"source":"contracts/abstracted_account.algo.ts:449","pc":[1892]},{"teal":2093,"source":"contracts/abstracted_account.algo.ts:449","pc":[1893]},{"teal":2094,"source":"contracts/abstracted_account.algo.ts:449","pc":[1894]},{"teal":2095,"source":"contracts/abstracted_account.algo.ts:449","pc":[1895]},{"teal":2098,"source":"contracts/abstracted_account.algo.ts:449","errorMessage":"plugin does not exist","pc":[1896]},{"teal":2102,"source":"contracts/abstracted_account.algo.ts:450","pc":[1897]},{"teal":2103,"source":"contracts/abstracted_account.algo.ts:450","pc":[1898,1899]},{"teal":2104,"source":"contracts/abstracted_account.algo.ts:450","pc":[1900]},{"teal":2105,"source":"contracts/abstracted_account.algo.ts:450","pc":[1901]},{"teal":2106,"source":"contracts/abstracted_account.algo.ts:450","pc":[1902]},{"teal":2107,"source":"contracts/abstracted_account.algo.ts:450","pc":[1903]},{"teal":2108,"source":"contracts/abstracted_account.algo.ts:450","pc":[1904]},{"teal":2111,"source":"contracts/abstracted_account.algo.ts:450","errorMessage":"method already exists","pc":[1905]},{"teal":2115,"source":"contracts/abstracted_account.algo.ts:452","pc":[1906]},{"teal":2116,"source":"contracts/abstracted_account.algo.ts:452","pc":[1907,1908]},{"teal":2117,"source":"contracts/abstracted_account.algo.ts:452","pc":[1909]},{"teal":2118,"source":"contracts/abstracted_account.algo.ts:452","pc":[1910]},{"teal":2121,"source":"contracts/abstracted_account.algo.ts:452","errorMessage":"box value does not exist: this.plugins(pluginKey).value","pc":[1911]},{"teal":2122,"source":"contracts/abstracted_account.algo.ts:452","pc":[1912,1913]},{"teal":2123,"source":"contracts/abstracted_account.algo.ts:452","pc":[1914,1915]},{"teal":2124,"source":"contracts/abstracted_account.algo.ts:452","pc":[1916,1917]},{"teal":2125,"source":"contracts/abstracted_account.algo.ts:452","pc":[1918]},{"teal":2126,"source":"contracts/abstracted_account.algo.ts:452","pc":[1919,1920]},{"teal":2127,"source":"contracts/abstracted_account.algo.ts:452","pc":[1921]},{"teal":2128,"source":"contracts/abstracted_account.algo.ts:452","pc":[1922]},{"teal":2131,"source":"contracts/abstracted_account.algo.ts:452","errorMessage":"box value does not exist: this.plugins(pluginKey).value","pc":[1923]},{"teal":2132,"source":"contracts/abstracted_account.algo.ts:452","pc":[1924,1925]},{"teal":2133,"source":"contracts/abstracted_account.algo.ts:452","pc":[1926,1927]},{"teal":2134,"source":"contracts/abstracted_account.algo.ts:452","pc":[1928,1929,1930]},{"teal":2135,"source":"contracts/abstracted_account.algo.ts:452","pc":[1931]},{"teal":2136,"source":"contracts/abstracted_account.algo.ts:452","pc":[1932]},{"teal":2137,"source":"contracts/abstracted_account.algo.ts:452","pc":[1933]},{"teal":2138,"source":"contracts/abstracted_account.algo.ts:452","pc":[1934]},{"teal":2139,"source":"contracts/abstracted_account.algo.ts:452","pc":[1935]},{"teal":2140,"source":"contracts/abstracted_account.algo.ts:452","pc":[1936,1937]},{"teal":2141,"source":"contracts/abstracted_account.algo.ts:452","pc":[1938]},{"teal":2142,"source":"contracts/abstracted_account.algo.ts:452","pc":[1939,1940]},{"teal":2143,"source":"contracts/abstracted_account.algo.ts:452","pc":[1941]},{"teal":2147,"source":"contracts/abstracted_account.algo.ts:453","pc":[1942]},{"teal":2148,"source":"contracts/abstracted_account.algo.ts:453","pc":[1943,1944]},{"teal":2149,"source":"contracts/abstracted_account.algo.ts:453","pc":[1945]},{"teal":2150,"source":"contracts/abstracted_account.algo.ts:453","pc":[1946,1947]},{"teal":2151,"source":"contracts/abstracted_account.algo.ts:453","pc":[1948]},{"teal":2152,"source":"contracts/abstracted_account.algo.ts:453","pc":[1949,1950]},{"teal":2153,"source":"contracts/abstracted_account.algo.ts:453","pc":[1951]},{"teal":2154,"source":"contracts/abstracted_account.algo.ts:453","pc":[1952]},{"teal":2155,"source":"contracts/abstracted_account.algo.ts:453","pc":[1953]},{"teal":2156,"source":"contracts/abstracted_account.algo.ts:453","pc":[1954]},{"teal":2157,"source":"contracts/abstracted_account.algo.ts:453","pc":[1955]},{"teal":2158,"source":"contracts/abstracted_account.algo.ts:443","pc":[1956]},{"teal":2163,"source":"contracts/abstracted_account.algo.ts:456","pc":[1957,1958,1959]},{"teal":2164,"source":"contracts/abstracted_account.algo.ts:456","pc":[1960]},{"teal":2165,"source":"contracts/abstracted_account.algo.ts:456","pc":[1961]},{"teal":2166,"source":"contracts/abstracted_account.algo.ts:456","pc":[1962]},{"teal":2167,"source":"contracts/abstracted_account.algo.ts:456","pc":[1963]},{"teal":2170,"source":"contracts/abstracted_account.algo.ts:456","errorMessage":"argument 0 (method) for arc58_removeMethod must be a byte[4]","pc":[1964]},{"teal":2173,"source":"contracts/abstracted_account.algo.ts:456","pc":[1965,1966,1967]},{"teal":2174,"source":"contracts/abstracted_account.algo.ts:456","pc":[1968]},{"teal":2175,"source":"contracts/abstracted_account.algo.ts:456","pc":[1969]},{"teal":2176,"source":"contracts/abstracted_account.algo.ts:456","pc":[1970]},{"teal":2177,"source":"contracts/abstracted_account.algo.ts:456","pc":[1971]},{"teal":2180,"source":"contracts/abstracted_account.algo.ts:456","errorMessage":"argument 1 (allowedCaller) for arc58_removeMethod must be a address","pc":[1972]},{"teal":2183,"source":"contracts/abstracted_account.algo.ts:456","pc":[1973,1974,1975]},{"teal":2184,"source":"contracts/abstracted_account.algo.ts:456","pc":[1976]},{"teal":2187,"source":"contracts/abstracted_account.algo.ts:456","pc":[1977,1978,1979]},{"teal":2188,"source":"contracts/abstracted_account.algo.ts:456","pc":[1980]},{"teal":2189,"source":"contracts/abstracted_account.algo.ts:456","pc":[1981]},{"teal":2193,"source":"contracts/abstracted_account.algo.ts:456","pc":[1982,1983,1984]},{"teal":2196,"source":"contracts/abstracted_account.algo.ts:456","pc":[1985]},{"teal":2197,"source":"contracts/abstracted_account.algo.ts:456","pc":[1986]},{"teal":2202,"source":"contracts/abstracted_account.algo.ts:457","pc":[1987,1988]},{"teal":2203,"source":"contracts/abstracted_account.algo.ts:457","pc":[1989]},{"teal":2204,"source":"contracts/abstracted_account.algo.ts:457","pc":[1990]},{"teal":2205,"source":"contracts/abstracted_account.algo.ts:457","pc":[1991]},{"teal":2208,"source":"contracts/abstracted_account.algo.ts:457","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.admin.value\"}","pc":[1992]},{"teal":2212,"source":"contracts/abstracted_account.algo.ts:459","pc":[1993,1994]},{"teal":2213,"source":"contracts/abstracted_account.algo.ts:459","pc":[1995]},{"teal":2214,"source":"contracts/abstracted_account.algo.ts:459","pc":[1996,1997]},{"teal":2215,"source":"contracts/abstracted_account.algo.ts:459","pc":[1998]},{"teal":2216,"source":"contracts/abstracted_account.algo.ts:459","pc":[1999,2000]},{"teal":2220,"source":"contracts/abstracted_account.algo.ts:460","pc":[2001,2002]},{"teal":2221,"source":"contracts/abstracted_account.algo.ts:460","pc":[2003]},{"teal":2222,"source":"contracts/abstracted_account.algo.ts:460","pc":[2004,2005]},{"teal":2223,"source":"contracts/abstracted_account.algo.ts:460","pc":[2006]},{"teal":2224,"source":"contracts/abstracted_account.algo.ts:460","pc":[2007,2008]},{"teal":2225,"source":"contracts/abstracted_account.algo.ts:460","pc":[2009]},{"teal":2226,"source":"contracts/abstracted_account.algo.ts:460","pc":[2010,2011]},{"teal":2230,"source":"contracts/abstracted_account.algo.ts:462","pc":[2012]},{"teal":2231,"source":"contracts/abstracted_account.algo.ts:462","pc":[2013,2014]},{"teal":2232,"source":"contracts/abstracted_account.algo.ts:462","pc":[2015]},{"teal":2233,"source":"contracts/abstracted_account.algo.ts:462","pc":[2016]},{"teal":2234,"source":"contracts/abstracted_account.algo.ts:462","pc":[2017]},{"teal":2235,"source":"contracts/abstracted_account.algo.ts:462","pc":[2018]},{"teal":2238,"source":"contracts/abstracted_account.algo.ts:462","errorMessage":"plugin does not exist","pc":[2019]},{"teal":2242,"source":"contracts/abstracted_account.algo.ts:463","pc":[2020]},{"teal":2243,"source":"contracts/abstracted_account.algo.ts:463","pc":[2021,2022]},{"teal":2244,"source":"contracts/abstracted_account.algo.ts:463","pc":[2023]},{"teal":2245,"source":"contracts/abstracted_account.algo.ts:463","pc":[2024]},{"teal":2246,"source":"contracts/abstracted_account.algo.ts:463","pc":[2025]},{"teal":2247,"source":"contracts/abstracted_account.algo.ts:463","pc":[2026]},{"teal":2250,"source":"contracts/abstracted_account.algo.ts:463","errorMessage":"method does not exist","pc":[2027]},{"teal":2254,"source":"contracts/abstracted_account.algo.ts:465","pc":[2028]},{"teal":2255,"source":"contracts/abstracted_account.algo.ts:465","pc":[2029,2030]},{"teal":2256,"source":"contracts/abstracted_account.algo.ts:465","pc":[2031]},{"teal":2257,"source":"contracts/abstracted_account.algo.ts:465","pc":[2032]},{"teal":2260,"source":"contracts/abstracted_account.algo.ts:465","errorMessage":"box value does not exist: this.plugins(pluginKey).value","pc":[2033]},{"teal":2261,"source":"contracts/abstracted_account.algo.ts:465","pc":[2034,2035]},{"teal":2262,"source":"contracts/abstracted_account.algo.ts:465","pc":[2036,2037]},{"teal":2263,"source":"contracts/abstracted_account.algo.ts:465","pc":[2038,2039]},{"teal":2264,"source":"contracts/abstracted_account.algo.ts:465","pc":[2040]},{"teal":2265,"source":"contracts/abstracted_account.algo.ts:465","pc":[2041,2042]},{"teal":2266,"source":"contracts/abstracted_account.algo.ts:465","pc":[2043]},{"teal":2267,"source":"contracts/abstracted_account.algo.ts:465","pc":[2044]},{"teal":2270,"source":"contracts/abstracted_account.algo.ts:465","errorMessage":"box value does not exist: this.plugins(pluginKey).value","pc":[2045]},{"teal":2271,"source":"contracts/abstracted_account.algo.ts:465","pc":[2046,2047]},{"teal":2272,"source":"contracts/abstracted_account.algo.ts:465","pc":[2048,2049]},{"teal":2273,"source":"contracts/abstracted_account.algo.ts:465","pc":[2050,2051,2052]},{"teal":2274,"source":"contracts/abstracted_account.algo.ts:465","pc":[2053]},{"teal":2275,"source":"contracts/abstracted_account.algo.ts:465","pc":[2054]},{"teal":2276,"source":"contracts/abstracted_account.algo.ts:465","pc":[2055]},{"teal":2277,"source":"contracts/abstracted_account.algo.ts:465","pc":[2056]},{"teal":2278,"source":"contracts/abstracted_account.algo.ts:465","pc":[2057]},{"teal":2279,"source":"contracts/abstracted_account.algo.ts:465","pc":[2058,2059]},{"teal":2280,"source":"contracts/abstracted_account.algo.ts:465","pc":[2060]},{"teal":2281,"source":"contracts/abstracted_account.algo.ts:465","pc":[2061,2062]},{"teal":2282,"source":"contracts/abstracted_account.algo.ts:465","pc":[2063]},{"teal":2286,"source":"contracts/abstracted_account.algo.ts:466","pc":[2064]},{"teal":2287,"source":"contracts/abstracted_account.algo.ts:466","pc":[2065,2066]},{"teal":2288,"source":"contracts/abstracted_account.algo.ts:466","pc":[2067]},{"teal":2289,"source":"contracts/abstracted_account.algo.ts:466","pc":[2068]},{"teal":2290,"source":"contracts/abstracted_account.algo.ts:456","pc":[2069]},{"teal":2293,"source":"contracts/abstracted_account.algo.ts:32","pc":[2070,2071,2072,2073,2074,2075]},{"teal":2294,"source":"contracts/abstracted_account.algo.ts:32","pc":[2076,2077,2078]},{"teal":2295,"source":"contracts/abstracted_account.algo.ts:32","pc":[2079,2080,2081,2082]},{"teal":2298,"source":"contracts/abstracted_account.algo.ts:32","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[2083]},{"teal":2301,"source":"contracts/abstracted_account.algo.ts:32","pc":[2084,2085,2086,2087,2088,2089]},{"teal":2302,"source":"contracts/abstracted_account.algo.ts:32","pc":[2090,2091,2092,2093,2094,2095]},{"teal":2303,"source":"contracts/abstracted_account.algo.ts:32","pc":[2096,2097,2098,2099,2100,2101]},{"teal":2304,"source":"contracts/abstracted_account.algo.ts:32","pc":[2102,2103]},{"teal":2305,"source":"contracts/abstracted_account.algo.ts:32","pc":[2104,2105,2106,2107,2108,2109]},{"teal":2306,"source":"contracts/abstracted_account.algo.ts:32","pc":[2110,2111,2112,2113,2114,2115]},{"teal":2307,"source":"contracts/abstracted_account.algo.ts:32","pc":[2116,2117,2118,2119,2120,2121]},{"teal":2308,"source":"contracts/abstracted_account.algo.ts:32","pc":[2122,2123,2124,2125,2126,2127]},{"teal":2309,"source":"contracts/abstracted_account.algo.ts:32","pc":[2128,2129,2130,2131,2132,2133]},{"teal":2310,"source":"contracts/abstracted_account.algo.ts:32","pc":[2134,2135,2136,2137,2138,2139]},{"teal":2311,"source":"contracts/abstracted_account.algo.ts:32","pc":[2140,2141,2142,2143,2144,2145]},{"teal":2312,"source":"contracts/abstracted_account.algo.ts:32","pc":[2146,2147,2148,2149,2150,2151]},{"teal":2313,"source":"contracts/abstracted_account.algo.ts:32","pc":[2152,2153,2154,2155,2156,2157]},{"teal":2314,"source":"contracts/abstracted_account.algo.ts:32","pc":[2158,2159,2160,2161,2162,2163]},{"teal":2315,"source":"contracts/abstracted_account.algo.ts:32","pc":[2164,2165,2166]},{"teal":2316,"source":"contracts/abstracted_account.algo.ts:32","pc":[2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196]},{"teal":2319,"source":"contracts/abstracted_account.algo.ts:32","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[2197]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAGAQAEIAYYJgkAAXABYQFtAW4BAAgAAAAAAAAAAAQPiFSTBBUffHUxGBQhBAsxGQiNDAfYAAAAAAAAAAAAAAfKAAAAAAAAAAAAAACKAgAoi/8Wi/5QjAApiwBQvUxIRCmLAFC+RDX/NP9XAAgXMgYPRDIGKYsAUL5ENf80/1cQCBcJKYsAUL5ENf80/1cICBcPRImKAgEoi/8Wi/5QjAApiwBQvUxISUEAEimLAFC+RDX/NP9XAAgXMgYPEElBACEyBimLAFC+RDX/NP9XEAgXCSmLAFC+RDX/NP9XCAgXDxCMAImKAQGL/zgAMgoSSUEACIv/OCAyChIQQQACIomL/zgQIQQSSUEACYv/OBg2MgASEElBAAeL/zgbIhIQSUEAB4v/OBkjEhBJQQAJi/85GgAnBxIQiYoAAChHAiOMADEWIgiMAYsBMgQMQQAYiwGMAosCiP+NQQADIowAiwEiCIwBQv/giwBEiYoDAChHCov/FjIDUIwAi/8WMQBQjAEjjAKL/klBABEpiwBQvkQ1/zT/VxgIFyMNEIwDi/1JQQARKYsBUL5ENf80/1cYCBcjDRCMBDEWIgiMBYsFMgQMQQBeiwWMBosGiP8YQQADIowCiwMUSUAACjIDi/+LBogAQxGMB4v+SUEAA4sHEIwIiwQUSUAACjEAi/+LBogAJRGMCYv9SUEAA4sJEIwKiwhJQAADiwoRRIsFIgiMBUL/mosCRImKAwEoi/84ECEEE0lAABWL/zgYi/4TSUEACYv/OBg2MgATEBFJQAASi/0yAxNJQQAIi/84AIv9ExARSUAABov/iP58EUEABCJCAD+L/zgbIw1Ei/85GgAVJBJEi/4Wi/1Qi/85GgCABAAAAABQSVcEACioRFcABFCMACuLAFC9TEgUQQAEI0IAASKMAIk2GgFJFSUSRIgAAiJDigEAMQCL/xJEKov/Z4k2GgFJFSUSRIgAAiJDigEAMQAqZBJEKov/Z4k2GgNJFSUSRDYaAkkVJRJENhoBF4gAAiJDigMAKDEAi/9yCEgSRDIKcwJIi/9yCEgSRIv/Fov+UIwAKYsAUL1MSElBAA8piwBQvkQ1/zT/gYACUxBEKov9Z4knCIgABFCwIkOKAAEqZImIAAIiQ4oAADIKcwJIMgMSRIk2GgJJFSISRCNTNhoBSRUlEkSIAAIiQ4oCADEAKmQSRLEishCL/7IHi/+yIIAbcmVrZXlpbmcgYWJzdHJhY3RlZCBhY2NvdW50sgUjsgGzi/5BAAOI/X2JJwg2GgJJFSUSRDYaAReIAAonBSNPAlRQsCJDigIBKDIDi/+I/LKMAIsAQQAEIkIAB4v+i/+I/KCMAIk2GgEXiAACIkOKAQAoRwMpi/8WMgNQUL1MSIwAKYv/FjEAUFC9TEiMASOMAiOMA4sAQQAJMgOL/4j8YowCiwFBAAkxAIv/iPxUjAOLABRJQQAEiwEUEElAABOLAElBAASLAhQQSUEABIsDFBARQQAKMgOL/4j73kIAHIsBSUEABIsDFBBJQQAEiwIUEEEABzEAi/+I+7+LA4sCi/+I/NWxIrIQMgqyB4v/cghIsiCAFnJla2V5aW5nIHRvIHBsdWdpbiBhcHCyBSOyAbMpi/8WiwJBAAUyA0IAAjEAUFC+RDX/NP+BEDIGFimL/xaLAkEABTIDQgACMQBQUE4Cu4k2GgFXAgCIAAIiQ4oBACOBCCcEi/9QTgK6F4j+7Yk2GgZXAgA2GgVJFSISRCNTNhoEFzYaAxc2GgJJFSUSRDYaAReIAAIiQ4oGAChJMQAqZBJEi/8Wi/5QjAApiwBQi/0Wi/wWUCcGUIv6FSQKFlAnBSOL+1RQvyOMAYsBi/oVJAoMQQAkK4v/Fov+UIv6Nf8jiwEkCwg0/0wkWFBQI7lIiwEiCIwBQv/RiTYaA1cCADYaAkkVJRJENhoBF4gAAiJDigMAKEcDMQAqZBJEi/8Wi/5QjAApiwBQvUxIRCmLAFC+RDX/NP9XGAgXjAEjjAKLAov9FSQKDEEANIv/Fov+UIv9Nf8jiwIkCwg0/0wkWFCMAyuLA1C9TEhEiwEiCYwBK4sDULyLAiIIjAJC/8GLASMSRCmLAFC8iTYaB1cCADYaBkkVIhJEI1M2GgUXNhoEFzYaA0kVJRJENhoCFzYaAVcCAIgAAiJDigcAKEcCMQAqZBJEJwSL/1C9TEgURIv+Fov9UIwAJwSL/1CLAL+L/BaL+xZQJwZQi/kVJAoWUCcFI4v6VFCMASmLAFCLAb8jjAKLAov5FSQKDEEAJCuL/haL/VCL+TX/I4sCJAsINP9MJFhQUCO5SIsCIgiMAkL/0Yk2GgFXAgCIAAIiQ4oBACgxACpkEkQnBIv/UL1MSEQnBIv/UIwAKYsAvkRQvUxIRCmLAL5EUL5ENf80/1cYCBcjEkQnBIv/ULwpiwC+RFC8iTYaA0kVJBJENhoCSRUlEkQ2GgEXiAACIkOKAwAoSTEAKmQSRIv/Fov+UIwAi/8Wi/5Qi/1QjAEpiwBQvUxIRCuLAVC9TEgURCmLAFC+RDX/NP8hBSmLAFC+RDX/NP9XGAgXIggWKYsAUE4CuyuL/xaL/lCL/VBQI7lIiTYaA0kVJBJENhoCSRUlEkQ2GgEXiAACIkOKAwAoSTEAKmQSRIv/Fov+UIwAi/8Wi/5Qi/1QjAEpiwBQvUxIRCuLAVC9TEhEKYsAUL5ENf80/yEFKYsAUL5ENf80/1cYCBciCRYpiwBQTgK7K4sBULyJgATTJL6kNhoAjgH6kQCABNJLdVaABF+kScaABBO8ROQnB4AEyVpdPYAE6QJtqIAEfHZt3IAEVvKLWIAETiPL0YAEgkQE14AEucy0ZIAE41C51IAEUWoBX4AEGFYHxTYaAI4O+jr6Vfqv+r760Pso+2P8YvyA/Qz9nP5F/pX/EAA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":26,"patch":0,"commitHash":"0d10b244"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type PluginInfo = {
  lastValidRound: bigint,
  cooldown: bigint,
  lastCalled: bigint,
  methodRestrictions: bigint,
  adminPrivileges: boolean
}


/**
 * Converts the ABI tuple representation of a PluginInfo to the struct representation
 */
export function PluginInfoFromTuple(abiTuple: [bigint, bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginInfo, APP_SPEC.structs) as PluginInfo
}

export type PluginsKey = {
  application: bigint,
  allowedCaller: string
}


/**
 * Converts the ABI tuple representation of a PluginsKey to the struct representation
 */
export function PluginsKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginsKey, APP_SPEC.structs) as PluginsKey
}

export type MethodsKey = {
  application: bigint,
  allowedCaller: string,
  method: Uint8Array
}


/**
 * Converts the ABI tuple representation of a MethodsKey to the struct representation
 */
export function MethodsKeyFromTuple(abiTuple: [bigint, string, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MethodsKey, APP_SPEC.structs) as MethodsKey
}

/**
 * The argument types for the AbstractedAccount contract
 */
export type AbstractedAccountArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address)void': {
      /**
       * The admin for this app
       */
      admin: string
    }
    'arc58_changeAdmin(address)void': {
      /**
       * The new admin
       */
      newAdmin: string
    }
    'arc58_pluginChangeAdmin(uint64,address,address)void': {
      /**
       * The app calling the plugin
       */
      plugin: bigint | number
      /**
       * The address that triggered the plugin
       */
      allowedCaller: string
      /**
       * The new admin
       */
      newAdmin: string
    }
    'arc58_getAdmin()address': Record<string, never>
    'arc58_verifyAuthAddr()void': Record<string, never>
    'arc58_rekeyTo(address,bool)void': {
      /**
       * The address to rekey to
       */
      addr: string
      /**
       * Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
       */
      flash: boolean
    }
    'arc58_canCall(uint64,address)bool': {
      /**
       * the plugin to be rekeyed to
       */
      plugin: bigint | number
      address: string
    }
    'arc58_rekeyToPlugin(uint64)void': {
      /**
       * The app to rekey to
       */
      plugin: bigint | number
    }
    'arc58_rekeyToNamedPlugin(string)void': {
      /**
       * The name of the plugin to rekey to
       */
      name: string
    }
    'arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void': {
      /**
       * The app to add
       */
      app: bigint | number
      /**
      * The address of that's allowed to call the app
      or the global zero address for all addresses

       */
      allowedCaller: string
      /**
       * The round when the permission expires
       */
      lastValidRound: bigint | number
      /**
       * The number of rounds that must pass before the plugin can be called again
       */
      cooldown: bigint | number
      /**
       * Whether the plugin has permissions to change the admin account
       */
      adminPrivileges: boolean
      methods: Uint8Array[]
    }
    'arc58_removePlugin(uint64,address,byte[4][])void': {
      /**
       * The app to remove
       */
      app: bigint | number
      /**
       * The address of that's allowed to call the app
       */
      allowedCaller: string
      /**
      * The methods that to remove before attempting to uninstall the plugin
      or the global zero address for all addresses

       */
      methods: Uint8Array[]
    }
    'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void': {
      /**
       * The plugin name
       */
      name: string
      /**
       * The plugin app
       */
      app: bigint | number
      /**
      * The address of that's allowed to call the app
      or the global zero address for all addresses

       */
      allowedCaller: string
      /**
       * The round when the permission expires
       */
      lastValidRound: bigint | number
      /**
       * The number of rounds that must pass before the plugin can be called again
       */
      cooldown: bigint | number
      /**
       * Whether the plugin has permissions to change the admin account
       */
      adminPrivileges: boolean
      /**
       * The methods that are allowed to be called on the plugin
       */
      methods: Uint8Array[]
    }
    'arc58_removeNamedPlugin(string)void': {
      /**
       * The plugin name
       */
      name: string
    }
    'arc58_addMethod(uint64,address,byte[4])void': {
      app: bigint | number
      allowedCaller: string
      method: Uint8Array
    }
    'arc58_removeMethod(uint64,address,byte[4])void': {
      app: bigint | number
      allowedCaller: string
      method: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address)void': [admin: string]
    'arc58_changeAdmin(address)void': [newAdmin: string]
    'arc58_pluginChangeAdmin(uint64,address,address)void': [plugin: bigint | number, allowedCaller: string, newAdmin: string]
    'arc58_getAdmin()address': []
    'arc58_verifyAuthAddr()void': []
    'arc58_rekeyTo(address,bool)void': [addr: string, flash: boolean]
    'arc58_canCall(uint64,address)bool': [plugin: bigint | number, address: string]
    'arc58_rekeyToPlugin(uint64)void': [plugin: bigint | number]
    'arc58_rekeyToNamedPlugin(string)void': [name: string]
    'arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void': [app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean, methods: Uint8Array[]]
    'arc58_removePlugin(uint64,address,byte[4][])void': [app: bigint | number, allowedCaller: string, methods: Uint8Array[]]
    'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void': [name: string, app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean, methods: Uint8Array[]]
    'arc58_removeNamedPlugin(string)void': [name: string]
    'arc58_addMethod(uint64,address,byte[4])void': [app: bigint | number, allowedCaller: string, method: Uint8Array]
    'arc58_removeMethod(uint64,address,byte[4])void': [app: bigint | number, allowedCaller: string, method: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type AbstractedAccountReturns = {
  'createApplication(address)void': void
  'arc58_changeAdmin(address)void': void
  'arc58_pluginChangeAdmin(uint64,address,address)void': void
  'arc58_getAdmin()address': string
  'arc58_verifyAuthAddr()void': void
  'arc58_rekeyTo(address,bool)void': void
  'arc58_canCall(uint64,address)bool': boolean
  'arc58_rekeyToPlugin(uint64)void': void
  'arc58_rekeyToNamedPlugin(string)void': void
  'arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void': void
  'arc58_removePlugin(uint64,address,byte[4][])void': void
  'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void': void
  'arc58_removeNamedPlugin(string)void': void
  'arc58_addMethod(uint64,address,byte[4])void': void
  'arc58_removeMethod(uint64,address,byte[4])void': void
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccountTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: AbstractedAccountArgs['obj']['createApplication(address)void']
      argsTuple: AbstractedAccountArgs['tuple']['createApplication(address)void']
      returns: AbstractedAccountReturns['createApplication(address)void']
    }>
    & Record<'arc58_changeAdmin(address)void' | 'arc58_changeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']
      returns: AbstractedAccountReturns['arc58_changeAdmin(address)void']
    }>
    & Record<'arc58_pluginChangeAdmin(uint64,address,address)void' | 'arc58_pluginChangeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']
      returns: AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void']
    }>
    & Record<'arc58_getAdmin()address' | 'arc58_getAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_getAdmin()address']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_getAdmin()address']
      returns: AbstractedAccountReturns['arc58_getAdmin()address']
    }>
    & Record<'arc58_verifyAuthAddr()void' | 'arc58_verifyAuthAddr', {
      argsObj: AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']
      returns: AbstractedAccountReturns['arc58_verifyAuthAddr()void']
    }>
    & Record<'arc58_rekeyTo(address,bool)void' | 'arc58_rekeyTo', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']
      returns: AbstractedAccountReturns['arc58_rekeyTo(address,bool)void']
    }>
    & Record<'arc58_canCall(uint64,address)bool' | 'arc58_canCall', {
      argsObj: AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']
      /**
       * whether the plugin can be called via txn sender or globally
       */
      returns: AbstractedAccountReturns['arc58_canCall(uint64,address)bool']
    }>
    & Record<'arc58_rekeyToPlugin(uint64)void' | 'arc58_rekeyToPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']
      returns: AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void']
    }>
    & Record<'arc58_rekeyToNamedPlugin(string)void' | 'arc58_rekeyToNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void']
    }>
    & Record<'arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void' | 'arc58_addPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']
      returns: AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']
    }>
    & Record<'arc58_removePlugin(uint64,address,byte[4][])void' | 'arc58_removePlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address,byte[4][])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address,byte[4][])void']
      returns: AbstractedAccountReturns['arc58_removePlugin(uint64,address,byte[4][])void']
    }>
    & Record<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void' | 'arc58_addNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']
      returns: AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']
    }>
    & Record<'arc58_removeNamedPlugin(string)void' | 'arc58_removeNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_removeNamedPlugin(string)void']
    }>
    & Record<'arc58_addMethod(uint64,address,byte[4])void' | 'arc58_addMethod', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addMethod(uint64,address,byte[4])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addMethod(uint64,address,byte[4])void']
      returns: AbstractedAccountReturns['arc58_addMethod(uint64,address,byte[4])void']
    }>
    & Record<'arc58_removeMethod(uint64,address,byte[4])void' | 'arc58_removeMethod', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removeMethod(uint64,address,byte[4])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removeMethod(uint64,address,byte[4])void']
      returns: AbstractedAccountReturns['arc58_removeMethod(uint64,address,byte[4])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        plugins: Map<PluginsKey, PluginInfo>
        methods: Map<MethodsKey, Uint8Array>
        namedPlugins: Map<Uint8Array | string, PluginsKey>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AbstractedAccountSignatures = keyof AbstractedAccountTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AbstractedAccountNonVoidMethodSignatures = keyof AbstractedAccountTypes['methods'] extends infer T ? T extends keyof AbstractedAccountTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AbstractedAccountTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AbstractedAccountTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address)void'] | AbstractedAccountArgs['tuple']['createApplication(address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address)void'] | AbstractedAccountArgs['tuple']['createApplication(address)void']> & {method: 'createApplication(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AbstractedAccountCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AbstractedAccount smart contract
 */
export abstract class AbstractedAccountParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AbstractedAccountCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address)void':
            return AbstractedAccountParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AbstractedAccount smart contract using the createApplication(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AbstractedAccountArgs['obj']['createApplication(address)void'] | AbstractedAccountArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc58_changeAdmin(address)void ABI method
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_changeAdmin(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_pluginChangeAdmin(uint64,address,address)void ABI method
   *
   * Attempt to change the admin via plugin.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_pluginChangeAdmin(uint64,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.allowedCaller, params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_getAdmin()address ABI method
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_getAdmin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_verifyAuthAddr()void ABI method
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_verifyAuthAddr()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyTo(address,bool)void ABI method
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyTo(address,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addr, params.args.flash],
    }
  }
  /**
   * Constructs a no op call for the arc58_canCall(uint64,address)bool ABI method
   *
   * check whether the plugin can be used
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_canCall(uint64,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.address],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToPlugin(uint64)void ABI method
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToPlugin(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToNamedPlugin(string)void ABI method
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void ABI method
   *
   * Add an app to the list of approved plugins
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges, params.args.methods],
    }
  }
  /**
   * Constructs a no op call for the arc58_removePlugin(uint64,address,byte[4][])void ABI method
   *
   * Remove an app from the list of approved plugins
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address,byte[4][])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removePlugin(uint64,address,byte[4][])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.methods],
    }
  }
  /**
   * Constructs a no op call for the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void ABI method
   *
   * Add a named plugin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges, params.args.methods],
    }
  }
  /**
   * Constructs a no op call for the arc58_removeNamedPlugin(string)void ABI method
   *
   * Remove a named plugin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removeNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc58_addMethod(uint64,address,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddMethod(params: CallParams<AbstractedAccountArgs['obj']['arc58_addMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_addMethod(uint64,address,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addMethod(uint64,address,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.method],
    }
  }
  /**
   * Constructs a no op call for the arc58_removeMethod(uint64,address,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemoveMethod(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_removeMethod(uint64,address,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removeMethod(uint64,address,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.method],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AbstractedAccount smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AbstractedAccountFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AbstractedAccountFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AbstractedAccountClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AbstractedAccountClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AbstractedAccountDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AbstractedAccountParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
    })
    return { result: result.result, appClient: new AbstractedAccountClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address)void'] | AbstractedAccountArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address)void'] | AbstractedAccountArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using an ABI method call using the createApplication(address)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address)void'] | AbstractedAccountArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AbstractedAccountParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | AbstractedAccountReturns['createApplication(address)void'] }, appClient: new AbstractedAccountClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AbstractedAccount app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AbstractedAccountNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AbstractedAccountClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AbstractedAccountClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call params: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address,byte[4][])void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addMethod(uint64,address,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddMethod: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_addMethod(uint64,address,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddMethod(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeMethod(uint64,address,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemoveMethod: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_removeMethod(uint64,address,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemoveMethod(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address,byte[4][])void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addMethod(uint64,address,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddMethod: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_addMethod(uint64,address,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddMethod(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeMethod(uint64,address,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemoveMethod: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_removeMethod(uint64,address,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemoveMethod(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58ChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_changeAdmin(address)void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58PluginChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58GetAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_getAdmin()address']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58VerifyAuthAddr: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_verifyAuthAddr()void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyTo: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_rekeyTo(address,bool)void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call result: whether the plugin can be called via txn sender or globally
     */
    arc58CanCall: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58CanCall(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_canCall(uint64,address)bool']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address,byte[4][])void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemovePlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address,byte[4][])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_removePlugin(uint64,address,byte[4][])void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemoveNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_removeNamedPlugin(string)void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addMethod(uint64,address,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddMethod: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_addMethod(uint64,address,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddMethod(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_addMethod(uint64,address,byte[4])void']}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeMethod(uint64,address,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemoveMethod: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_removeMethod(uint64,address,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemoveMethod(params))
      return {...result, return: result.return as undefined | AbstractedAccountReturns['arc58_removeMethod(uint64,address,byte[4])void']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AbstractedAccountClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> = {args: []}) {
    const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    return result.return as AbstractedAccountReturns['arc58_getAdmin()address']
  }

  /**
   * Makes a readonly (simulated) call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * check whether the plugin can be used
   *
   * @param params The params for the smart contract call
   * @returns The call result: whether the plugin can be called via txn sender or globally
   */
  async arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']>) {
    const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    return result.return as AbstractedAccountReturns['arc58_canCall(uint64,address)bool']
  }

  /**
   * Methods to access state for the current AbstractedAccount app
   */
  state = {
    /**
     * Methods to access global state for the current AbstractedAccount app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
    },
    /**
     * Methods to access box state for the current AbstractedAccount app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the plugins map in box state
       */
      plugins: {
        /**
         * Get all current values of the plugins map in box state
         */
        getMap: async (): Promise<Map<PluginsKey, PluginInfo>> => { return (await this.appClient.state.box.getMap("plugins")) as Map<PluginsKey, PluginInfo> },
        /**
         * Get a current value of the plugins map by key from box state
         */
        value: async (key: PluginsKey): Promise<PluginInfo | undefined> => { return await this.appClient.state.box.getMapValue("plugins", key) as PluginInfo | undefined },
      },
      /**
       * Get values from the methods map in box state
       */
      methods: {
        /**
         * Get all current values of the methods map in box state
         */
        getMap: async (): Promise<Map<MethodsKey, Uint8Array>> => { return (await this.appClient.state.box.getMap("methods")) as Map<MethodsKey, Uint8Array> },
        /**
         * Get a current value of the methods map by key from box state
         */
        value: async (key: MethodsKey): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("methods", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the namedPlugins map in box state
       */
      namedPlugins: {
        /**
         * Get all current values of the namedPlugins map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, PluginsKey>> => { return (await this.appClient.state.box.getMap("namedPlugins")) as Map<Uint8Array, PluginsKey> },
        /**
         * Get a current value of the namedPlugins map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<PluginsKey | undefined> => { return await this.appClient.state.box.getMapValue("namedPlugins", key) as PluginsKey | undefined },
      },
    },
  }

  public newGroup(): AbstractedAccountComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc58_changeAdmin(address)void method call against the AbstractedAccount contract
       */
      arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58ChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_pluginChangeAdmin(uint64,address,address)void method call against the AbstractedAccount contract
       */
      arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58PluginChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_getAdmin()address method call against the AbstractedAccount contract
       */
      arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58GetAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_getAdmin()address', v))
        return this
      },
      /**
       * Add a arc58_verifyAuthAddr()void method call against the AbstractedAccount contract
       */
      arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58VerifyAuthAddr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyTo(address,bool)void method call against the AbstractedAccount contract
       */
      arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyTo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_canCall(uint64,address)bool method call against the AbstractedAccount contract
       */
      arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58CanCall(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_canCall(uint64,address)bool', v))
        return this
      },
      /**
       * Add a arc58_rekeyToPlugin(uint64)void method call against the AbstractedAccount contract
       */
      arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyToNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void method call against the AbstractedAccount contract
       */
      arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removePlugin(uint64,address,byte[4][])void method call against the AbstractedAccount contract
       */
      arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemovePlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void method call against the AbstractedAccount contract
       */
      arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removeNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemoveNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addMethod(uint64,address,byte[4])void method call against the AbstractedAccount contract
       */
      arc58AddMethod(params: CallParams<AbstractedAccountArgs['obj']['arc58_addMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_addMethod(uint64,address,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddMethod(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removeMethod(uint64,address,byte[4])void method call against the AbstractedAccount contract
       */
      arc58RemoveMethod(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_removeMethod(uint64,address,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemoveMethod(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AbstractedAccount contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc58_changeAdmin(address)void ABI method.
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58ChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_changeAdmin(address)void'] | undefined]>

  /**
   * Calls the arc58_pluginChangeAdmin(uint64,address,address)void ABI method.
   *
   * Attempt to change the admin via plugin.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58PluginChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'] | undefined]>

  /**
   * Calls the arc58_getAdmin()address ABI method.
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58GetAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_getAdmin()address'] | undefined]>

  /**
   * Calls the arc58_verifyAuthAddr()void ABI method.
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58VerifyAuthAddr(params?: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_verifyAuthAddr()void'] | undefined]>

  /**
   * Calls the arc58_rekeyTo(address,bool)void ABI method.
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyTo(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'] | undefined]>

  /**
   * Calls the arc58_canCall(uint64,address)bool ABI method.
   *
   * check whether the plugin can be used
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58CanCall(params?: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,address)bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,address)bool']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_canCall(uint64,address)bool'] | undefined]>

  /**
   * Calls the arc58_rekeyToPlugin(uint64)void ABI method.
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void'] | undefined]>

  /**
   * Calls the arc58_rekeyToNamedPlugin(string)void ABI method.
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'] | undefined]>

  /**
   * Calls the arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void ABI method.
   *
   * Add an app to the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool,byte[4][])void'] | undefined]>

  /**
   * Calls the arc58_removePlugin(uint64,address,byte[4][])void ABI method.
   *
   * Remove an app from the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemovePlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address,byte[4][])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removePlugin(uint64,address,byte[4][])void'] | undefined]>

  /**
   * Calls the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void ABI method.
   *
   * Add a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool,byte[4][])void'] | undefined]>

  /**
   * Calls the arc58_removeNamedPlugin(string)void ABI method.
   *
   * Remove a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'] | undefined]>

  /**
   * Calls the arc58_addMethod(uint64,address,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddMethod(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_addMethod(uint64,address,byte[4])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addMethod(uint64,address,byte[4])void'] | undefined]>

  /**
   * Calls the arc58_removeMethod(uint64,address,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveMethod(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removeMethod(uint64,address,byte[4])void'] | AbstractedAccountArgs['tuple']['arc58_removeMethod(uint64,address,byte[4])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removeMethod(uint64,address,byte[4])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

